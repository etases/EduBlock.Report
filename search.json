[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EduBlock",
    "section": "",
    "text": "Preface\nThis is the final report of EduBlock"
  },
  {
    "objectID": "Introduction.html#overview",
    "href": "Introduction.html#overview",
    "title": "3  Project Introduction",
    "section": "3.1 Overview",
    "text": "3.1 Overview\n\n3.1.1 Project Information\n\n\n3.1.2 Project Team"
  },
  {
    "objectID": "Introduction.html#background",
    "href": "Introduction.html#background",
    "title": "3  Project Introduction",
    "section": "3.2 Background",
    "text": "3.2 Background"
  },
  {
    "objectID": "Introduction.html#existing-systems",
    "href": "Introduction.html#existing-systems",
    "title": "3  Project Introduction",
    "section": "3.3 Existing Systems",
    "text": "3.3 Existing Systems"
  },
  {
    "objectID": "Introduction.html#business-opportunity",
    "href": "Introduction.html#business-opportunity",
    "title": "3  Project Introduction",
    "section": "3.4 Business Opportunity",
    "text": "3.4 Business Opportunity"
  },
  {
    "objectID": "Introduction.html#software-product-vision",
    "href": "Introduction.html#software-product-vision",
    "title": "3  Project Introduction",
    "section": "3.5 Software Product Vision",
    "text": "3.5 Software Product Vision"
  },
  {
    "objectID": "Introduction.html#project-scope-limitations",
    "href": "Introduction.html#project-scope-limitations",
    "title": "3  Project Introduction",
    "section": "3.6 Project Scope & Limitations",
    "text": "3.6 Project Scope & Limitations"
  },
  {
    "objectID": "Management.html#overview",
    "href": "Management.html#overview",
    "title": "4  Project Management Plan",
    "section": "4.1 Overview",
    "text": "4.1 Overview\n\n4.1.1 WBS & Estimation\n\n\n4.1.2 Project Objectives\n\n\n4.1.3 Project Risks"
  },
  {
    "objectID": "Management.html#management-approach",
    "href": "Management.html#management-approach",
    "title": "4  Project Management Plan",
    "section": "4.2 Management Approach",
    "text": "4.2 Management Approach\n\n4.2.1 Project Process\n\n\n4.2.2 Quality Management\n\n\n4.2.3 Training Plan\n\n\n\n\n\n\n\n\n\nArea\nParticipants\nWhen, Duration\nWaiver Criteria\n\n\n\n\nBlockchain\nProject Team\n20/07/2022, 2 weeks\nMandatory\n\n\nHyperledger Fabric\nProject Team\n01/10/2022, 2 weeks\nMandatory for Backend Team\n\n\nJava, Javalin\nProject Team\n01/09/2022, 1 weeks\nMandatory"
  },
  {
    "objectID": "Management.html#master-schedule",
    "href": "Management.html#master-schedule",
    "title": "4  Project Management Plan",
    "section": "4.3 Master Schedule",
    "text": "4.3 Master Schedule"
  },
  {
    "objectID": "Management.html#project-organization",
    "href": "Management.html#project-organization",
    "title": "4  Project Management Plan",
    "section": "4.4 Project Organization",
    "text": "4.4 Project Organization"
  },
  {
    "objectID": "Management.html#project-communication",
    "href": "Management.html#project-communication",
    "title": "4  Project Management Plan",
    "section": "4.5 Project Communication",
    "text": "4.5 Project Communication\n\n4.5.1 Communication Plan\n\n\n\n\n\n\n\n\n\n\nItem\nTarget\nPurpose\nWhen\nType\n\n\n\n\nDiscord\nProject Team\nReview meeting & Status report\nMonday, Friday\nVoice, Remote\n\n\nGoogle Meeting\nProject Team & Supervisor\nReview meeting, Sprint revision & Closeup\nWednesday\nVoice, Remote\n\n\nMessenger\nProject Team & Supervisor\nMeeting planning, Q&A & Status report\nEveryday\nText, Remote\n\n\nFU Library\nProject Team\nPair programming & Code review\nPlanned\nOffline\n\n\n\n\n\n4.5.2 External Interfaces"
  },
  {
    "objectID": "Management.html#configuration-management",
    "href": "Management.html#configuration-management",
    "title": "4  Project Management Plan",
    "section": "4.6 Configuration Management",
    "text": "4.6 Configuration Management\n\n4.6.1 Tools & Infrastructures\n\n4.6.1.1 Common\n\n\n\nType\nTool\n\n\n\n\nVersion Control\nGit, GitHub\n\n\nUML\nPlantUML, Graphviz\n\n\nDeployment\nDocker\n\n\nProject Management\nQuarto, GitHub Projects\n\n\n\n\n\n\n4.6.2 Backend\n\n\n\n\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nJava\n\n\nLibrary\nJavalin, Fabric SDKs, HSCore, Guava, Genson, EvalEx, JWT\n\n\nCompiler\nJDK, Lombok\n\n\nUI\nTinyLog, JLine, Fabric CLI\n\n\nDBMS\nH2, Hibernate, Minifabric\n\n\nIDE / Editor\nIntelliJ IDEA, VSCode\n\n\n\n\n\n4.6.3 Frontend\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nTypeScript\n\n\nLibrary\nReact\n\n\nCompiler\nNode\n\n\nUI\nReact\n\n\nIDE / Editor\nVSCode\n\n\n\n\n\n4.6.4 Document Management\nWe use Quarto to build documents from Markdown files and use GitHub to manage the files and their changes. A participant will create a new branch to edit the files, create pull requests and wait for the project manager to review the changes and merge to the main branch. Then, it’ll be built in three outputs: a website using GitHub Pages for visualization, A PDF document & A MS-Word document.\n\n\n4.6.5 Source Code Management\nWe manage the source code by using GitHub. Endpoints of the project will be upload into separated repositories. Once the code is changed, the participant will create a new branch, create a relevant pull request, and wait for code owners to review and merge to the main branch."
  },
  {
    "objectID": "Requirement.html#overall-description",
    "href": "Requirement.html#overall-description",
    "title": "5  Software Requirement Specification",
    "section": "5.1 Overall Description",
    "text": "5.1 Overall Description\n\n5.1.1 Product Overview\nThis is the software requirement specification for the project “EduBlock”. EduBlock is an web-application that will help the school to manage their student’s records, more specifically, the students and teachers can reduce paper’s work to manage their records. Lately, the school has been using paper to manage their student’s record, which is not efficient and not environmental friendly. EduBlock will help the school to manage their student’s records in a more efficient way, although there are some other 3rd party applications that can help school to keep their student’s records, but it is not really efficient and safe, our application use blockchain technology to make sure the data is safe and secure. Every step of the process that need to be work with the records will be tracked by EduBlock, so the school can easily track the data and make sure the data is not being tampered.\n\n\n5.1.2 Business Rules\n\nThe application will be used by the students, teachers, staff and admin."
  },
  {
    "objectID": "Requirement.html#user-requirements",
    "href": "Requirement.html#user-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.2 User Requirements",
    "text": "5.2 User Requirements\n\nThe Academic record management web-app has four active actors: Student, Teacher, Staff and Administrator.\nStudents can view their academic record.\nTeachers can manage their class and view their students’ academic record.\nStaff can manage the classroom and view the academic record of the students, assign or delete teacher from the class, assign student to class, create new class."
  },
  {
    "objectID": "Requirement.html#functional-requirements",
    "href": "Requirement.html#functional-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.3 Functional Requirements",
    "text": "5.3 Functional Requirements\n\n5.3.1 System Functional Overview\nThe system is designed to provide a platform for students to view their academic records, teachers to view their students’ academic records, staff to view the academic records of students, create new class.\n\n\n5.3.2 Class Features\n\n5.3.2.1 UC-1 Get class list for Staff\n\nDescription: Staff can get list of all classes .\nActors: Staff\nPreconditions: Staff is logged in with staff account.\nPostconditions: Staff can get list of all classes.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nSystem displays list of all classes.\n\nAlternate Flow:\n\nSystem displays error message if there is no class.\n\nException Flow:\n\nSystem displays error message if there is no class.\n\n\n\n\n5.3.2.2 UC-2 Get class list for Teacher\n\nDescription: Teacher can get list of classes that he/she teach.\nActors: Teacher\nPreconditions: Teacher is logged in with teacher account.\nPostconditions: Teacher can get list of classes that he/she teach.\nBasic Flow:\n\nTeacher go to the web-app.\nTeacher choose “Class Management” on menu\nSystem displays list of classes that he/she teach.\n\nAlternate Flow:\n\nSystem displays error message if there is no class.\n\nException Flow:\n\nSystem displays error message if there is no class.\n\n\n\n\n5.3.2.3 UC-3 Get class list for Student\n\nDescription: Student can get list of classes he/she study.\nActors: Student\nPreconditions: Student is logged in with student account.\nPostconditions: Student get list of classes that he/she study.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nSystem displays list of all classes.\n\nAlternate Flow:\n\nSystem displays error message if there is no class.\n\nException Flow:\n\nSystem displays error message if there is no class.\n\n\n\n\n5.3.2.4 UC-4 Get homeroom class of teacher\n\nDescription: Teacher can get list of their homeroom class.\nActors: Teacher\nPreconditions: Teacher is logged in with teacher account.\nPostconditions: Teacher can get list of their homeroom class.\nBasic Flow:\n\nTeacher go to the web-app.\nTeacher choose “Class Management” on menu\nTeacher choose filter “Homeroom class”\nSystem displays list of their homeroom class.\n\nAlternate Flow:\n\nSystem displays error message if there is no homeroom class.\n\nException Flow:\n\nSystem displays error message if there is no homeroom class.\n\n\n\n\n5.3.2.5 UC-5 Get class’s detail\n\nDescription: Staff, Teacher and Student can get detail of a class.\nActors: Staff, Teacher, Student\nPreconditions: Staff, Teacher or Student is logged in with their account.\nPostconditions: Staff, Teacher or Student can get detail of a class.\nBasic Flow:\n\nStaff, Teacher or Student go to the web-app.\nStaff, Teacher or Student choose “Class Management” on menu\nStaff, Teacher or Student choose a class\nSystem displays detail of a class.\n\nAlternate Flow:\n\nSystem displays error message if there is no class.\n\nException Flow:\n\nSystem displays error message if there is no class.\n\n\n\n\n5.3.2.6 UC-6 Create class\n\nDescription: Only staff can create new class.\nActor: Staff\nPreconditions: Staff is logged in with staff account.\nPostconditions: Staff success create new class.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nStaff click “Create Class” button\nSystem displays form to create new class.\nStaff fill in the form and click “Create” button.\nStaff confirm the information.\nSystem displays success message and new class has been created.\n\nAlternate Flow:\n\nSystem displays error message if there is invalid class information.\n\nException Flow:\n\nSystem displays error message if there is invalid class information.\n\n\n\n\n5.3.2.7 UC-7 Update class\n\nDescription: Staff can update class information.\nActor: Staff\nPreconditions:\n\nStaff is logged in with staff account.\nClass exists.\n\nPostconditions: Staff success update class information.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nStaff choose a class\nStaff click “Update Class” button\nStaff fill in the form and click “Update” button.\nStaff confirm the information.\nSystem displays success message and class information has been updated.\n\nAlternate Flow:\n\nSystem displays error message if there is invalid class information\n\nException Flow:\n\nSystem displays error message if there is invalid class information\n\n\n\n\n5.3.2.8 UC-8 Get student list of class\n\nDescription: Staff or Teacher can get list of students in a class.\nActors: Staff, Teacher\nPreconditions: Staff or Teacher is logged in with their account.\nPostconditions: System display list of student in a class for Teacher or Staff.\nBasic Flow:\n\nStaff or Teacher go to the web-app.\nStaff or Teacher choose “Class Management” on menu\nStaff or Teacher choose a class\nStaff or Teacher click “Student List” button\nSystem displays list of student in a class.\n\nAlternate Flow:\n\nSystem displays message if there is no student in a class.\n\nException Flow:\n\nSystem displays message if there is no student in a class.\n\n\n\n\n5.3.2.9 UC-9 Get list of teachers of a class\n\nDescription: Staff, Teacher or Student can get list of teachers of a class.\nActors: Staff, Teacher, Student\nPreconditions: Staff, Teacher or Student is logged in with their account.\nPostconditions: System display list of teachers of a class for Staff, Teacher or Student.\nBasic Flow:\n\nStaff, Teacher or Student go to the web-app.\nStaff, Teacher or Student choose “Class Management” on menu\nStaff, Teacher or Student choose a class\nStaff, Teacher or Student click on “Teachers”\nSystem displays list of teachers of a class.\n\nAlternate Flow:\n\nSystem displays message if there is no teacher in a class.\n\nException Flow:\n\nSystem displays message if there is no teacher in a class.\n\n\n\n\n5.3.2.10 UC-10 Assign teachers to a class\n\nDescription: Staff can assign teachers to a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in with staff account.\nClass exists.\nTeacher exists.\n\nPostconditions: Staff success assign teachers to a class.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nStaff choose a class\nStaff click “Assign Teachers”\nSystem displays list of teachers for staff to choose.\nStaff choose teachers and click on “Assign”.\nStaff confirm the action.\nSystem displays success message and teachers have been assigned to a class.\n\nAlternate Flow:\n\nSystem displays error message if there is no teacher chosen.\n\nException Flow:\n\nSystem displays error message if there is no teacher chosen.\n\n\n\n\n5.3.2.11 UC-11 Remove teachers from a class\n\nDescription: Staff can remove teachers from a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in with staff account.\nClass exists.\nTeacher exists.\nTeacher is assigned to a class.\n\nPostconditions: Staff success remove teachers from a class.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nStaff choose a class\nStaff view list of teachers of a class.\nStaff choose teachers and click on “Remove from class”.\nStaff confirm the action.\nSystem displays success message and teachers have been removed from a class.\n\nAlternate Flow:\n\nSystem displays error message\n\nException Flow:\n\nSystem displays error message\n\n\n\n\n5.3.2.12 UC-12 Add students to a class\n\nDescription: Staff can add students to a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in with staff account.\nClass exists.\nStudent exists.\n\nPostconditions: Staff success add students to a class.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nStaff choose a class\nStaff click “Add Students”\nSystem displays list of students for staff to choose.\nStaff choose students and click on “Add”.\nStaff confirm the action.\nSystem displays success message and students have been added to a class.\n\nAlternate Flow:\n\nSystem displays error message if there’s no student chosen.\n\nException Flow:\n\nSystem displays error message.\n\n\n\n\n5.3.2.13 UC-13 Remove students from a class\n\nDescription: Staff remove students from a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in with staff account.\nClass exists.\nStudent exists.\nStudent is assigned to a class.\n\nPostconditions: Staff success remove students from a class.\nBasic Flow:\n\nStaff go to the web-app.\nStaff choose “Class Management” on menu\nStaff choose a class\nStaff view list of students of a class.\nStaff choose one or more students and click on “Remove from class”.\nStaff confirm the action.\nSystem displays success message and students have been removed from a class.\n\nAlternate Flow:\n\nSystem displays error message\n\nException Flow:\n\nSystem displays error message\n\n\n\n\n\n5.3.3 Account Features\n\n5.3.3.1 UC-14 Get own account information\n\nDescription: User can get their own account information.\nActors: Staff, Teachers, Users, Admin\nPreconditions: User is logged in with their account attached with their role.\nPostconditions: System display account information for User.\nBasic Flow:\n\nUser go to the web-app.\nUser login with their account.\nUser hover on their avatar at top right corner.\nUser click “Account Information”.\nSystem displays account information of the user.\n\nAlternate Flow:\n\nSystem displays error message.\n\nException Flow:\n\nSystem displays error message.\n\n\n\n\n5.3.3.2 UC-15 List all account\n\nDescription: Admin or Staff can get list of all accounts.\nActors: Admin, Staff\nPreconditions: Admin or Staff is logged in with their account.\nPostconditions: System display list of all accounts for Admin or Staff.\nBasic Flow:\n\nAdmin or Staff go to the web-app.\nAdmin or Staff login with their account.\nAdmin or Staff click on “Account Management” on.\nSystem displays list of all accounts.\n\nAlternate Flow:\n\nSystem displays error message.\n\nException Flow:\n\nSystem displays error message.\n\n\n\n\n5.3.3.3 UC-16 Create one or multiple accounts\n\nDescription: Admin is able to create one or multiple accounts.\nActors: Admin\nPreconditions: Admin is logged in with their account.\nPostconditions: Admin success create one or multiple accounts.\nBasic Flow:\n\nAdmin go to the web-app.\nAdmin login with their account.\nAdmin click on “Account Management” on.\nAdmin click on “Create Account”.\nSystem displays form for Admin to fill in.\nAdmin fill in the form and click on “Create”.\nSystem displays success message and account has been created.\n\nAlternate Flow:\n\nSystem displays error message if there is invalid input during the create process.\n\nException Flow:\n\nSystem displays error message if there is invalid input during the create process.\n\n\n\n\n5.3.3.4 UC-17 Update one or multiple account password\n\nDescription: Admin is able to update one or multiple account password (Reset password).\nActors: Admin\nPreconditions:\n\nAdmin is logged in with their account.\nAccount must exist.\n\nPostconditions: Admin success update one or multiple account password.\nBasic Flow:\n\nAdmin go to the web-app.\nAdmin login with their account.\nAdmin click on “Account Management” on.\nSystem displays list of all accounts.\nAdmin choose one or more accounts to update their password.\nSystem displays form for Admin to fill in.\nAdmin fill in the form and confirm the change.\nSystem displays success message and account password has been update.\n\nAlternate Flow:\n\nSystem displays error message if there is invalid input during the update password process.\n\nException Flow:\n\nSystem displays error message if there is invalid input during the update password process.\n\n\n\n\n5.3.3.5 UC-18 Get list of accounts by role\n\nDescription: Admin is able to get list of accounts with a specific role.\nActors: Admin\nPreconditions:\n\nAdmin is logged in with their account.\nAccount must exist.\nAccount must have a role.\n\nPostconditions: Admin success get list of accounts with a specific role.\nBasic Flow:\n\nAdmin go to the web-app.\nAdmin login with their account.\nAdmin click on “Account Management” on.\nSystem displays list of all accounts.\nAdmin filter accounts’s list by role.\nSystem displays list of accounts with the chosen role.\n\nAlternate Flow:\n\nSystem displays error message if there is no account with the chosen role.\n\nException Flow:\n\nSystem displays error message if there is no account with the chosen role.\n\n\n\n\n5.3.3.6 UC-19 Update user’s profile\n\nDescription: Staff is able to update user’s profile.\nActors: Staff\nPreconditions:\n\nStaff is logged in with their account.\nUser must exist.\n\nPostconditions: Staff success update user’s profile.\nBasic Flow:\n\nStaff go to the web-app.\nStaff login with their account.\nStaff click on “Account Management”.\nSystem displays list of all accounts .\nStaff choose one account to update their profile.\nSystem displays the profile for Staff to edit.\nStaff edit information and confirm the change.\nSystem displays success message and user’s profile has been update.\n\nAlternate Flow:\n\nSystem displays error message if there is invalid input during the edit process.\n\nException Flow:\n\nSystem displays error message if there is invalid input during the edit process.\n\n\n\n\n5.3.3.7 UC-20 User update their profile\n\nDescription: Staff or admin is able to update their own profile.\nActors: Staff, Admin\nPreconditions:\n\nStaff or Admin is logged in with their account.\n\nPostconditions: Staff or Admin success update their profile.\nBasic Flow:\n\nStaff or Admin go to the web-app.\nStaff or Admin login with their account.\nStaff or Admin click on “Account Information”.\nSystem displays the profile of Staff or Admin.\nStaff or Admin edit information and confirm the change.\nSystem displays success message and user’s profile has been update.\n\nAlternate Flow:\n\nSystem displays error message if there is invalid input during the edit process.\n\nException Flow:\n\nSystem displays error message if there is invalid input during the edit process.\n\n\n\n\n5.3.3.8 UC-21 Update student information\n\nDescription: Staff is able to update student information.\nActors: Staff\nPreconditions:\n\nStaff is logged in with their account.\nStudent must exist.\n\nPostconditions: Staff success update student information.\nBasic Flow:\n\nStaff go to the web-app.\nStaff login with their account.\nStaff click on “Student Management”.\nSystem displays list of all students.\nStaff choose one student to update their information.\nSystem displays the information.\nStaff edit information and confirm the change.\nSystem displays success message and student’s information has been update.\n\nAlternate Flow:\n\nSystem displays error message if there is invalid input during the update process.\n\nException Flow:\n\nSystem displays error message if there is invalid input during the update process.\n\n\n\n\n\n5.3.4 Record Features\n\n5.3.4.1 uc-22 Get own record\n\nDescription: Student is able to get their own record.\nActors: Student\nPreconditions:\n\nStudent is logged in with their account.\n\nPostconditions: Student get their own record.\nBasic Flow:\n\n\n\nAlternate Flow:\n\n\n\nException Flow:\n\n\n\n5.3.4.2 UC-23 Teacher get student’s record\n\nDescription: Teacher is able to view student’s record.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in with their account.\nStudent must exist.\n\nPostconditions: Teacher get student’s record.\nBasic Flow:\nAlternate Flow:\nException Flow:\n\n\n\n5.3.4.3 UC-24 Request record update\n\nDescription: Student or Teacher can request to update a record.\nActors: Student, Teacher\nPreconditions:\n\nStudent or Teacher is logged in with their account.\n\nPostconditions: Student or Teacher success to send request to update a record.\nBasic Flow:\nAlternate Flow:\nException Flow:\n\n\n\n5.3.4.4 UC-25 Bulk request record update\n\nDescription: Student or Teacher can request to update multiple records.\nActors: Student, Teacher\nPreconditions:\n\nStudent or Teacher is logged in with their account.\n\nPostconditions: Student or Teacher success to send request to update multiple records.\nBasic Flow:\nAlternate Flow:\nException Flow:\n\n\n\n5.3.4.5 UC-26 Get list of records by class\n\nDescription: Staff is able to get list of records by class.\nActors: Staff\nPreconditions:\n\nStaff is logged in with their account.\nClass must exist.\nClass must have students.\n\nPostconditions: Staff success to get list of records by class.\nBasic Flow:\nAlternate Flow:\nException Flow:"
  },
  {
    "objectID": "Requirement.html#non-functional-requirements",
    "href": "Requirement.html#non-functional-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.4 Non-Functional Requirements",
    "text": "5.4 Non-Functional Requirements\n\n5.4.1 External Interfaces\n\nCustom Fabric network\n\n\n\n5.4.2 Quality Attributes\nOur application ensures the following quality attributes:\n\nUsability: The application is easy to use and understand. The application is designed to be intuitive and easy to use. The application is designed to be used by both teachers and students.\nReliability: The application is designed to be reliable. The application is designed to be used with blockchain technology to ensure data integrity.\nPerformance: The application is designed to be fast and responsive.\nSecurity: The application is designed to be secure. The application is designed to be used with blockchain technology to ensure data integrity.\nMaintainability: The application is designed to be easy to maintain, update, and extend.\nPortability: The application is designed to be portable.\nScalability: The application is designed to be scalable and can be extended to support more users and more features.\nInteroperability: The application is designed to be interoperable with other applications.\nReusability: The application is designed to be reusable.\nTestability: The application is designed to be easy to test."
  },
  {
    "objectID": "Requirement.html#other-requirements",
    "href": "Requirement.html#other-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.5 Other Requirements",
    "text": "5.5 Other Requirements"
  },
  {
    "objectID": "Design.html#overall-description",
    "href": "Design.html#overall-description",
    "title": "6  Software Design Description",
    "section": "6.1 Overall Description",
    "text": "6.1 Overall Description\n\n6.1.1 Assumptions\n\n\n6.1.2 Design Constraints\n\n\n6.1.3 Technology Suggestion"
  },
  {
    "objectID": "Design.html#system-architecture-design",
    "href": "Design.html#system-architecture-design",
    "title": "6  Software Design Description",
    "section": "6.2 System Architecture Design",
    "text": "6.2 System Architecture Design\n\n6.2.1 Overall Architecture\n\n\n\nFigure 6.1: Overall architecture\n\n\n\n\n\n\n\n\n\nComponent\nDescription\n\n\n\n\nChain Node (CN)\nA node of the blockchain. This stores the records and handles the history and transaction requests from the Request Server (Change/View the score, information, etc.)\n\n\nRequest Server\nThe off-chain backend of a CN. This stores the pending requests from the user and is the only way to call a request to the CN. Each Request Server may have a different way to handle user requests (Voting, Direct Request, etc.)\n\n\nFrontend Server\nProvide the UX/UI for interacting with the Request Server\n\n\n\n\n\n6.2.2 System Architecture\n\n\n6.2.3 Package Diagram\n\n\n\nFigure 6.2: Package Diagram of Request Server\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\nroot\nMain classes\n\n\napi\nThe abstract classes & interfaces\n\n\nentity\nThe entities of the database\n\n\nhandler\nThe handlers of the endpoints of the REST API server\n\n\ninternal\nInternal classes used by other packages\n\n\ninternal/student\nThe instances of the Student Updater\n\n\nmodel\nThe input / output objects\n\n\nmodel/input\nThe input objects for the handlers\n\n\nmodel/output\nThe output objects returned from the handlers\n\n\nmodel/fabric\nThe models used internally by the student updater"
  },
  {
    "objectID": "Design.html#system-detailed-design",
    "href": "Design.html#system-detailed-design",
    "title": "6  Software Design Description",
    "section": "6.3 System Detailed Design",
    "text": "6.3 System Detailed Design\n\n6.3.1 Class Diagram\n\n\n\n\n\nFigure 6.3: ClassDiagram\n\n\n\n\n6.3.2 Sequence Diagram"
  },
  {
    "objectID": "Design.html#class-specification",
    "href": "Design.html#class-specification",
    "title": "6  Software Design Description",
    "section": "6.4 Class Specification",
    "text": "6.4 Class Specification"
  },
  {
    "objectID": "Design.html#data-database-design",
    "href": "Design.html#data-database-design",
    "title": "6  Software Design Description",
    "section": "6.5 Data & Database Design",
    "text": "6.5 Data & Database Design\n\n6.5.1 Database Design\n\n\n\nFigure 6.4: Database Design of the Request Server\n\n\n\n6.5.1.1 Account\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nUSERNAME\ncharacter varying\n255\nx\nx\n\n\n\n\nHASHEDPASSWORD\ncharacter varying\n255\n\nx\n\n\n\n\nSALT\ncharacter varying\n255\n\nx\n\n\n\n\nROLE\ncharacter varying\n255\n\nx\n\n\n\n\nCREATEDAT\ntimestamp\n\n\nx\n\n\n\n\n\n\n\n6.5.1.2 Profile\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nADDRESS\ncharacter varying\n255\n\nx\n\n\n\n\nAVATAR\ncharacter varying\n255\n\nx\n\n\n\n\nBIRTHDATE\ntimestamp\n\n\nx\n\n\n\n\nEMAIL\ncharacter varying\n255\n\nx\n\n\n\n\nFIRSTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nLASTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nMALE\nboolean\n\n\nx\n\n\n\n\nPHONE\ncharacter varying\n255\n\nx\n\n\n\n\nUPDATED\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n6.5.1.3 Student\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nETHNIC\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANJOB\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANNAME\ncharacter varying\n255\n\nx\n\n\n\n\nHOMETOWN\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\n\n\n\n6.5.1.4 Classroom\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGRADE\ncharacter varying\n255\n\nx\n\n\n\n\nHOMEROOMTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSTART_YEAR\ninteger\n\n\nx\n\n\n\n\n\n\n\n6.5.1.5 Class Student\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n6.5.1.6 Class Teacher\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n6.5.1.7 Record\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ACCOUNT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n6.5.1.8 Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\n\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVALDATE\ntimestamp\n\n\nx\n\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\nUPDATECOMPLETE\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n6.5.1.9 Pending Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n\n6.5.2 Data File Design\n\n\n\n\n\n\n\n\nFile Name\nType\nNotes\n\n\n\n\ndb\nFolder\nThe folder of The H2 Database files\n\n\nupdater\nFolder\nContains the data files of the local student updater"
  },
  {
    "objectID": "Testing.html#overall-description",
    "href": "Testing.html#overall-description",
    "title": "7  Software Testing Documentation",
    "section": "7.1 Overall Description",
    "text": "7.1 Overall Description\n\n7.1.1 Test Model\nWe apply the V-model in our project, which is a development of the waterfall model. Testing is carried out concurrently with the software development cycle in the V-model, where a testing phase corresponds to a phase of software development.\n\n\n7.1.2 Testing Levels\nAbout the Testing levels in our project, we apply all those levels including Unit testing, Integration testing, System testing and Acceptance testing.\nWith Unit testing, we test each small module in the system, each class and function. Eg (………)\nWith Integration testing is a type of testing in which individual software modules or functions are logically integrated and tested in groups together. For instance, we can test the interoperability of two functions, add 1 item and search for the item to see if they interact well with each other, after successfully creating an item, we can proceed to search for the newly created item. or not.\nSystem testing is the last test phase to determine whether the system is about to deliver satisfying the requirements and goals. It tests the whole functionality and interface of the system. For instance, a database test for a system test is used to see if the data displayed on the system matches the data in the database.\nFinally, with Acceptance Test, similar to System Test but usually tested by customers, the purpose is to see if the software meets the customer’s requirements or not.\n\n\n7.1.3 Testing Types\nFunctional testing is checking if the system is working according to the business requirements and is performed in every level of testing. Non-Functional testing is similar to Functional testing in that both occur in all levels of testing. Non-functional testing is primarily concerned with the software’s other features, such as its security and if data is exposed by straightforward queries in any input field. Structural testing is often considered a type of white box testing. Instead than focusing on the software’s functionality, this method examines what is happening inside the program. Structural testing is also applicable at all testing levels. Changes Testing is done to determine whether or not the program is functioning correctly after bugs have been fixed."
  },
  {
    "objectID": "Testing.html#test-plan",
    "href": "Testing.html#test-plan",
    "title": "7  Software Testing Documentation",
    "section": "7.2 Test Plan",
    "text": "7.2 Test Plan\n\n7.2.1 Test Stages\n\n\n7.2.2 Resources\n\n7.2.2.1 Human Resources\n\n\n7.2.2.2 Environment\n\n\n\n7.2.3 Test Milestones\n\n\n7.2.4 Deliverables"
  },
  {
    "objectID": "Testing.html#test-cases",
    "href": "Testing.html#test-cases",
    "title": "7  Software Testing Documentation",
    "section": "7.3 Test Cases",
    "text": "7.3 Test Cases"
  },
  {
    "objectID": "Testing.html#test-reports",
    "href": "Testing.html#test-reports",
    "title": "7  Software Testing Documentation",
    "section": "7.4 Test Reports",
    "text": "7.4 Test Reports"
  },
  {
    "objectID": "Release.html#deliverable-package",
    "href": "Release.html#deliverable-package",
    "title": "8  Release Package & User Guides",
    "section": "8.1 Deliverable Package",
    "text": "8.1 Deliverable Package\n\n8.1.1 Source Codes & Documents\n\n\n\n\n\n\n\n\n\n\nNo.\nItems\nSub-Items\nType\nVersion\n\n\n\n\nCode package\n\n\n\n\n\n\n1\nEduBlock\nEduBlock Client\nNew\n1.0\n\n\n2\nBlockchain Network\nBlockchain Chaincode\nNew\n1.0\n\n\n3\nOCR\nRecord Table Processor\nNew\n1.0\n\n\nDatabase\n\n\n\n\n\n\n1\nTables\naccounts.sql\nNew\n1.0\n\n\n\n\nclassrooms.sql\nNew\n1.0\n\n\n\n\nsubjects.sql\nNew\n1.0\n\n\nDocuments\n\n\n\n\n\n\n1\nRequirement\nSRS_v1.0.docx\nNew\n1.0\n\n\n2\nDeployment\nUserGuide_v1.0.docx\nNew\n1.0\n\n\n\n\n\n8.1.2 Known Issues, Limitations & Restrictions"
  },
  {
    "objectID": "Release.html#installation-guides",
    "href": "Release.html#installation-guides",
    "title": "8  Release Package & User Guides",
    "section": "8.2 Installation Guides",
    "text": "8.2 Installation Guides\n\n8.2.1 System Requirements\nOS: any\nCPU: at least 4 cores\nRAM: at least 4Gb\nNETWORK: required\nSOFTWARE: Docker\n\n\n8.2.2 Setup Files\n\nDockerfile.backend\nDockerfile.frontend\nDockerfile.ocr\n\n\n\n8.2.3 Installation Instruction"
  },
  {
    "objectID": "Release.html#user-manual",
    "href": "Release.html#user-manual",
    "title": "8  Release Package & User Guides",
    "section": "8.3 User Manual",
    "text": "8.3 User Manual\n\n8.3.1 Terms & Definitions\n\n\n\nNo.\nTerm\nDefinition\n\n\n\n\n01\nF.FT\nFeature\n\n\n02\nR.ADM\nAdmin\n\n\n03\nR.STF\nStaff\n\n\n04\nR.TCH\nTeacher\n\n\n05\nR.STD\nStudent\n\n\n06\nR.ANY\nAny role\n\n\n\n\n\n8.3.2 System Requirements\nOS: any\nCPU: any\nRAM: at least 1Gb\nNETWORK: required\n\n\n8.3.3 Application Usage\n\n8.3.3.1 Overview\n\n\n\n\n\n\n\n\n\nNo.\nFeature\nRole\nNote\n\n\n\n\n01\nCreate new account\nR.ADM\n\n\n\n02\nView account list\nR.ADM, R.STF\n\n\n\n03\nView profile\nR.ANY\nEach role have different behavior\n\n\n04\nUpdate profile\nR.ADM, R.STF\nEach role have different behavior\n\n\n05\nUpdate password\nR.ANY\nEach role have different behavior\n\n\n06\nCreate new classroom\nR.STF\n\n\n\n07\nView classroom list\nR.STF, R.TCH, R.STD\nEach role have different behavior\n\n\n08\nView classroom information\nR.STF, R.TCH, R.STD\n\n\n\n09\nView students of classroom\nR.STF, R.TCH, R.STD\n\n\n\n10\nView teachers of classroom\nR.STF, R.TCH, R.STD\n\n\n\n11\nUpdate classroom information\nR.STF\n\n\n\n12\nUpdate student in classroom\nR.STF\n\n\n\n13\nUpdate teacher in classroom\nR.STF\n\n\n\n14\nView update request list\nR.TCH\n\n\n\n15\nVerify update request\nR.TCH\n\n\n\n16\nRequest update record\nR.TCH, R.STD\n\n\n\n\n\n\n8.3.3.2 Feature 01: Create new account\nDescription:\n\nAdmin create account for other user usage\n\nDetails:\n\nR.ADM\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Click Create at the top left of the page to open a modal with form\nStep 3: Input user First name, Last name and select a role for user\nStep 4: (Optional) Click Add at the bottom left of the form to add more account and repeat from Step 1\nStep 5: Click Create at the bottom right of the form to confirm the account creation\n\n\n\n\n8.3.3.3 Feature 02: View account list\nDescription:\n\nAdmin, Staff view the account list to manage account information and find reference for other operations\n\nDetails:\n\nR.ADM\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: (Optional) Click Search to reveal filter options below\nStep 2.1: Select search field on the left\nStep 2.2: Input search text on the right\nStep 2.3: Click Search button at the right most to apply list filter\nStep 3: View list of account\nStep 4: (Optional) Click page number at the top right to view other accounts\n\n\n\n\n8.3.3.4 Feature 03: View profile\nDescription:\n\nAdmin, Staff view user profile\nUser view personal profile\n\nDetails:\n\nR.ANY (Personal)\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\n\nR.ADM, R.STF\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Look for the specific account row in table\nStep 3: Click Details in the Actions column to navigate to the profile page of that account\n\n\n\n\n8.3.3.5 Feature 04: Update profile\nDescription:\n\nAdmin, Staff update personal profile\nStaff update Teacher, Student profile\n\nDetails\n\nR.ADM, R.STF (Personal)\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\nStep 2: Click Update in the profile section to open a modal with form\nStep 3: Change the form data to desired value\nStep 4: Click Confirm to save the changes.\n\nR.STF\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Look for the specific account row in table\nStep 3: Click Update in the Actions column to open an update modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm to save the changes\n\n\n\n\n8.3.3.6 Feature 05: Update password\nDescription:\n\nAdmin update other user password\nUser self update password\n\nDetails\n\nR.ANY (Personal)\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\nStep 2: Click Update password at the top right of the page to open a modal with form\nStep 3: Input the new password\nStep 4: Click Confirm to save the new password\n\nR.ADM\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Look for the specific account row in table\nStep 3: Click Update password in the Actions column to open an update modal with form\nStep 4: Input the new password\nStep 5: Click Confirm to save the new password\n\n\n\n\n8.3.3.7 Feature 06: Create new classroom\nDescription:\n\nStaff Create new classroom in the system\n\nDetails\n\nR.STF\n\nStep 1: Click Classroom on the left navigation bar to navigate to classroom list page\nStep 2: Click Create at the top left of the page to open a modal with form\nStep 3: Change the form data to desired value\nStep 4: Click Confirm at the bottom right of the modal to save the created classroom\n\n\n\n\n8.3.3.8 Feature 07: View classroom list\nDescription:\n\nStaff view the list of all the classroom in the system\nTeacher view the list of all the classroom being taught by that teacher\nStudent view the list of all the classroom that student taking part in\n\nDetails\n\nR.STF\n\nStep 1: Click Classroom on the left navigation bar to navigate to classroom list page\n\nR.TCH, R.STD\n\nStep 1: The list of classroom is in the dashboard page\n\n\n\n\n8.3.3.9 Feature 08: View classroom information\nDescription:\n\nStaff view classroom information\nTeacher view information of the classroom being taught by that teacher\nStudent view information of the classroom that student taking part in\n\nDetails\n\nR.STF\n\nStep 1: Click Classroom on the left navigation bar to navigate to classroom list page\nStep 2: Look for the specific classroom row in table\nStep 3: Click Details in the Actions column to navigate to the classroom details page\n\nR.TCH, R.STD\n\nStep 1: Click Dashboard on the left navigation bar to navigate to classroom list page\nStep 2: Look for the specific classroom row in table\nStep 3: Click Details in the Actions column to navigate to the classroom information page\n\n\n\n\n8.3.3.10 Feature 09: View students of classroom\nDescription:\n\nStaff view all the student in a specific classroom\nTeacher view all the student in the classroom being taught by that teacher\nStudent view all the student in the classroom that student taking part in\n\nDetails\n\nR.STF, R.TCH, R.STD\n\nStep 1: Follow Feature 08 to navigate to the classroom information page\nStep 2: Click Student which is the center tab at the top of the page to navigate to student list of that classroom\n\n\n\n\n8.3.3.11 Feature 10: View teachers of classroom\nDescription:\n\nStaff view all the teacher in a specific classroom\nTeacher view all the teacher in the classroom being taught by that teacher\nStudent view all the teacher in the classroom that student taking part in\n\nDetails\n\nR.STF, R.TCH, R.STD\n\nStep 1: Follow Feature 08 to navigate to the classroom information page\nStep 2: Click Teacher which is right most tab at the top of the page to navigate to teacher list of that classroom\n\n\n\n\n8.3.3.12 Feature 11: Update classroom information\nDescription:\n\nStaff update a specific classroom information\n\nDetails\n\nR.STF\n\nStep 1: Follow Feature 08 to navigate to the classroom information page\nStep 2: Click Details which is right most tab at the top of the page to navigate to details page of that classroom\nStep 3: Click Update at the bottom of the page to open a modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm at the bottom of the modal to save changes\n\n\n\n\n8.3.3.13 Feature 12: Update student in classroom\nDescription:\n\nStaff change the student of a specific classroom\n\nDetails\n\nR.STF\n\nStep 1: Follow Feature 09 to navigate to the classroom student page\nStep 2: Look for a specific account row in the table (May skip to Step 4)\nStep 3: Click Remove in the Actions column to remove student from classroom\nStep 4: Click Add at the top left of the page to open a modal with form\nStep 5: Change the form data to desired value\nStep 6: Click Confirm at the bottom right of the modal to save changes\n\n\n\n\n8.3.3.14 Feature 13: Update teacher in classroom\nDescription:\n\nStaff change the teacher of a specific classroom\n\nDetails\n\nR.STF\n\nStep 1: Follow Feature 10 to navigate to the classroom teacher page\nStep 2: Look for a specific account row in the table (May skip to Step 4)\nStep 3: Click Remove in the Actions column to remove teacher from classroom\nStep 4: Click Add at the top left of the page to open a modal with form\nStep 5: Change the form data to desired value\nStep 6: Click Confirm at the bottom right of the modal to save changes\n\n\n\n\n8.3.3.15 Feature 14: View update request list\nDescription:\n\nTeacher view list of request for updating record value\n\nDetails\n\nR.TCH\n\nStep 1: Click Request on the left navigation bar to navigate to request list page\n\n\n\n\n8.3.3.16 Feature 15: Verify update request\nDescription:\n\nTeacher verify request waiting for verification\n\nDetails\n\nR.TCH\n\nStep 1: Follow Feature 14 to navigate to the request list page\nStep 2: Look for the specific request row in table\nStep 3: Click Approve or Reject to approve or reject the request\n\n\n\n\n8.3.3.17 Feature 16: Request update record\nDescription:\n\nTeacher or student of same classroom request updating record for that student\n\nDetails\n\nR.TCH\n\nStep 1: Follow Feature 09 to navigate to student profile page\nStep 2: Look for the record need update in the record table at the bottom of the page\nStep 3: Click Update in the Actions column to open a modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm to send the request\n\nR.STD\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\nStep 2: Look for the record need update in the record table at the bottom of the page\nStep 3: Click Update in the Actions column to open a modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm to send the request\n\n\n\n\n\n8.3.4 Troubleshooting"
  }
]