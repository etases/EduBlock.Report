[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EduBlock",
    "section": "",
    "text": "Acknowledgement\nThanks to the following people for their help and support:\n\nFPT Edu Experience Space for providing an opportunity for us to do a team building activity and to have a chance to learn basic Blockchain technology.\nQuách Luyl Đa, our mentor & supervisor, for his guidance and support. He encouraged us to do our best and gave us a lot of useful advice.\nFellow members at ETASES to work together, share knowledge and experience, and to learn from each other. They did their best to make this project more complete and better.\nYou, the reader, for your interest in our project.\n\nA digital version of this report can be found here: https://etases.github.io/EduBlock.Report/"
  },
  {
    "objectID": "Definition.html",
    "href": "Definition.html",
    "title": "Definition and Acronyms",
    "section": "",
    "text": "Acronym\nDefinition\n\n\n\n\nBR\nBusiness Rule\n\n\nBA\nBusiness Analysis\n\n\nSRS\nSoftware Requirement Specification\n\n\nUC\nUse Case\n\n\nUAT\nUser Acceptance Test\n\n\nAPI\nApplication Programming Interface\n\n\nGUI\nGraphical User Interface\n\n\nRS\nRequest Server\n\n\nCN\nChain Node\n\n\nOCR\nOptical Character Recognition\n\n\nPM\nProject Manager\n\n\nFabric\nHyperledger Fabric\n\n\nFE\nFeature\n\n\nLI\nLimitation\n\n\nSI\nSoftware Interface\n\n\nHI\nHardware Interface\n\n\nUI\nUser Interface\n\n\nCRUD\nCreate, Read, Update & Delete"
  },
  {
    "objectID": "Introduction.html#overview",
    "href": "Introduction.html#overview",
    "title": "1  Project Introduction",
    "section": "1.1 Overview",
    "text": "1.1 Overview\n\n1.1.1 Project Information\n\nProject name: BlockChain application in academic record management to support online University/College admissions\nProject code: EduBlock\nGroup name: ETASES\nSoftware type: Web app\n\n\n\n1.1.2 Project Team\n\n1.1.2.1 Supervisor\n\n\n\nFull Name\nEmail\nPhone Number\nTitle\n\n\n\n\nQuach Luyl Da\ndaql@fpt.edu.vn\n0976703075\nLecture\n\n\n\n\n\n1.1.2.2 Team Members\n\n\n\nFull Name\nEmail\nPhone Number\nTitle\n\n\n\n\nHuynh Quang Tien\nTienHQCE150130@fpt.edu.vn\n0976608340\nLeader\n\n\nLe Xuan Tu\nTuLXCE150344@fpt.edu.vn\n0939774512\nMember\n\n\nNguyen Dang Khoa\nKhoaNDCE140165@fpt.edu.vn\n0382554293\nMember\n\n\nCao Hoang Anh Uy\nUyCHACE150661@fpt.edu.vn\n0706456981\nMember\n\n\nNguyen Minh Khoi\nKhoiNMCE150103@fpt.edu.vn\n0338616352\nMember"
  },
  {
    "objectID": "Introduction.html#background",
    "href": "Introduction.html#background",
    "title": "1  Project Introduction",
    "section": "1.2 Background",
    "text": "1.2 Background\nThe number of academic institutions still use manual processes to store and transfer academic records like transcripts and certifications between institutions and to potential organizations, despite the fact that many large institutions are now adopting the modern practice of maintaining electronic academic records. The process can take up to several days, just for students who want to review their own transcripts, so a common transfer for a student can take anywhere from a few weeks to a month. Due to the time required to process and submit appeal requests using the widely used paper method, more serious errors could happen, and the process could take several months. In addition to the significant wait time and the possibility of physical damage or loss of records during storage and transportation, there is also the risk of credential tampering by fraudulent parties. The cost of processing time, manual work effort, postage, and transit fees, as well as the storage and shipping of physical records, are also very expensive.\nThe emerging solutions are primarily based on email-based solutions or the transfer of PDF files while remaining limited by nationality, privacy and security barriers. Although the popularity of cryptocurrencies and NFTs has led to the implementation of Blockchain as a host of applications in the financial sector, the field is more diverse in both technical and application areas [1]. As distributed applications are increasingly applied in various fields such as data storage (including handling medical records and healthcare [2,5]), Cloud and Grid Computing [3], e-vote [4], Service for IoT [6], Banking system[7] and foremost is the field of Education. Academic institutions can benefit from blockchain technology to provide a decentralized and immutable ledger to confirm the integrity of academic records [10]. Then, solutions for storing and anti-fraud of online electronic degrees have also been conceived to bring the initial benefits of applying Blockchain technology [8][9]. While these solutions provide a more modern approach to the storage and the transfer of academic records, there are still limitations in terms of widespread adoption, auditability, and scalability. A successful solution for storing and exchanging electronic school records will include Security and Privacy, Scalability and at the same time benefit from the advantages of blockchain technology as Distributed, Transparency further described.\nThe goal of our proposed system is to address the limitations of existing solutions by utilizing Blockchain technology to provide a secure, verifiable, and tamper-proof method of storing, accessing, managing, and exchanging electronic school records between institutions."
  },
  {
    "objectID": "Introduction.html#existing-systems",
    "href": "Introduction.html#existing-systems",
    "title": "1  Project Introduction",
    "section": "1.3 Existing Systems",
    "text": "1.3 Existing Systems\n\n1.3.1 Blockcerts\nBlockcerts is an open standard platform for developing, issuing, and verifying blockchain-backed certificates that Learning Machine and the MIT Media Lab jointly developed. The business can assess the validity of documents and identify fraudulent information by generating records like academic transcripts and certificates on a blockchain. Grades, transcripts, and even degrees can all be kept on a Blockcerts blockchain enabling immutable access to previous academic performance.\n\n\n1.3.2 APPII\nThe blockchain, smart contracts, and machine learning technologies used by APPII are used to validate the academic credentials of potential students and lecturers. Users set up a profile and complete their academic CV, which includes their academic background and transcripts. The user’s background is subsequently verified by APPII using blockchain, and their data is then locked into its blockchain.\n\n\n1.3.3 Parchment\nStudents, academic institutions, and employers can use Parchment’s digital certificate services. Higher education institutions use the platform to evaluate academic excellence, process applications, and generate immutable degrees, while K-12 educators use the blockchain of the company to upload any significant developmental progress. Additionally, all educational information is permanently accessible to students, and they may readily tell prospective employers about their academic accomplishments.\n\n\n1.3.4 Conclusion\nFrom all systems mentioned above, in this design we presented a solution for managing and storing electronic academic records as a replacement for the traditional academic record based on distributed storage technology used by Blockchain, where the data is stored in a block and the blocks are connected on a chain by hashing. Our network enables us to manage data in the network using transactions via smart contracts. From there next, we show how to set up a multi-tier network and processes. Our network enables us to decentralize organizations and system users through arranging chain nodes, verifying transactions with smart contracts, archiving modification history and restoring data of a node using data from other nodes.\nFrom this design, it can be concluded and proposed to organize a Permissioned Blockchain network with a multi-tier design. The main advantage of applying Permissioned Blockchain technology is its resistance to many threats and cyber attacks, rely on the hashing mechanism and the nodes on the Blockchain can prevent data breaches. And moreover, it offers a host of unique features such as improved reliability, better fault tolerance, faster and more efficient operation, and scalability.\nAnd thus, the management of documents for the field of education has the potential to be significantly impacted by the integration of Blockchain, the hyperledger framework, and smart contract technologies across academic records."
  },
  {
    "objectID": "Introduction.html#business-opportunity",
    "href": "Introduction.html#business-opportunity",
    "title": "1  Project Introduction",
    "section": "1.4 Business Opportunity",
    "text": "1.4 Business Opportunity\nAlthough many high schools in Vietnam still keep paper records for post-graduation and enrolment in college or university, many now employ an online system to track students’ academic progress and inform parents of any latest outcomes. Because they must do it for both the paper records and the internet system, teachers find it challenging to update the information on their students. There is also a minimum level of transparency for students who wish to verify their information at any time because the internet system is centralized and only administrators and teachers have access to it. As a result, a system is required to help teachers and students manage student records in an easier, quicker, and more effective manner."
  },
  {
    "objectID": "Introduction.html#software-product-vision",
    "href": "Introduction.html#software-product-vision",
    "title": "1  Project Introduction",
    "section": "1.5 Software Product Vision",
    "text": "1.5 Software Product Vision\nWith the use of this system, students may simply keep track of changes to their grades in their academic records, reducing teacher grade entry errors. In order to gain rapid admission to graduate programs and colleges, students can also more conveniently retrieve their transcripts. High security and restrictions on data editing also assist in limiting the issue of phony points that are inaccurate representations of reality. Additionally, it eliminates challenges with entering grades into instructors’ school records because doing so will be quicker and easier with the aid of the system."
  },
  {
    "objectID": "Introduction.html#project-scope-limitations",
    "href": "Introduction.html#project-scope-limitations",
    "title": "1  Project Introduction",
    "section": "1.6 Project Scope & Limitations",
    "text": "1.6 Project Scope & Limitations\nA record management system will always be the best in terms of security and purity because it must, of course, assure data security. When interacting with and storing the data, always keep it intact and unaltered. Additionally, it must be user-friendly, with an interface that is clear and unambiguous and avoids misinterpretations of the translation or the information on the screen. Without the responsible user’s consent, data editing procedures cannot be carried out at will.\n\n1.6.1 Major Features\nFE-01: Using the blockchain platform, store data.\nFE-02: Transcripts can be updated by converting photos to alphanumeric data.\nFE-03: May replace paper school records entirely (electronic school records but have the nature of paper school records).\nFE-04: Enhancing the effort teachers put into entering grades.\nFE-05: Utilization dependability for admissions parties.\n\n\n1.6.2 Limitations & Exclusions\nLI-1: It is impossible to synchronize student counts between institutions due to the dispersed nature of the data.\nLI-2: The only time to use the system is at the end of the year because it only saves the semester’s overall grade (can be expanded later)\nLI-3: There is no option to switch schools (due to not processing student codes synchronously)"
  },
  {
    "objectID": "Management.html#overview",
    "href": "Management.html#overview",
    "title": "2  Project Management Plan",
    "section": "2.1 Overview",
    "text": "2.1 Overview\n\n2.1.1 WBS & Estimation\n\n\n\nID\nWBS Item\nComplexity\nEstimated Effort (man-days)\n\n\n\n\n1\nAnalysis\n\n20\n\n\n1.1\nSRS\nMedium\n5\n\n\n1.2\nUML\nSimple\n5\n\n\n1.3\nTechnology Research\nMedium\n10\n\n\n2\nDesign\n\n20\n\n\n2.1\nArchitecture Design\nMedium\n5\n\n\n2.2\nDatabase Design\nMedium\n5\n\n\n2.3\nDetailed Design\nMedium\n10\n\n\n3\nDevelopment\n\n80\n\n\n3.1\nBackend\nMedium\n30\n\n\n3.2\nFrontend\nMedium\n30\n\n\n3.3\nBlockchain\nComplex\n10\n\n\n3.4\nOCR\nComplex\n10\n\n\n4\nTesting\n\n15\n\n\n4.1\nUnit Testing\nSimple\n3\n\n\n4.2\nIntegration Testing\nMedium\n5\n\n\n4.3\nSystem Testing\nMedium\n7\n\n\n5\nDocumentation\n\n20\n\n\n5.1\nFinal Report\nMedium\n10\n\n\n5.2\nFinal Product\nMedium\n10\n\n\n#\nTotal\n\n155\n\n\n\n\n\n2.1.2 Project Objectives\n\nTimeliness: 70%\nAllocated Effort (man-days): 90 days\nQuality Coverage:\n\nReviewing: 100%\nUnit Test: 95%\nIntegration Test: 95%\nSystem Test: 98%\nUser Acceptance Test: 80%\n\n\n\n\n2.1.3 Project Risks\n\n\n\n\n\n\n\n\n\nRisk\nImpact\nProbability\nMitigation\n\n\n\n\nThe team members are not familiar with the technologies used in the project\nHigh\nHigh\nThe team members will be trained before the project starts\n\n\nThe team members can not work together\nHigh\nMedium\nPrepare a team building activity before the project starts\n\n\nThere is not enough time to research the technologies used in the project\nHigh\nLow\nFind a mentor to help the team members / Find a workaround or similar technology that can be used in the project"
  },
  {
    "objectID": "Management.html#management-approach",
    "href": "Management.html#management-approach",
    "title": "2  Project Management Plan",
    "section": "2.2 Management Approach",
    "text": "2.2 Management Approach\n\n2.2.1 Project Process\n\n\n\n\n\n(a) Agile\n\n\n\n\n\n(b) Scrum\n\n\nFigure 2.1: Software Development Process Model\n\n\nSince parts of the requirements are not clear, we will use a process model of the Agile family called Scrum. Using this model, we can understand requirements, adapt changes quickly and deliver target products in a short time to test & review them for next iterations. The project will be divided into 4 iterations (sprints). Each sprint will be a month long and include 2 phases: planning and development. The planning phase will be used to estimate tasks from the product backlog, create a sprint backlog and assign tasks to the team members to develop in the development phase. At the end of the sprint, the team will review the sprint, discuss the problems and changes during the sprint and plan for the next sprint.\n\n\n2.2.2 Quality Management\n\nReviewing: There will be a meeting every week for the team and the supervisor to review the status of the tasks in the current sprint. The team will show the progress of the tasks and discuss the problems and changes during the sprint. The supervisor will take notes and give advices to the team.\nDefect Prevention: Each change of the code should be reviewed by the code master or the team leader before applying to the main project. They will check for bugs, code smells, anti-patterns and other problems.\nUnit Testing: Each module of the system should be tested before applying to the main project. The team can test the module by themselves or use a testing framework / software to test the module.\nIntegration Testing: The team will test the system after each sprint to make sure that the system is working properly. There will be an automatic testing software that includes test scenarios for the system.\nSystem Testing: The team will test the completed system based on the requirements and the test scenarios. The team can test the system by themselves or use a testing framework / software to test the system.\n\n\n\n2.2.3 Training Plan\n\n\n\n\n\n\n\n\n\nArea\nParticipants\nWhen, Duration\nWaiver Criteria\n\n\n\n\nBlockchain\nProject Team\n20/07/2022, 2 weeks\nMandatory\n\n\nHyperledger Fabric\nProject Team\n01/10/2022, 2 weeks\nMandatory for Backend Team\n\n\nJava, Javalin\nProject Team\n01/09/2022, 1 weeks\nMandatory"
  },
  {
    "objectID": "Management.html#master-schedule",
    "href": "Management.html#master-schedule",
    "title": "2  Project Management Plan",
    "section": "2.3 Master Schedule",
    "text": "2.3 Master Schedule\n\n\n\nDeliverable\nDue\nDeliverable Scope\n\n\n\n\nProject Plan\n05/09/2022\n\n\n\nSRS\n15/09/2022\n\n\n\nDesign 1\n15/09/2022\nArchitecture Design, Database\n\n\nDesign 2\n30/09/2022\nDetailed Design\n\n\nBackend\n30/09/2022\nCode, Test, Deployment\n\n\nFrontend\n30/11/2022\nCode, Test, Deployment\n\n\nExtra Services\n30/11/2022\nBlockchain, OCR\n\n\nFinal Report\n10/12/2022\n\n\n\nFinal Product\n15/12/2022"
  },
  {
    "objectID": "Management.html#project-organization",
    "href": "Management.html#project-organization",
    "title": "2  Project Management Plan",
    "section": "2.4 Project Organization",
    "text": "2.4 Project Organization\n\n2.4.1 Team Structure\n\n\n\nFigure 2.2: Team Structure\n\n\n\n\n2.4.2 Roles\n\n\n\n\n\n\n\nRole\nResponsibilities\n\n\n\n\nProject Manager\nSupervise the project, Manage the team, Manage the schedule, Manage deliverables\n\n\nAnalysis Leader\nAnalyze the requirements, Create SRS, Manage the analysis team\n\n\nAnalysis Member\nAnalyze the requirements, Create SRS\n\n\nDesign Leader\nDesign the system, Create system design document, Manage the design team\n\n\nDesign Member\nDesign the system, Create system design document\n\n\nBackend Leader\nDevelop the backend, Manage the backend team\n\n\nBackend Member\nDevelop the backend\n\n\nFrontend Leader\nDevelop the frontend, Manage the frontend team\n\n\nFrontend Member\nDevelop the frontend\n\n\nTest Leader\nTest the system, Create test report, Manage the test team\n\n\nTest Member\nTest the system, Create test report"
  },
  {
    "objectID": "Management.html#project-communication",
    "href": "Management.html#project-communication",
    "title": "2  Project Management Plan",
    "section": "2.5 Project Communication",
    "text": "2.5 Project Communication\n\n2.5.1 Communication Plan\n\n\n\n\n\n\n\n\n\n\nItem\nTarget\nPurpose\nWhen\nType\n\n\n\n\nDiscord\nProject Team\nReview meeting & Status report\nMonday, Friday\nVoice, Remote\n\n\nGoogle Meeting\nProject Team & Supervisor\nReview meeting, Sprint revision & Closeup\nWednesday\nVoice, Remote\n\n\nMessenger\nProject Team & Supervisor\nMeeting planning, Q&A & Status report\nEveryday\nText, Remote\n\n\nFU Library\nProject Team\nPair programming & Code review\nPlanned\nOffline\n\n\n\n\n\n2.5.2 External Interfaces\n\n\n\n\n\n\n\n\n\nFunction\nContact Person\nContact Address\nResponsibility\n\n\n\n\nSupervisor\nQuach Luyl Da\ndaql@fpt.edu.vn\nReview deliverables, Provide document template, Check project progress, Give advices to project team"
  },
  {
    "objectID": "Management.html#configuration-management",
    "href": "Management.html#configuration-management",
    "title": "2  Project Management Plan",
    "section": "2.6 Configuration Management",
    "text": "2.6 Configuration Management\n\n2.6.1 Tools & Infrastructures\n\n2.6.1.1 Common\n\n\n\nType\nTool\n\n\n\n\nVersion Control\nGit, GitHub\n\n\nUML\nPlantUML, Graphviz\n\n\nDeployment\nDocker\n\n\nProject Management\nQuarto, GitHub Projects\n\n\n\n\n\n\n2.6.2 Backend\n\n\n\n\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nJava\n\n\nLibrary\nJavalin, Fabric SDKs, HSCore, Guava, Genson, EvalEx, JWT\n\n\nCompiler\nJDK, Lombok\n\n\nUI\nTinyLog, JLine, Fabric CLI\n\n\nDBMS\nH2, Hibernate, Minifabric\n\n\nIDE / Editor\nIntelliJ IDEA, VSCode\n\n\n\n\n\n2.6.3 Frontend\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nTypeScript\n\n\nLibrary\nReact\n\n\nCompiler\nNode\n\n\nUI\nReact\n\n\nIDE / Editor\nVSCode\n\n\n\n\n\n2.6.4 Document Management\nWe use Quarto to build documents from Markdown files and use GitHub to manage the files and their changes. A participant will create a new branch to edit the files, create pull requests and wait for the project manager to review the changes and merge to the main branch. Then, it’ll be built in three outputs: a website using GitHub Pages for visualization, A PDF document & A MS-Word document.\n\n\n2.6.5 Source Code Management\nWe manage the source code by using GitHub. Endpoints of the project will be upload into separated repositories. Once the code is changed, the participant will create a new branch, create a relevant pull request, and wait for code owners to review and merge to the main branch."
  },
  {
    "objectID": "Requirement.html#overall-description",
    "href": "Requirement.html#overall-description",
    "title": "3  Software Requirement Specification",
    "section": "3.1 Overall Description",
    "text": "3.1 Overall Description\n\n3.1.1 Product Overview\nThis is the software requirement specification for the project “EduBlock”. EduBlock is an web-application that will help the school to manage their student’s records, more specifically, the students and teachers can reduce paper’s work to manage their records. Lately, the school has been using paper to manage their student’s record, which is not efficient and not environmentally. EduBlock will help the school to manage their student’s records in a more efficient way, although there are some other third-party apps that can help schools to manage student’s records nowadays, but it is not really efficient and safe. Our application uses blockchain technology to make sure the data is safe and secure. Every step of the process that needs to be worked with records will be tracked by EduBlock, so the school can easily track the data changes and make sure the data is not being tampered.\n\n\n3.1.2 Business Rules\n\n\n\n\n\n\n\nID\nRules Description\n\n\n\n\nBR-1\nThe application will be used by the students, teachers, staff, admin and third-party.\n\n\nBR-2\nOnly Staff have permission to manage classroom including create new class, edit class, assign or remove teacher from the class, assign student to class, remove student from class, edit student information.\n\n\nBR-3\nOnly Admin have permission to create new account(s).\n\n\nBR-4\nOnly Teacher who teach the subject can edit the grade of the student. Homeroom teacher can request subject teacher to change grade.\n\n\nBR-5\nStudent can only view their class, profile and academic record. Student can only request to re-check their record.\n\n\nBR-6\nIn Blockchain, the data is immutable, so the data cannot be changed once it is created. Because of this, the data can just be appended, can’t be edited or deleted, this will help ensure the student’s record is safe and secure.\n\n\nBR-7\nA node if wants to join the network, it must have other nodes permission or the node must be approved by the admin.\n\n\nBR-8\nIn a private blockchain, every node knows each other, which node own the data. Data is shared between nodes so the data can be recovered if one node is down.\n\n\nBR-9\nOther nodes can only read the data, they cannot change the data.\n\n\nBR-10\nThird-party’s member can only view the academic record and statistics of the students by using verified keys."
  },
  {
    "objectID": "Requirement.html#user-requirements",
    "href": "Requirement.html#user-requirements",
    "title": "3  Software Requirement Specification",
    "section": "3.2 User Requirements",
    "text": "3.2 User Requirements\n\nThe Academic record management web-app has five active actors: Student, Teacher, Staff, Administrator and Third-party’s member (i.e., parents, etc.).\nAdmin can create accounts for each role such as staff, student, teacher.\nStudents can view their academic record.\nTeachers can manage their class and their student’s academic record.\nStaff can manage the classroom and view academic records of students, assign or delete teachers from the class, assign students to class, create new classes and edit student information.\nThird-party’s member can view the academic record and statistic of the students by using verified key.\n\n\n3.2.1 System Actors\n\n\n\n\n\n\n\n\nID\nActor\nDescription\n\n\n\n\n1\nADMIN\nAdmin is the person who has the highest authority in the system. Admin can manage the account of the other actors.\n\n\n2\nSTAFF\nStaff is the person who has the authority to manage the classroom. Staff can assign or remove teachers from the class, assign students to class and remove students from class.\n\n\n3\nTEACHER\nTeacher is the person who has the authority to manage their class. Teachers can view their student’s academic record; subject teachers can send requests to edit student grade.\n\n\n4\nSTUDENT\nStudent is the person who has the authority to view their academic record.\n\n\n5\nTHIRD PARTY\nThird party is the person who has the authority to view the academic record and statistics of the students by using verified a key.\n\n\n\n\n\n3.2.2 Use cases\n\n3.2.2.1 Diagrams\n\n\n\nUse case diagram for Admin\n\n\n\n\n\nUse case diagram for Staff\n\n\n\n\n\nUse case diagram for Teacher\n\n\n\n\n\nUse case diagram for Student\n\n\n\n\n\nUse case diagram for Third Party\n\n\n\n\n3.2.2.2 Details\nUse Case List"
  },
  {
    "objectID": "Requirement.html#functional-requirements",
    "href": "Requirement.html#functional-requirements",
    "title": "3  Software Requirement Specification",
    "section": "3.3 Functional Requirements",
    "text": "3.3 Functional Requirements\n\n3.3.1 System Functional Overview\nThe system is designed to provide a platform for school to manage their student’s record, information with high security, fast and private.\n\n\n3.3.2 Features\n\n3.3.2.1 Account Features\n\nUser Login\n\nUse cases: UC-1, UC-13, UC-32, UC-47\nDescription: The system shall allow user to login to EduBlock using their account.\n\nCreate Account\n\nUse cases: UC-4\nDescription: System shall allow admin to create account for staff, teacher, student, parent.\n\nView list of all accounts\n\nUse cases: UC-2, UC-14\nDescription: System shall allow admin and staff to view list of accounts.\n\nView account’s detail\n\nUse cases: UC-3, UC-15, UC-23, UC-34, UC-40, UC-51\nDescription: The system shall allow user to view account’s detail.\n\nUpdate profile\n\nUse cases: UC-6, UC-24, UC-29\nDescription: The system shall allow only admin and staff to update account’s profile.\n\nUpdate password\n\nUse cases: UC-7, UC-29, UC-34\nDescription: The system shall allow user to reset their password.\n\n\n\n\n3.3.2.2 Class Features\n\nView classroom list\n\nUse cases: UC-10, UC-17, UC-36, UC-48\nDescription: The system shall allow user to view list of classes filter by their role.\n\nView classroom detail\n\nUse cases: UC-11, UC-19, UC-37, UC-49\nDescription: The system shall allow user to view class detail.\n\nView student in class\n\nUse cases: UC-11, UC-21, UC-38\nDescription: The system shall allow user who have the right to view list of students in class.\n\nView teacher in class\n\nUse cases: UC-11, UC-26, UC-39, UC-50\nDescription: The system shall allow user who have the right to view list of teachers in class.\n\nCreate classroom\n\nUse cases: UC-18\nDescription: The system shall allow staff to create new class\n\nUpdate classroom detail\n\nUse cases: UC-20\nDescription: The system shall allow only staff to update class detail.\n\nAdd student to class\n\nUse cases: UC-22\nDescription: The system shall allow only staff to add student to class.\n\nAssign teacher to class\n\nUse cases: UC-27\nDescription: The system shall allow only staff to assign teacher to class.\n\nRemove student from class\n\nUse cases: UC-25\nDescription: The system shall allow only staff to remove student from class.\n\nRemove teacher from class\n\nUse cases: UC-28\nDescription: The system shall allow only staff to remove teacher from class. #### Record Features\n\nView student’s record (view, print)\n\nUse cases: UC-23, UC-30, UC-40, UC-41, UC-51, UC-52, UC-55\nDescription: The system shall allow user to view student’s record and print the record.\n\nSend request to change or re-check student’s record\n\nUse cases: UC-46, UC-53\nDescription: The system shall allow student and homeroom teacher to send request to re-check or change their record.\n\nView list of pending change requests (view, approve, reject)\n\nUse cases: UC-44\nDescription: The system shall allow homeroom teacher to view list of pending change requests and approve or reject the request.\n\nView history of record’s changes\n\nUse cases: UC-45, UC-56\nDescription: The system shall allow user to view history of record’s changes.\n\nSubject teacher changes their subject score\n\nUse cases: UC-42\nDescription: The system shall allow subject teacher to change their subject score on student’s record.\n\n\n\n\n3.3.2.3 Student Key Features\n\nStudent create verified key\n\nUse cases: UC-51\nDescription: The system shall allow student to create verified key for their parents to use it to view their academic profile and records.\n\nThird party’s member view student’s academic profile and records\n\nUse cases: UC-57\nDescription: The system shall allow third party’s member to view student’s academic profile and records by using verified key given by the student.\n\nThird party’s member view statistics of a grade in a year\n\nUse cases: UC-58\nDescription: The system shall allow third party’s member to view statistics of a grade in a year by using verified statistic key given by admin or staff."
  },
  {
    "objectID": "Requirement.html#non-functional-requirements",
    "href": "Requirement.html#non-functional-requirements",
    "title": "3  Software Requirement Specification",
    "section": "3.4 Non-Functional Requirements",
    "text": "3.4 Non-Functional Requirements\n\n3.4.1 External Interfaces\n\n3.4.1.1 User Interfaces\n\nUI-1: The system shall provide a user interface for admin manage all accounts.\nUI-2: The system shall provide a user interface for staff to manage classes.\nUI-3: The system shall provide a user interface for teacher to view classes and manage students, student’s records.\nUI-4: The system shall provide a user interface for teacher to view list of requests to change student’s records.\nUI-5: The system shall provide a user interface for student to view classes and view their records.\nUI-6: The system shall provide a user interface for parent to view their children’s records.\nUI-7: The system shall provide a user interface for student to generate private key for their parents to view their records.\nUI-8: The system shall permit complete access to the system via a web browser.\nUI-9: The web-application shall permit complete navigation.\nUI-10: The web-application shall permit complete all functions.\n\n\n\n3.4.1.2 Hardware Interfaces\n\nHI-1: The web-app shall be able to run on any device that can run a web browser.\nHI-2: Graphic card is required to upload student’s academic record using image file.\n\n\n\n3.4.1.3 Software Interfaces\n\nSI-1: Hyperledger Fabric network.\n\nSI-1.1: The system shall initialize decentralized network using Mini-fabric smoothly.\nSI-1.2: The network shall install chaincode in all peers smoothly.\n\nSI-2: EduBlock client\nThe request server shall communicate with user interface through API to perform following operations:\n\nSI-2.1: The system shall allow user to login.\nSI-2.2: The system shall allow user to view their profile.\nSI-2.3: The system shall allow user to reset their password.\nSI-2.4: The system shall allow Admin to perform CRUD operations on account.\nSI-2.5: The system shall allow Staff to perform CRU operations on classes.\nSI-2.6: Teacher to send request to change student’s academic record.\nSI-2.7: Teacher to approve or reject request to change student’s academic record.\nSI-2.8: Student to send request to re-check student’s academic record.\nSI-2.9: Student to upload student’s academic record.\n\n\n\n\n\n3.4.2 Quality Attributes\nOur application ensures the following quality attributes:\n\nUsability:\n\nThe application is easy to use and understand.\nThe application is designed to be intuitive.\nThe application is designed to be used by admin, staff, teacher, student, and third-party’s member.\n\nReliability:\n\nThe application is designed to be reliable.\nThe application is designed to be used with blockchain technology to ensure data integrity.\n\nPerformance: The application is designed to be fast and responsive.\nSecurity: The application is designed to be secure. The application is designed to be used with blockchain technology to ensure data integrity.\nMaintainability: The application is designed to be easy to maintain, update, and extend.\nPortability: The application is designed to be portable.\nScalability: The application is designed to be scalable and can be extended to support more users and more features.\nInteroperability: The application is designed to be interoperable with other applications.\nReusability: The application is designed to be reusable.\nTestability: The application is designed to be easy to test."
  },
  {
    "objectID": "Design.html#overall-description",
    "href": "Design.html#overall-description",
    "title": "4  Software Design Description",
    "section": "4.1 Overall Description",
    "text": "4.1 Overall Description\n\n4.1.1 Assumptions\n\nThe target platform is a Docker-compatible operating system (Preferably Linux).\nThe target web browser is Google Chrome.\nAll products are run and operated in the same machine (Monolithic architecture).\nOnly administrators can access the running system. Other users can only access the system through the frontend server.\nThe blockchain is a private blockchain.\nThe blockchain is an optional feature that can be turned on or off.\nThe database is a H2 database.\nThe mode of the database can be in-memory (for testing), file or remote (for production).\n\n\n\n4.1.2 Design Constraints\n\nThe backend system is a REST API server.\nThe backend system is a Java application.\nThe blockchain is a Hyperledger Fabric blockchain.\nThere should be an option to turn on or off the blockchain. If the blockchain is turned off, the backend system should still work as a normal REST API server with a local database.\n\n\n\n4.1.3 Technology Suggestion\n\nThe endpoints of the backend system can be exposed so that a node browser can be developed to search & access the endpoints and get the necessary information."
  },
  {
    "objectID": "Design.html#system-architecture-design",
    "href": "Design.html#system-architecture-design",
    "title": "4  Software Design Description",
    "section": "4.2 System Architecture Design",
    "text": "4.2 System Architecture Design\n\n4.2.1 Overall Architecture\n\n\n\nFigure 4.1: Overall Architecture\n\n\n\n\n4.2.2 System Architecture\n\n\n\nFigure 4.2: System Architecture\n\n\n\n\n4.2.3 Package Diagram\n\n\n\nFigure 4.3: Package Diagram of Request Server\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\nroot\nMain classes\n\n\napi\nThe abstract classes & interfaces\n\n\nentity\nThe entities of the database\n\n\nhandler\nThe handlers of the endpoints of the REST API server\n\n\ninternal\nInternal classes used by other packages\n\n\ninternal/student\nThe instances of the Student Updater\n\n\nmodel\nThe input / output objects\n\n\nmodel/input\nThe input objects for the handlers\n\n\nmodel/output\nThe output objects returned from the handlers\n\n\nmodel/fabric\nThe models used internally by the student updater"
  },
  {
    "objectID": "Design.html#system-detailed-design",
    "href": "Design.html#system-detailed-design",
    "title": "4  Software Design Description",
    "section": "4.3 System Detailed Design",
    "text": "4.3 System Detailed Design\n\n4.3.1 Class Specification\n\n\n\nFigure 4.4: Class Diagram of the Request Server\n\n\n\n4.3.1.1 Account\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\nusername\nString\nThe username\n\n\nhashedPassword\nString\nThe hashed password\n\n\nsalt\nString\nThe salt of the password\n\n\nrole\nString\nThe role of the account\n\n\ncreatedAt\nDate\nThe date when the account was created\n\n\nclassrooms\nList ClassTeacher\nThe list of references to the classrooms that the account participates if its role is Teacher\n\n\nrecordEntries\nList RecordEntry\nThe list of record entries related to the subjects that the account is teaching if its role is Teacher\n\n\nrequestedRecordEntries\nList RecordEntry\nThe list of verified record entries that the account requested to changes\n\n\napprovedRecordEntries\nList RecordEntry\nThe list of verified record entries that the account accepted\n\n\npendingRecordEntries\nList PendingRecordEntry\nThe list of pending record entries related to the subjects that the account is teaching if its role is Teacher\n\n\nrequestedPendingRecordEntries\nList PendingRecordEntry\nThe list of pending record entries that the account requested to changes\n\n\nhomeClassrooms\nList Classroom\nThe list of classrooms the the account is a homeroom teacher at\n\n\n\n\n\n4.3.1.2 Profile\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\naccount\nAccount\nThe reference to the Account object\n\n\nfirstName\nString\nThe first name\n\n\nlastName\nString\nThe last name\n\n\nmale\nboolean\nIs the person male? false if she is a female\n\n\navatar\nString\nThe link to the avatar image\n\n\nbirthDate\nDate\nThe date of the birthday\n\n\naddress\nString\nThe address\n\n\nphone\nString\nThe phone number\n\n\nemail\nString\nThe email\n\n\nupdated\nboolean\nThe flag indicates that the profile requires synchronization with the Chain Node\n\n\n\n\n\n4.3.1.3 Student\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\naccount\nAccount\nThe reference to the Account object\n\n\nethnic\nString\nThe ethnic of the student\n\n\nfatherName\nString\nThe name of the father of the student\n\n\nfatherJob\nString\nThe job of the father of the student\n\n\nmotherName\nString\nThe name of the mother of the student\n\n\nmotherJob\nString\nThe job of the mother of the student\n\n\nguardianName\nString\nThe name of the guardian of the student\n\n\nguardianJob\nString\nThe job of the guardian of the student\n\n\nhomeTown\nString\nThe home town of the student\n\n\nclassrooms\nList ClassStudent\nThe list of references to the classrooms that the student participates\n\n\nrecords\nList Record\nThe list of records related to the classrooms that the student participates\n\n\nupdaterKey\nList UpdaterKey\nThe list of updater keys of the student. Used to allow outsiders to get information of the student.\n\n\n\n\n\n4.3.1.4 Classroom\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe classroom id\n\n\nname\nString\nThe name of the classroom\n\n\ngrade\nint\nThe grade of the classroom\n\n\nyear\nint\nThe year of the classroom\n\n\nhomeroomTeacher\nAccount\nThe reference to the homeroom teacher of the classroom\n\n\nstudents\nList ClassStudent\nThe list of references to the students that participate in the classroom\n\n\nteachers\nList ClassTeacher\nThe list of references to the teachers that participate in the classroom\n\n\nrecords\nList Record\nThe list of records related to the classroom\n\n\n\n\n\n4.3.1.5 ClassStudent\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe id of the reference\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nstudent\nStudent\nThe reference to the student\n\n\n\n\n\n4.3.1.6 ClassTeacher\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe id of the reference\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nteacher\nAccount\nThe reference to the teacher\n\n\nsubjectId\nlong\nThe id of the subject that the teacher teaches\n\n\n\n\n\n4.3.1.7 Record\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe record id\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nstudent\nStudent\nThe reference to the student\n\n\nrecordEntry\nList RecordEntry\nThe list of verified record entries related to the record\n\n\npendingRecordEntry\nList PendingRecordEntry\nThe list of pending record entries related to the record\n\n\n\n\n\n4.3.1.8 RecordEntry\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe record entry id\n\n\nsubjectId\nlong\nThe id of the subject that the record entry is related to\n\n\nfirstHalfScore\nint\nThe score of the first semester of the subject\n\n\nsecondHalfScore\nint\nThe score of the second semester of the subject\n\n\nfinalScore\nint\nThe final score of the subject\n\n\nrequestDate\nDate\nThe date when the record entry was requested\n\n\napprovalDate\nDate\nThe date when the record entry was approved\n\n\nupdateComplete\nboolean\nThe flag indicates that the record entry was updated to the Chain Node\n\n\nteacher\nAccount\nThe reference to the teacher that teaches the subject\n\n\nrequester\nAccount\nThe reference to the account that requested the record entry\n\n\napprover\nAccount\nThe reference to the account that approved the record entry\n\n\nrecord\nRecord\nThe reference to the record that the record entry is related to\n\n\n\n\n\n4.3.1.9 PendingRecordEntry\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe pending record entry id\n\n\nsubjectId\nlong\nThe id of the subject that the pending record entry is related to\n\n\nfirstHalfScore\nint\nThe score of the first semester of the subject\n\n\nsecondHalfScore\nint\nThe score of the second semester of the subject\n\n\nfinalScore\nint\nThe final score of the subject\n\n\nrequestDate\nDate\nThe date when the pending record entry was requested\n\n\nteacher\nAccount\nThe reference to the teacher that teaches the subject\n\n\nrequester\nAccount\nThe reference to the account that requested the pending record entry\n\n\nrecord\nRecord\nThe reference to the record that the pending record entry is related to\n\n\n\n\n\n4.3.1.10 UpdaterKey\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nString\nThe unique key\n\n\nstudent\nStudent\nThe reference to the student that the key is related to\n\n\n\n\n\n4.3.1.11 StatisticKey\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nString\nThe unique key\n\n\nyear\nint\nThe year that the key is referred to\n\n\ngrade\nint\nThe grade that the key is referred to\n\n\n\n\n\n\n4.3.2 Sequence Diagram\n\n4.3.2.1 Create Account\n\n\n\n4.3.2.2 Get Account\n\n\n\n4.3.2.3 Get Account List\n\n\n\n4.3.2.4 Login\n\n\n\n4.3.2.5 Update Account Password\n\n\n\n4.3.2.6 Update Account Profile\n\n\n\n4.3.2.7 Create Classroom\n\n\n\n4.3.2.8 Add Students To Classroom\n\n\n\n4.3.2.9 Remove Students From Classroom\n\n\n\n4.3.2.10 Add Teachers To Classroom\n\n\n\n4.3.2.11 Remove Teachers From Classroom\n\n\n\n4.3.2.12 Update Classroom\n\n\n\n4.3.2.13 Get Classroom\n\n\n\n4.3.2.14 Get Classroom List\n\n\n\n4.3.2.15 Get Students In Classroom\n\n\n\n4.3.2.16 Get Teachers In Classroom\n\n\n\n4.3.2.17 Get Student Record\n\n\n\n4.3.2.18 Get Student Record List\n\n\n\n4.3.2.19 Update Student Record\n\n\n\n4.3.2.20 Create Request To Update Student Record\n\n\n\n4.3.2.21 Get Pending Record Requests\n\n\n\n4.3.2.22 Approve Pending Record Request\n\n\n\n4.3.2.23 Upload Record To Chain Node\n\n\n\n4.3.2.24 Create Statistic Key\n\n\n\n4.3.2.25 Get Statistic Key List\n\n\n\n4.3.2.26 Delete Statistic Key\n\n\n\n4.3.2.27 Get Statistic Data\n\n\n\n4.3.2.28 Create Student Key\n\n\n\n4.3.2.29 Get Student Key List\n\n\n\n4.3.2.30 Delete Student Key\n\n\n\n4.3.2.31 Get Student Data From Key\n\n\n\n4.3.2.32 Upload Legacy Student Record"
  },
  {
    "objectID": "Design.html#data-database-design",
    "href": "Design.html#data-database-design",
    "title": "4  Software Design Description",
    "section": "4.4 Data & Database Design",
    "text": "4.4 Data & Database Design\n\n4.4.1 Database Design\n\n\n\nFigure 4.5: Database Design of the Request Server\n\n\n\n4.4.1.1 Account\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nUSERNAME\ncharacter varying\n255\nx\nx\n\n\n\n\nHASHEDPASSWORD\ncharacter varying\n255\n\nx\n\n\n\n\nSALT\ncharacter varying\n255\n\nx\n\n\n\n\nROLE\ncharacter varying\n255\n\nx\n\n\n\n\nCREATEDAT\ntimestamp\n\n\nx\n\n\n\n\n\n\n\n4.4.1.2 Profile\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nADDRESS\ncharacter varying\n255\n\nx\n\n\n\n\nAVATAR\ncharacter varying\n255\n\nx\n\n\n\n\nBIRTHDATE\ntimestamp\n\n\nx\n\n\n\n\nEMAIL\ncharacter varying\n255\n\nx\n\n\n\n\nFIRSTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nLASTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nMALE\nboolean\n\n\nx\n\n\n\n\nPHONE\ncharacter varying\n255\n\nx\n\n\n\n\nUPDATED\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n4.4.1.3 Student\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nETHNIC\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANJOB\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANNAME\ncharacter varying\n255\n\nx\n\n\n\n\nHOMETOWN\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\n\n\n\n4.4.1.4 Classroom\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGRADE\ncharacter varying\n255\n\nx\n\n\n\n\nHOMEROOMTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSTART_YEAR\ninteger\n\n\nx\n\n\n\n\n\n\n\n4.4.1.5 Class Student\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n4.4.1.6 Class Teacher\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n4.4.1.7 Record\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ACCOUNT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n4.4.1.8 Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\n\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVALDATE\ntimestamp\n\n\nx\n\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\nUPDATECOMPLETE\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n4.4.1.9 Pending Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n4.4.1.10 Updater Key\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\ncharacter varying\n255\nx\nx\nPK\n\n\n\nSTUDENT_ACCOUNT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n4.4.1.11 Statistic Key\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\ncharacter varying\n255\nx\nx\nPK\n\n\n\nGRADE\ninteger\n\n\nx\n\n\n\n\nSTART_YEAR\ninteger\n\n\nx\n\n\n\n\n\n\n\n\n4.4.2 Data File Design\n\n\n\n\n\n\n\n\nFile Name\nType\nNotes\n\n\n\n\ndb\nFolder\nThe folder of The H2 Database files\n\n\nupdater\nFolder\nContains the data files of the local student updater"
  },
  {
    "objectID": "Testing.html#overall-description",
    "href": "Testing.html#overall-description",
    "title": "5  Software Testing Documentation",
    "section": "5.1 Overall Description",
    "text": "5.1 Overall Description\n\n5.1.1 Test Model\nWe apply the V-model in our project, which is a development of the waterfall model. Testing is carried out concurrently with the software development cycle in the V-model, where a testing phase corresponds to a phase of software development.\n\n\n5.1.2 Testing Levels\nAbout the Testing levels in our project, we apply all those levels including Unit testing, Integration testing, System testing and Acceptance testing.\nWith Unit testing, we test each small module in the system, each class and function.\nWith Integration testing is a type of testing in which individual software modules or functions are logically integrated and tested in groups together. For instance, we can test the interoperability of two functions, add 1 item and search for the item to see if they interact well with each other, after successfully creating an item, we can proceed to search for the newly created item. or not.\nSystem testing is the last test phase to determine whether the system is about to deliver satisfying the requirements and goals. It tests the whole functionality and interface of the system. For instance, a database test for a system test is used to see if the data displayed on the system matches the data in the database.\nFinally, with Acceptance Test, similar to System Test but usually tested by customers, the purpose is to see if the software meets the customer’s requirements or not.\n\n\n5.1.3 Testing Types\nFunctional testing is checking if the system is working according to the business requirements and is performed in every level of testing. Non-Functional testing is similar to Functional testing in that both occur in all levels of testing. Non-functional testing is primarily concerned with the software’s other features, such as its security and if data is exposed by straightforward queries in any input field. Structural testing is often considered a type of white box testing. Instead than focusing on the software’s functionality, this method examines what is happening inside the program. Structural testing is also applicable at all testing levels. Changes Testing is done to determine whether or not the program is functioning correctly after bugs have been fixed."
  },
  {
    "objectID": "Testing.html#test-plan",
    "href": "Testing.html#test-plan",
    "title": "5  Software Testing Documentation",
    "section": "5.2 Test Plan",
    "text": "5.2 Test Plan\n\n5.2.1 Test Stages\nReport_Test-Stages.xlsx\n\n\n5.2.2 Resources\n\n5.2.2.1 Human Resources\n\n\n\n\n\n\n\n\nWorker/ Doer\nRole\nSpecifice Responsibilities/Comments\n\n\n\n\nTienHQ\nBE-Tester\nTest if the Request Server is working properly or not\n\n\nTuLX\nFE-Tester\nTest if the ChainCode is working properly or not\n\n\nKhoaND\nReporter\nHandling reports related work\n\n\nUyCHA\nBE-Tester\nTest if the UI is working properly or not\n\n\nKhoiNM\nFE-Tester\nTest if the UI is working properly or not\n\n\n\n\n\n5.2.2.2 Environment\nNone\n\n\n\n5.2.3 Test Milestones\n\n\n\nMilestone Task\nEffort (md)\nStart Date\nEnd Date\n\n\n\n\nChainCode\n6\nNov 9, 2022\nNov 14, 2022\n\n\nRequest Server\n20\nNov 15, 2022\nDec 04, 2022\n\n\n\n\n\n5.2.4 Deliverables\n\n\n\nNo\nDeliverables\nDue Date\n\n\n\n\n1\nTest Design\nNov 11, 2022\n\n\n2\nChainCode Test script\nNov 14, 2022\n\n\n3\nRequest Server Test script\nDec 15, 2022\n\n\n4\nTest results\nDec 16, 2022"
  },
  {
    "objectID": "Testing.html#test-cases",
    "href": "Testing.html#test-cases",
    "title": "5  Software Testing Documentation",
    "section": "5.3 Test Cases",
    "text": "5.3 Test Cases\n• Unit Test Cases: Report_Unit-Test-Case.xlsx\n• Other Test Cases: Report_Test-Case-Document.xlsx"
  },
  {
    "objectID": "Testing.html#test-reports",
    "href": "Testing.html#test-reports",
    "title": "5  Software Testing Documentation",
    "section": "5.4 Test Reports",
    "text": "5.4 Test Reports\nTest Report has been fully integrated in Unit_Test-Case and Test-Case-Document."
  },
  {
    "objectID": "Release.html#deliverable-package",
    "href": "Release.html#deliverable-package",
    "title": "6  Release Package & User Guides",
    "section": "6.1 Deliverable Package",
    "text": "6.1 Deliverable Package\n\n6.1.1 Source Codes & Documents\n\n\n\nItems\nSub-Items\nType\nVersion\n\n\n\n\nEduBlock\nEduBlock Client\nCode\n1.0\n\n\nRequest Server\nEduBlock Backend\nCode\n3.0\n\n\nBlockchain Network\nBlockchain Chaincode\nCode\n1.0\n\n\nOCR\nRecord Table Processor\nCode\n1.0\n\n\nRequirement\nSRS.docx\nDocument\n1.0\n\n\nDeployment\nUserGuide.docx\nDocument\n1.0\n\n\nFinal Report\nFinalReport.docx\nDocument\n1.0\n\n\n\n\n\n6.1.2 Known Issues, Limitations & Restrictions\n\n6.1.2.1 Limitations\n\nVerified records coundn’t be synchronized between nodes.\nVerified keys for third-party can only be used in the node it was created.\nCurrently network have ability to provide verified data with blockchain technology, and a node can be used as restore point if database of other nodes missing."
  },
  {
    "objectID": "Release.html#installation-guides",
    "href": "Release.html#installation-guides",
    "title": "6  Release Package & User Guides",
    "section": "6.2 Installation Guides",
    "text": "6.2 Installation Guides\n\n6.2.1 System Requirements\nOS: any\nCPU: at least 4 cores\nRAM: at least 4Gb\nNETWORK: required\nSOFTWARE: Docker\n\n\n6.2.2 Setup Files\n\ndocker-compose.yml\n.env\n\n\n\n6.2.3 Installation Instruction\n\nUpdate value in the .env as required\nRun command docker-compose up to deploy program\nThere are many solution to deploy a network. In this scenario, we deploy using virtual network. Other solution can be found here"
  },
  {
    "objectID": "Release.html#user-manual",
    "href": "Release.html#user-manual",
    "title": "6  Release Package & User Guides",
    "section": "6.3 User Manual",
    "text": "6.3 User Manual\n\n6.3.1 Terms & Definitions\n\n\n\nNo.\nTerm\nDefinition\n\n\n\n\n01\nFT\nFeature\n\n\n02\nGUEST\nGuest, Third-party\n\n\n03\nADMIN\nAdmin\n\n\n04\nSTAFF\nStaff\n\n\n05\nTEACHER\nTeacher\n\n\n06\nSTUDENT\nStudent\n\n\n07\nAUTH\nAny authenticated role\n\n\n08\nMAN\nAdmin or Staff\n\n\n09\nUSER\nTeacher or Student\n\n\n10\nPERSONAL\nPersonal\n\n\n\n\n\n6.3.2 System Requirements\nOS: any\nCPU: any\nRAM: at least 1Gb\nNETWORK: required\n\n\n6.3.3 Application Usage\n\n6.3.3.1 Overview\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo.\nFeature\nADMIN\nSTAFF\nTEACHER\nSTUDENT\nGUEST\nNote\n\n\n\n\n01\nLogin\nx\nx\nx\nx\n\n\n\n\n02\nView list of all accounts\nx\nx\n\n\n\n\n\n\n03\nView details of an account\nx\nx\n\n\n\n\n\n\n04\nCreate new accounts\nx\n\n\n\n\n\n\n\n05\nSearch account\nx\nx\n\n\n\n\n\n\n06\nUpdate own profile\nx\nx\nx\nx\n\n\n\n\n07\nChange others account password\nx\n\n\n\n\n\n\n\n08\nGet classification report of year and grade\nx\nx\n\n\n\n\n\n\n09\nGet report of a classroom\nx\nx\nx\n\n\n\n\n\n10\nView list of all classrooms\nx\nx\n\n\n\n\n\n\n11\nView details of a classroom\nx\nx\nx\nx\n\n\n\n\n12\nCreate new classroom\n\nx\n\n\n\n\n\n\n13\nUpdate details of a classroom\n\nx\n\n\n\n\n\n\n14\nView list of students of a classroom\nx\nx\nx\n\n\n\n\n\n15\nAssign multiple students to a classroom\n\nx\n\n\n\n\n\n\n16\nView details of a student\nx\nx\nx\n\n\n\n\n\n17\nUpdate details of a student\n\nx\n\n\n\n\n\n\n18\nRemove a student from classroom\n\nx\n\n\n\n\n\n\n19\nView list of teachers of a classroom\nx\nx\nx\nx\n\n\n\n\n20\nAssign multiple teachers to a classroom\n\nx\n\n\n\n\n\n\n21\nRemove a teacher from classroom\n\nx\n\n\n\n\n\n\n22\nPrint record table of a student\nx\nx\nx\nx\n\n\n\n\n23\nView own profile\nx\nx\nx\nx\n\n\n\n\n24\nUpdate own password\nx\nx\nx\nx\n\n\n\n\n25\nView teaching classrooms\n\n\nx\n\n\n\n\n\n26\nRequest update record of student\n\n\nx\nx\n\n\n\n\n27\nRequest update record of student by image\n\n\nx\nx\n\n\n\n\n28\nUpdate a record of student\n\n\nx\n\n\n\n\n\n29\nView list of pending record’s update requests\n\n\nx\n\n\n\n\n\n30\nApprove or reject record update request\n\n\nx\n\n\n\n\n\n31\nView update history of a record of student\nx\nx\nx\nx\n\n\n\n\n32\nView list of classroom taking part in\n\n\n\nx\n\n\n\n\n33\nView own records\n\n\n\nx\n\n\n\n\n34\nCreate key to view records of a student\n\n\n\nx\n\n\n\n\n35\nView list of keys to view records of a student\n\n\n\nx\n\n\n\n\n36\nRemove a key to view records of a student\n\n\n\nx\n\n\n\n\n37\nCreate key to view records of students\nx\nx\n\n\n\n\n\n\n38\nView list of keys to view records of students\nx\nx\n\n\n\n\n\n\n39\nRemove a key to view records of students\nx\nx\n\n\n\n\n\n\n40\nView verified records of a student\nx\nx\nx\nx\nx\n\n\n\n41\nView verified records of students\nx\nx\nx\nx\nx\n\n\n\n\n\n\n6.3.3.2 Login\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick Login in the homepage\nNavigate to login page\nFigure 6.1\n\n\n02\nFill the form with provided credential\n\nFigure 6.2\n\n\n03\nClick Login to submit the credential\nNavigate to dashboard if credential is valid\nFigure 6.3\n\n\n\n\n\n\nFigure 6.1: Home view\n\n\n\n\n\nFigure 6.2: Login view\n\n\n\n\n\nFigure 6.3: Login\n\n\n\n\n\nFigure 6.4: Login success\n\n\n\n\n6.3.3.3 View list of all accounts\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account in the left sidebar\nNavigate to the account list page\nFigure 6.5\n\n\n\n\n\n\nFigure 6.5: Account Navigation item\n\n\n\n\n\nFigure 6.6: Account list view\n\n\n\n\n6.3.3.4 View details of an account\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account in the left sidebar\nNavigate to the account list page\nFigure 6.7\n\n\n02\nFind the target account\n\nFigure 6.8\n\n\n03\nClick on Details in the Actions column of the table\nNavigate to the account’s profile page\nFigure 6.9\n\n\n\n\n\n\nFigure 6.7: Account list view\n\n\n\n\n\nFigure 6.8: Find an account\n\n\n\n\n\nFigure 6.9: Button to view account profile\n\n\n\n\n\nFigure 6.10: Account profile view\n\n\n\n\n6.3.3.5 Create new accounts\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to the account list page\n\n\n\n\n01\nClick on Create to open the accounts creation form\nA modal with form show up\nFigure 6.11\n\n\n02\nFill the form with desired values\n\nFigure 6.12\n\n\n03\nClick on Create Accounts\nNew accounts added at the end of list\nFigure 6.13\n\n\n\n\n\n\nFigure 6.11: Account list view\n\n\n\n\n\nFigure 6.12: Form to create account\n\n\n\n\n\nFigure 6.13: Confirm creation of provided account\n\n\n\n\n\nFigure 6.14: Account created\n\n\n\n\n6.3.3.6 Search an account\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to the account list page\n\n\n\n\n01\nClick on Search to show search input\nSearch input visible\nFigure 6.15\n\n\n02\nFill the input with desired values\nList of accounts auto refreshed with search value\nFigure 6.16\n\n\n\n\n\n\nFigure 6.15: Account list view\n\n\n\n\n\nFigure 6.16: Account search input\n\n\n\n\n\nFigure 6.17: Search result\n\n\n\n\n6.3.3.7 Update own profile\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account name in the left sidebar\nNavigate to the profile page\nFigure 6.18\n\n\n02\nClick on Update profile to open profile update form\nA modal with form show up\nFigure 6.19\n\n\n03\nFill the form with desired values\n\nFigure 6.20\n\n\n04\nClick on Submit\nUpdate if form values is valid\nFigure 6.21\n\n\n\n\n\n\nFigure 6.18: Profile navigation location\n\n\n\n\n\nFigure 6.19: Account profile view\n\n\n\n\n\nFigure 6.20: Profile update form\n\n\n\n\n\nFigure 6.21: Confirm profile information\n\n\n\n\n\nFigure 6.22: Profile updated\n\n\n\n\n6.3.3.8 Change other’s password\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to the account list page\n\n\n\n\n01\nFind the target account\n\nFigure 6.23\n\n\n02\nClick on Update password in the Actions column\nA modal with form show up\nFigure 6.24\n\n\n03\nFill the form with desired values\n\nFigure 6.25\n\n\n04\nClick on Update\nPassword for target account updated\nFigure 6.26\n\n\n\n\n\n\nFigure 6.23: Select an account from list\n\n\n\n\n\nFigure 6.24: Choose update target account information\n\n\n\n\n\nFigure 6.25: Password update form\n\n\n\n\n\nFigure 6.26: Confirm update with new password\n\n\n\n\n6.3.3.9 Get classification report of grade and year\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard in the left sidebar\nNavigate to the dashboard page\nFigure 6.27\n\n\n02\nSelect grade and year\n\nFigure 6.28\n\n\n03\nClick on Get grade report or Get classification report\nReport file can be download if exist\nFigure 6.29\n\n\n\n\n\n\nFigure 6.27: Dashboard navigation item\n\n\n\n\n\nFigure 6.28: Select range for report\n\n\n\n\n\nFigure 6.29: Download report for selected range\n\n\n\n\n\nFigure 6.30: Report ready to download\n\n\n\n\n6.3.3.10 Get report of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Classroom in the left sidebar\nNavigate to the classroom list page\nFigure 6.31\n\n\n02\nFind the target classroom\n\nFigure 6.32\n\n\n03\nClick on Details in the Actions column\nNavigate to the classroom details page\nFigure 6.33\n\n\n04\nClick on Get semester report or Get subject report\nReport file can be download\nFigure 6.34\n\n\n\n\n\n\nFigure 6.31: Classroom list navigation item\n\n\n\n\n\nFigure 6.32: Select a classroom\n\n\n\n\n\nFigure 6.33: View details of selected classroom\n\n\n\n\n\nFigure 6.34: Get report of selected classroom\n\n\n\n\n\nFigure 6.35: Report ready to download\n\n\n\n\n6.3.3.11 View list of all classrooms\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Classroom in the left sidebar\nNavigate to the classroom list page\nFigure 6.36\n\n\n\n\n\n\nFigure 6.36: Classroom list navigation item\n\n\n\n\n\nFigure 6.37: Classroom list view\n\n\n\n\n6.3.3.12 View details of a classroom\n\n6.3.3.12.1 MAN\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 10 to navigate to the classroom list page\n\n\n\n\n01\nFind the target classroom\n\nFigure 6.38\n\n\n02\nClick on Details in the Actions column\nNavigate to the classroom details page\nFigure 6.39\n\n\n\n\n\n\nFigure 6.38: Select a classroom from classroom list\n\n\n\n\n\nFigure 6.39: Navigate to selected classroom details\n\n\n\n\n\nFigure 6.40: Details of selected classroom\n\n\n\n\n6.3.3.12.2 USER\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard in the left sidebar\nNavigate to the dashboard page\nFigure 6.41\n\n\n02\nFind the target classroom\n\nFigure 6.42\n\n\n03\nClick on Details in the Actions column\nNavigate to the classroom details page\nFigure 6.43\n\n\n\n\n\n\nFigure 6.41: Dashboard navigation item\n\n\n\n\n\nFigure 6.42: Select classroom from classroom list\n\n\n\n\n\nFigure 6.43: Navigate to classroom details\n\n\n\n\n\nFigure 6.44: Details of selected classroom\n\n\n\n\n\n6.3.3.13 Create new classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 10 to navigate to classroom list page\n\n\n\n\n01\nClick on Create\nA modal with form show up\nFigure 6.45\n\n\n02\nFill the form with desired value\n\nFigure 6.46\n\n\n03\nClick on Create classroom\nNew classroom created\nFigure 6.47\n\n\n\n\n\n\nFigure 6.45: Classroom list view\n\n\n\n\n\nFigure 6.46: New classroom creation form\n\n\n\n\n\nFigure 6.47: Confirm new classroom creation\n\n\n\n\n\n6.3.3.14 Update details of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 11 to navigate to target classroom details\n\n\n\n\n01\nClick on Update details\nA modal with form show up\nFigure 6.48\n\n\n02\nFill the form with desired value\n\nFigure 6.49\n\n\n03\nClick on Update\nClassroom details updated\nFigure 6.50\n\n\n\n\n\n\nFigure 6.48: Classroom details view\n\n\n\n\n\nFigure 6.49: Form to update classroom details\n\n\n\n\n\nFigure 6.50: Confirm update new information for current classroom\n\n\n\n\n\n6.3.3.15 View list of students of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 11 to navigate to target classroom details\n\n\n\n\n01\nClick on Students\n\nFigure 6.51\n\n\n\n\n\n\nFigure 6.51: Classroom details view\n\n\n\n\n\nFigure 6.52: Classroom student view\n\n\n\n\n6.3.3.16 Assign multiple students to classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 14 to navigate to student list of target classroom\n\n\n\n\n01\nClick on Add students\nA modal with form show up\nFigure 6.53\n\n\n02\nFill the form with desired value\n\nFigure 6.54\n\n\n03\nClick on Confirm\nNew student appear in target classroom\nFigure 6.55\n\n\n\n\n\n\nFigure 6.53: Classroom student list\n\n\n\n\n\nFigure 6.54: Form to add new students to classroom\n\n\n\n\n\nFigure 6.55: Confirm add selected students to classroom\n\n\n\n\n\n6.3.3.17 View details of a student\n\n6.3.3.17.1 MAN\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to list of accounts\n\n\n\n\n01\nFind the target student\n\nFigure 6.56\n\n\n02\nClick on Details on the Actions column\nNavigate to the target student profile\nFigure 6.57\n\n\n\n\n\n\nFigure 6.56: Select a student account\n\n\n\n\n\nFigure 6.57: Navigate to selected student profile\n\n\n\n\n\nFigure 6.58: Student profile view\n\n\n\n\n6.3.3.17.2 TEACHER\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 14 to navigate to student list of a classroom\n\n\n\n\n01\nFind the target student\n\nFigure 6.59\n\n\n02\nClick on Details on the Actions column\nNavigate to the target student profile\nFigure 6.60\n\n\n\n\n\n\nFigure 6.59: Select a student in classroom\n\n\n\n\n\nFigure 6.60: Navigate to selected student profile\n\n\n\n\n\nFigure 6.61: Student profile view\n\n\n\n\n\n6.3.3.18 Update details of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 16 to navigate to student profile\n\n\n\n\n01\nClick on Update\nA modal with form show up\nFigure 6.62\n\n\n02\nFill the form with desired values\n\nFigure 6.63\n\n\n03\nClick on Confirm\nStudent information updated if provided form valid\nFigure 6.64\n\n\n\n\n\n\nFigure 6.62: Student profile view\n\n\n\n\n\nFigure 6.63: Form to update student information\n\n\n\n\n\nFigure 6.64: Confirm update new information\n\n\n\n\n\n6.3.3.19 Remove a student from classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 14 to navigate to student list of a classroom\n\n\n\n\n01\nFind the target student\n\nFigure 6.65\n\n\n02\nClick on Remove on the Actions column\nTarget student removed from classroom\nFigure 6.66\n\n\n\n\n\n\nFigure 6.65: Select a student in classroom\n\n\n\n\n\nFigure 6.66: Remove selected student from classroom\n\n\n\n\n\n6.3.3.20 View list of teachers of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 11 to navigate to classroom details\n\n\n\n\n01\nClick on Teachers\n\nFigure 6.67\n\n\n\n\n\n\nFigure 6.67: Classroom details view\n\n\n\n\n\nFigure 6.68: Classroom teacher list view\n\n\n\n\n6.3.3.21 Assign multiple teachers to a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 19 to navigate to teacher list of a classroom\n\n\n\n\n01\nClick on Add teachers\nA modal with form show up\nFigure 6.69\n\n\n02\nFill the form with desired values\n\nFigure 6.70\n\n\n03\nClick on Confirm\nNew teachers added to target classroom\nFigure 6.71\n\n\n\n\n\n\nFigure 6.69: Classroom teacher list view\n\n\n\n\n\nFigure 6.70: Form to add new teachers to classroom\n\n\n\n\n\nFigure 6.71: Confirm add selected teacher to classroom\n\n\n\n\n\n6.3.3.22 Remove a teacher from classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 19 to navigate to teacher list of a classroom\n\n\n\n\n01\nFind the target teacher\n\nFigure 6.72\n\n\n02\nClick on Remove\nTarget teacher removed from classroom\nFigure 6.73\n\n\n\n\n\n\nFigure 6.72: Select a teacher in classroom\n\n\n\n\n\nFigure 6.73: Remove selected teacher in classroom\n\n\n\n\n\n6.3.3.23 Print record table of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 16 to navigate to student profile\n\n\n\n\n01\nSelect a classroom of the target student\n\nFigure 6.74\n\n\n02\nClick on Print record\nPrint dialog show up\nFigure 6.75\n\n\n\n\n\n\nFigure 6.74: Student profile view\n\n\n\n\n\nFigure 6.75: Student record view of a classroom\n\n\n\n\n\nFigure 6.76: Record table ready to be print\n\n\n\n\n6.3.3.24 View own profile\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account name in the left sidebar\nNavigate to the profile page\nFigure 6.77\n\n\n\n\n\n\nFigure 6.77: Account profile navigation item\n\n\n\n\n\nFigure 6.78: Account profile page\n\n\n\n\n6.3.3.25 Update own password\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to profile page\n\n\n\n\n01\nClick on Change password\nA modal with form appear\nFigure 6.79\n\n\n02\nFill the form with desired values\n\nFigure 6.80\n\n\n03\nClick on Submit\nPassword updated\nFigure 6.81\n\n\n\n\n\n\nFigure 6.79: Account profile view\n\n\n\n\n\nFigure 6.80: Form to update password\n\n\n\n\n\nFigure 6.81: Confirm update to new password\n\n\n\n\n6.3.3.26 View teaching classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard\nShow list of teaching classroom\nFigure 6.82\n\n\n\n\n\n\nFigure 6.82: Classroom list view of teacher\n\n\n\n\n6.3.3.27 Request record update\n\n6.3.3.27.1 TEACHER\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 25 to navigate to teaching classroom list\n\n\n\n\n01\nClick Details in the Actions column\nNavigate to classroom details\nFigure 6.83\n\n\n02\nClick Students\nNavigate to classroom student list\nFigure 6.84\n\n\n03\nFind the target student\n\nFigure 6.85\n\n\n04\nClick on Details in the Actions column\nNavigate to student record of current classroom\nFigure 6.86\n\n\n05\nFind the target record\n\nFigure 6.87\n\n\n06\nClick on Request in the Actions column\nA modal with form show up\nFigure 6.88\n\n\n07\nFill the form with desired values\n\nFigure 6.89\n\n\n08\nClick on Request\nRequest sent\nFigure 6.90\n\n\n\n\n\n\nFigure 6.83: Navigate to selected classroom details\n\n\n\n\n\nFigure 6.84: Navigate to student list of selected classroom\n\n\n\n\n\nFigure 6.85: Select a student from list of students\n\n\n\n\n\nFigure 6.86: Navigate to selected student profile\n\n\n\n\n\nFigure 6.87: Select a record from record table\n\n\n\n\n\nFigure 6.88: Request update selected record\n\n\n\n\n\nFigure 6.89: Form to request record update\n\n\n\n\n\nFigure 6.90: Confirm request details to be send\n\n\n\n\n\n6.3.3.27.2 STUDENT\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to profile page\n\n\n\n\n01\nFind the target classroom\nRecord data switch to target classroom\nFigure 6.91\n\n\n02\nFind the target record\n\nFigure 6.92\n\n\n03\nClick on Request in the Actions column\nA modal with form show up\nFigure 6.93\n\n\n04\nFill the form with desired values\n\nFigure 6.94\n\n\n05\nClick on Request\nRequest sent\nFigure 6.95\n\n\n\n\n\n\nFigure 6.91: Select a classroom in personal profile\n\n\n\n\n\nFigure 6.92: Select a record in the record table\n\n\n\n\n\nFigure 6.93: Request update selected record\n\n\n\n\n\nFigure 6.94: Form to request record update\n\n\n\n\n\nFigure 6.95: Confirm request details to send\n\n\n\n\n\n\n6.3.3.28 Request record update by legacy record image\n\n6.3.3.28.1 TEACHER\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 25 to navigate to teaching classroom list\n\n\n\n\n01\nClick Details in the Actions column\nNavigate to classroom details\nFigure 6.96\n\n\n02\nClick Students\nNavigate to classroom student list\nFigure 6.97\n\n\n03\nFind the target student\n\nFigure 6.98\n\n\n04\nClick on Details in the Actions column\nNavigate to student record of current classroom\nFigure 6.99\n\n\n05\nClick on Upload next to Record Heading\nA modal with form show up\nFigure 6.100\n\n\n06\nFill the form with desired values\n\nFigure 6.101\n\n\n07\nClick on Submit\nRequest sent\nFigure 6.102\n\n\n\n\n\n\nFigure 6.96: Navigate to selected classroom\n\n\n\n\n\nFigure 6.97: Navigate to student list of the classroom\n\n\n\n\n\nFigure 6.98: Select a student in student list\n\n\n\n\n\nFigure 6.99: Navigate to selected student profile\n\n\n\n\n\nFigure 6.100: Upload legacy record table\n\n\n\n\n\nFigure 6.101: Form to upload image of record table\n\n\n\n\n\nFigure 6.102: Confirm values to be updated\n\n\n\n\n\n6.3.3.28.2 STUDENT\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to profile page\n\n\n\n\n01\nFind the target classroom\nRecord data switch to target classroom\nFigure 6.103\n\n\n02\nClick on Upload next to Record Heading\nA modal with form show up\nFigure 6.104\n\n\n03\nFill the form with desired values\n\nFigure 6.105\n\n\n04\nClick on Submit\nRequest sent\nFigure 6.106\n\n\n\n\n\n\nFigure 6.103: Select a classroom in student profile view\n\n\n\n\n\nFigure 6.104: Upload legacy record table\n\n\n\n\n\nFigure 6.105: Form to upload image of record table\n\n\n\n\n\nFigure 6.106: Confirm values to be updated\n\n\n\n\n\n6.3.3.29 Update a record of student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 25 to navigate to teaching classroom list\n\n\n\n\n01\nClick Details in the Actions column\nNavigate to classroom details\nFigure 6.107\n\n\n02\nClick Students\nNavigate to classroom student list\nFigure 6.108\n\n\n03\nFind the target student\n\nFigure 6.109\n\n\n04\nClick on Details in the Actions column\nNavigate to student record of current classroom\nFigure 6.110\n\n\n05\nFind the target record\n\nFigure 6.111\n\n\n06\nClick on Request in the Actions column\nA modal with form show up\nFigure 6.112\n\n\n07\nFill the form with desired values\n\nFigure 6.113\n\n\n08\nClick on Request\nRecord updated\nFigure 6.114\n\n\n\n\n\n\nFigure 6.107: Navigate to selected classroom\n\n\n\n\n\nFigure 6.108: Navigate to student list of classroom\n\n\n\n\n\nFigure 6.109: Select a student in student list\n\n\n\n\n\nFigure 6.110: Navigate to selected student profile\n\n\n\n\n\nFigure 6.111: Select a record from record table\n\n\n\n\n\nFigure 6.112: Request update seleted record\n\n\n\n\n\nFigure 6.113: Form to request update record\n\n\n\n\n\nFigure 6.114: Send request to teacher\n\n\n\n\n\n6.3.3.30 View list of pending record update requests\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Pending request in the Actions column\nNavigate to request list\nFigure 6.115\n\n\n\n\n\n\nFigure 6.115: List of pending record update request\n\n\n\n\n\n6.3.3.31 Approve or reject record update request\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 29 to navigate to request list page\n\n\n\n\n01\nFind the target request\n\nFigure 6.116\n\n\n02\nClick Approve or Reject the request\nRequest status changed\nFigure 6.117\n\n\n\n\n\n\nFigure 6.116: Select a pending request\n\n\n\n\n\nFigure 6.117: Accept or reject the request\n\n\n\n\n\n6.3.3.32 View update history of a record of student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 16 to navigate to student profile\n\n\n\n\n01\nFind the target classroom\nRecord data switch to target classroom\nFigure 6.118\n\n\n02\nFind the target record\n\nFigure 6.119\n\n\n03\nHover History in the Actions column\nA temporary card show update history\nFigure 6.120\n\n\n\n\n\n\nFigure 6.118: Select a classroom in the student profile\n\n\n\n\n\nFigure 6.119: Select a record in the record table\n\n\n\n\n\nFigure 6.120: History view of selected record\n\n\n\n\n6.3.3.33 View list of classroom taking part in\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard\nNavigate to classroom list\nFigure 6.121\n\n\n\n\n\n\nFigure 6.121: Classroom list view of student\n\n\n\n\n\n6.3.3.34 View own records\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to own record page\n\n\n\n\n\n\n\n\n\n6.3.3.35 Create key to view records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage verified keys\nNavigate to verified key list page\nFigure 6.122\n\n\n02\nClick on Create new key\nnew key created\nFigure 6.123\n\n\n\n\n\n\nFigure 6.122: Verified key list navigation item\n\n\n\n\n\nFigure 6.123: Create new verified key for third-party\n\n\n\n\n\n6.3.3.36 View list of keys to view records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage verified keys\nNavigate to verified key list page\nFigure 6.124\n\n\n\n\n\n\nFigure 6.124: Verified key list navigation item\n\n\n\n\n\n6.3.3.37 Remove a key to view records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 35 to navigate to the list of verified key page\n\n\n\n\n01\nFind the target key\n\nFigure 6.125\n\n\n01\nClick on Remove\nTarget key removed\nFigure 6.126\n\n\n\n\n\n\nFigure 6.125: Select a verified key in list\n\n\n\n\n\nFigure 6.126: Remove selected key\n\n\n\n\n\n6.3.3.38 Create key to view records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage stats key list\nNavigate to verified key list page\nFigure 6.127\n\n\n02\nSelect year and grade for the key\n\nFigure 6.128\n\n\n02\nClick on Create new key\nnew key created\nFigure 6.129\n\n\n\n\n\n\nFigure 6.127: Access key list view for third-party\n\n\n\n\n\nFigure 6.128: Input grade and year for new key\n\n\n\n\n\nFigure 6.129: Confirm create new key with provided grade and year\n\n\n\n\n\n6.3.3.39 View list of keys to view records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage stats key list\nNavigate to verified key list page\nFigure 6.130\n\n\n\n\n\n\nFigure 6.130: Access key list view for third-party\n\n\n\n\n\n6.3.3.40 Remove a key to view records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 38 to navigate to the list of verified key page\n\n\n\n\n01\nFind the target key\n\nFigure 6.131\n\n\n01\nClick on Remove\nTarget key removed\nFigure 6.132\n\n\n\n\n\n\nFigure 6.131: Select an access key in the key list\n\n\n\n\n\nFigure 6.132: Remove selected access key\n\n\n\n\n\n6.3.3.41 View verified records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nPress Ctrl + K\nA command pallette show up\nFigure 6.133\n\n\n02\nSelect View verified data\nNavigate to verified data page\nFigure 6.134\n\n\n02\nInput key\nShow verified data of the provided key\nFigure 6.135\n\n\n\n\n\n\nFigure 6.133: Open command palette\n\n\n\n\n\nFigure 6.134: Select view records of a student\n\n\n\n\n\nFigure 6.135: Provide the verified key\n\n\n\n\n\nFigure 6.136: Show the verified key information\n\n\n\n\n6.3.3.42 View verified records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nPress Ctrl + K\nA command pallette show up\nFigure 6.137\n\n\n02\nSelect View verified data list\nNavigate to verified data page\nFigure 6.138\n\n\n02\nInput key\nShow verified data of the provided key\nFigure 6.139\n\n\n\n\n\n\nFigure 6.137: Open command palette\n\n\n\n\n\nFigure 6.138: Select view records of multiple student\n\n\n\n\n\nFigure 6.139: Provide the access key\n\n\n\n\n\nFigure 6.140: Show the verified key data\n\n\n\n\n\n6.3.4 Troubleshooting"
  },
  {
    "objectID": "Appendix.html#acceptance-note",
    "href": "Appendix.html#acceptance-note",
    "title": "Appendix",
    "section": "Acceptance Note",
    "text": "Acceptance Note\n\n\n\nFigure 1: Acceptance Note"
  },
  {
    "objectID": "Appendix.html#references",
    "href": "Appendix.html#references",
    "title": "Appendix",
    "section": "References",
    "text": "References\n[1] M. Walport, Distributed ledger technology: Beyond Blockchain, UK Government Office for Science (2016).\n[2] Duong-Trung, N., Son, H. X., Le, H. T., & Phan, T. T. (2020). Smart Care. Proceedings of the 2020 4th International Conference on Cryptography, Security and Privacy. https://doi.org/10.1145/3377644.3377667.\n[3] Liang, Xueping & Shetty, Sachin & Tosh, Deepak & Kamhoua, Charles & Kwiat, Kevin & Njilla, Laurent. (2017). ProvChain: A Blockchain-Based Data Provenance Architecture in Cloud Environment with Enhanced Privacy and Availability. 10.1109/CCGRID.2017.8.\n[4] Vanita Jain, Akanshu Raj & Abhishek Tanwar & Mridul Khurana. “eVote – A Decentralized Voting Platform”. Digital Twin Technology, CRC Press, 2021.\n[5] Mettler, M. (2016). Blockchain technology in healthcare: The revolution starts here. 2016 IEEE 18th International Conference on e-Health Networking, Applications and Services (Healthcom). doi:10.1109/healthcom.2016.7749510.\n[6] Samaniego, M., & Deters, R. (2016). Blockchain as a Service for IoT. 2016 IEEE International Conference on Internet of Things (iThings) and IEEE Green Computing and Communications (GreenCom) and IEEE Cyber, Physical and Social Computing (CPSCom) and IEEE Smart Data (SmartData). doi:10.1109/ithings-greencom-cpscom-smartdata.2016.102.\n[7] Chowdhury, M. , Suchana, K. , Alam, S. and Khan, M. (2021) Blockchain Application in Banking System. Journal of Software Engineering and Applications, 14, 298-311. doi: 10.4236/jsea.2021.147018.\n[8] Ghaffar, A., & Hussain, M. (2019). BCEAP - A Blockchain Embedded Academic Paradigm to Augment Legacy Education through Application. Proceedings of the 3rd International Conference on Future Networks and Distributed Systems - ICFNDS ’19. doi:10.1145/3341325.3342036.\n[9] Vidal, F. R., Gouveia, F., & Soares, C. (2020). Revocation Mechanisms for Academic Certificates Stored on a Blockchain. 2020 15th Iberian Conference on Information Systems and Technologies (CISTI). doi:10.23919/cisti49556.2020.9141088.\n[10] M. Sharples and J. Domingue, “The Blockchain and Kudos: A Distributed System for Educational Record, Reputation and Reward,” in 11th European Conference on Technology Enhanced Learning, Lyon, France, 2016."
  }
]