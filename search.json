[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EduBlock",
    "section": "",
    "text": "Acknowledgement\nThanks to the following people for their help and support:\n\nFPT Edu Experience Space for providing an opportunity for us to do a team building activity and to have a chance to learn basic Blockchain technology.\nQuách Luyl Đa, our mentor & supervisor, for his guidance and support. He encouraged us to do our best and gave us a lot of useful advice.\nFellow members at ETASES to work together, share knowledge and experience, and to learn from each other. They did their best to make this project more complete and better.\nYou, the reader, for your interest in our project.\n\nA digital version of this report can be found here: https://etases.github.io/EduBlock.Report/"
  },
  {
    "objectID": "Definition.html",
    "href": "Definition.html",
    "title": "Definition and Acronyms",
    "section": "",
    "text": "Acronym\nDefinition\n\n\n\n\nBR\nBusiness Rule\n\n\nBA\nBusiness Analysis\n\n\nSRS\nSoftware Requirement Specification\n\n\nUC\nUse Case\n\n\nUAT\nUser Acceptance Test\n\n\nAPI\nApplication Programming Interface\n\n\nGUI\nGraphical User Interface\n\n\nRS\nRequest Server\n\n\nCN\nChain Node\n\n\nOCR\nOptical Character Recognition\n\n\nPM\nProject Manager\n\n\nFabric\nHyperledger Fabric\n\n\nFE\nFeature\n\n\nLI\nLimitation\n\n\nSI\nSoftware Interface\n\n\nHI\nHardware Interface\n\n\nUI\nUser Interface\n\n\nCRUD\nCreate, Read, Update & Delete"
  },
  {
    "objectID": "Introduction.html#overview",
    "href": "Introduction.html#overview",
    "title": "1  Project Introduction",
    "section": "1.1 Overview",
    "text": "1.1 Overview\n\n1.1.1 Project Information\n\nProject name: BlockChain application in academic record management to support online University/College admissions\nProject code: EduBlock\nGroup name: ETASES\nSoftware type: Web app\n\n\n\n1.1.2 Project Team\n\n1.1.2.1 Supervisor\n\n\n\nFull Name\nEmail\nPhone Number\nTitle\n\n\n\n\nQuach Luyl Da\ndaql@fpt.edu.vn\n0976703075\nLecture\n\n\n\n\n\n1.1.2.2 Team Members\n\n\n\nFull Name\nEmail\nPhone Number\nTitle\n\n\n\n\nHuynh Quang Tien\nTienHQCE150130@fpt.edu.vn\n0976608340\nLeader\n\n\nLe Xuan Tu\nTuLXCE150344@fpt.edu.vn\n0939774512\nMember\n\n\nNguyen Dang Khoa\nKhoaNDCE140165@fpt.edu.vn\n0382554293\nMember\n\n\nCao Hoang Anh Uy\nUyCHACE150661@fpt.edu.vn\n0706456981\nMember\n\n\nNguyen Minh Khoi\nKhoiNMCE150103@fpt.edu.vn\n0338616352\nMember"
  },
  {
    "objectID": "Introduction.html#background",
    "href": "Introduction.html#background",
    "title": "1  Project Introduction",
    "section": "1.2 Background",
    "text": "1.2 Background\nKeeping track of and managing student records is typically time-consuming and challenging, needing approval from the school and certain permissible circumstances. When transferring transcripts from high school to university, this causes difficulties. When applying to universities based only on their transcripts, students must request permission from the institution in order to be given a temporary transcript, which is both time-consuming and inconvenient. My group then developed the concept for a web application that enables students to monitor their academic progress over the course of their education. In order to make the academic records stand out and add additional features to the web app that improve user experience, we used the Blockchain platform."
  },
  {
    "objectID": "Introduction.html#existing-systems",
    "href": "Introduction.html#existing-systems",
    "title": "1  Project Introduction",
    "section": "1.3 Existing Systems",
    "text": "1.3 Existing Systems\nIn the project, we use 4 main systems\n\nBlockchain and Node system\nSmart contract\nRequest server and client server\nOCR\n\n\n1.3.1 Blockchain and Node system\nBlockchain, at its heart, is a distributed digital ledger that houses all types of data. The ownership of NFTs, bitcoin transactions, and smart contract definitions can all be recorded on a blockchain. (Andolfatto 2018)\nThis type of data may be stored in any conventional database, but blockchain is distinct since it is totally decentralized. The blockchain database is held on numerous computers dispersed throughout the network, as opposed to being kept in one place by a centralized administrator. These solitary machines are referred as nodes.\nBlockchains can be public or private. Anyone can participate in a public blockchain, which allows them to access, write, or verify data on the blockchain. Because there is no single organization in charge of all the blockchain’s nodes, it is challenging to alter transactions that have been recorded on a public blockchain. (Andolfatto 2018)\nA private blockchain, however, is managed by a company or group. Only that company or group has the authority to select users for the system, after which it has the right to modify the blockchain. Similar to an internal data storage system, this private blockchain procedure is spread over numerous nodes for added protection. (Andolfatto 2018)\nPros:\n\nTransactions are more accurate since a blockchain transaction requires numerous nodes to verify it. This can reduce mistakes.\nAbsence of Middlemen Using blockchain, two parties to a transaction can confirm and finish it directly amongst themselves.\nAdditional Protection: Theoretically, it is nearly impossible to conduct fraudulent transactions on a decentralized network like blockchain. They would have to hack each node and alter each piece of data in the ledger in order to carry out fraudulent transactions.\n\nCons:\n\nLimit on Transactions Per Second: Because Blockchain relies on a broader network to authorize transactions, its speed is constrained.\nRisk of Asset Loss: Some digital assets, like cryptocurrencies in a blockchain wallet, are safeguarded using a cryptographic key. This key needs to be properly guarded. There is presently no means to recover a private cryptographic key that grants access to a digital asset, thus the asset will be lost forever if the owner misplaces it.\n\n\n\n1.3.2 Smart contract\nSmart Contract is a computer program, or a transaction protocol designed to automatically carry out, manage, and record legally significant events and activities in accordance with the conditions of a contract or agreement. (“Front Matter” 2019)\nSimply said, a stored program is run on the blockchain under predetermined conditions, ensuring that users receive immediate results free from the influence of middlemen.\nSmart Contracts are written as code on the blockchain and work with a straightforward “if/when… then…” statement. A network of computers that will act when a verification condition is satisfied. (Lamb 2018)\nOnly parties who have been given permission may access the results; the transaction cannot be changed at will. If so, they must develop guidelines for dealing, trade standards, planning for all potential deviations, and dispute resolution. The signing of the contract will be more successful as a result of the participants’ satisfaction. (Lamb 2018)\nPros:\n\nWhen compared to using conventional contracts, smart contracts sometimes help save time and money.\nHigh security means that data is virtually completely safe.\nBecause a smart contract is a collection of programmable code, developers can quickly alter and construct it into numerous contracts to accommodate various kinds of services and goods.\nFurthermore, because Smart Contracts are decentralized systems, they cannot be hampered by outside parties. This contributes to greater operational efficiency, reduced operating expenses, and increased transparency.\n\nCons:\n\nThe information in the contract is essentially unchangeable because it is kept on a ledger. If the parties decide to alter some of the terms of the contract, this is advantageous but also disadvantageous.\nIt is difficult for hackers to attack since the system is very secure, unaffected by intermediaries, and data protection is guaranteed, but this also implies that it will be challenging to fix.\n\n\n\n1.3.3 Request server and client server\nA computer network paradigm with a client and a server as its two major parts. The server serves as the location for storing resources, setting up service applications, and handling client requests in this approach. The client is responsible for submitting the server’s request.\nProvides the network with the ability to concentrate applications and operations into one or more specific file services. Additionally enables simultaneous usage of the same resource by users, independent of their location.\nPros:\n\nEnsure data integrity in case of errors.\nExpanding your network is simple.\nPossesses the capacity to withstand network overload.\n\n\n\n1.3.4 OCR\nOptical Character Recognition is referred to as OCR. This specialized software program reads text from picture files. This technology is used to transfer and enter data. It is referred to as a digital scanning instrument that specializes in identifying characters, handwriting, or written letters. (Vihar Kurama 2022)\nA printed or handwritten page that is scanned using OCR is saved in the TIF file format. This graphic underneath the display is clear and easy to read. However, a sequence of images with either white or black dots will be present, depending on the computer. To check whether the markers match, the technology now examines each line of the image. (Vihar Kurama 2022)\nPros:\n\nOCR can scan and interpret words on a screen, which will be helpful to the blind and visually impaired. People with eyesight impairments can readily understand things from here.\nFast data entry: OCR ensures functionality to increase productivity and office job efficiency. The demand to scan papers is growing because the majority of people work in offices. By doing this, users will benefit from time savings and accurate, timely data updates.\n\nCons:\n\nOn the basis of clear photos, the majority of OCR software and applications can only reliably recognize roughly complete of documents.\nOCR is challenging to identify because the accessible images include backgrounds and text that are similar in colour."
  },
  {
    "objectID": "Introduction.html#business-opportunity",
    "href": "Introduction.html#business-opportunity",
    "title": "1  Project Introduction",
    "section": "1.4 Business Opportunity",
    "text": "1.4 Business Opportunity\nAlthough many high schools in Vietnam still keep paper records for post-graduation and enrolment in college or university, many now employ an online system to track students’ academic progress and inform parents of any latest outcomes. Because they must do it for both the paper records and the internet system, teachers find it challenging to update the information on their students. There is also a minimum level of transparency for students who wish to verify their information at any time because the internet system is centralized and only administrators and teachers have access to it. As a result, a system is required to help teachers and students manage student records in an easier, quicker, and more effective manner."
  },
  {
    "objectID": "Introduction.html#software-product-vision",
    "href": "Introduction.html#software-product-vision",
    "title": "1  Project Introduction",
    "section": "1.5 Software Product Vision",
    "text": "1.5 Software Product Vision\nWith the use of this system, students may simply keep track of changes to their grades in their academic records, reducing teacher grade entry errors. In order to gain rapid admission to graduate programs and colleges, students can also more conveniently retrieve their transcripts. High security and restrictions on data editing also assist in limiting the issue of phony points that are inaccurate representations of reality. Additionally, it eliminates challenges with entering grades into instructors’ school records because doing so will be quicker and easier with the aid of the system."
  },
  {
    "objectID": "Introduction.html#project-scope-limitations",
    "href": "Introduction.html#project-scope-limitations",
    "title": "1  Project Introduction",
    "section": "1.6 Project Scope & Limitations",
    "text": "1.6 Project Scope & Limitations\nA record management system will always be the best in terms of security and purity because it must, of course, assure data security. When interacting with and storing the data, always keep it intact and unaltered. Additionally, it must be user-friendly, with an interface that is clear and unambiguous and avoids misinterpretations of the translation or the information on the screen. Without the responsible user’s consent, data editing procedures cannot be carried out at will.\n\n1.6.1 Major Features\nFE-01: Using the blockchain platform, store data.\nFE-02: Transcripts can be updated by converting photos to alphanumeric data.\nFE-03: May replace paper school records entirely (electronic school records but have the nature of paper school records).\nFE-04: Enhancing the effort teachers put into entering grades.\nFE-05: Utilization dependability for admissions parties.\n\n\n1.6.2 Limitations & Exclusions\nLI-1: It is impossible to synchronize student counts between institutions due to the dispersed nature of the data.\nLI-2: The only time to use the system is at the end of the year because it only saves the semester’s overall grade (can be expanded later)\nLI-3: There is no option to switch schools (due to not processing student codes synchronously)\n\n\n\n\nAndolfatto, David. 2018. “Blockchain: What It Is, What It Does, and Why You Probably Don’t Need One.” Blockchain 100 (2): 87–95. https://doi.org/10.20955/r.2018.87-95.\n\n\n“Front Matter.” 2019. In Smart Contracts, I–IV. Mohr Siebeck GmbH; Co. KG. http://www.jstor.org/stable/j.ctvn96h9r.1.\n\n\nLamb, Kirsten. 2018. “Blockchain and Smart Contracts: What the AEC Sector Needs to Know.” Blockchain&SmartContracts, no. CDBB_REP_003 (July). https://doi.org/10.17863/CAM.26272.\n\n\nVihar Kurama, Prithiv S &. 2022. “What Is OCR and What Is It Used For?” OCR, November. https://nanonets.com/blog/what-is-ocr."
  },
  {
    "objectID": "Management.html#overview",
    "href": "Management.html#overview",
    "title": "2  Project Management Plan",
    "section": "2.1 Overview",
    "text": "2.1 Overview\n\n2.1.1 WBS & Estimation\n\n\n\nID\nWBS Item\nComplexity\nEstimated Effort (man-days)\n\n\n\n\n1\nAnalysis\n\n20\n\n\n1.1\nSRS\nMedium\n5\n\n\n1.2\nUML\nSimple\n5\n\n\n1.3\nTechnology Research\nMedium\n10\n\n\n2\nDesign\n\n20\n\n\n2.1\nArchitecture Design\nMedium\n5\n\n\n2.2\nDatabase Design\nMedium\n5\n\n\n2.3\nDetailed Design\nMedium\n10\n\n\n3\nDevelopment\n\n80\n\n\n3.1\nBackend\nMedium\n30\n\n\n3.2\nFrontend\nMedium\n30\n\n\n3.3\nBlockchain\nComplex\n10\n\n\n3.4\nOCR\nComplex\n10\n\n\n4\nTesting\n\n15\n\n\n4.1\nUnit Testing\nSimple\n3\n\n\n4.2\nIntegration Testing\nMedium\n5\n\n\n4.3\nSystem Testing\nMedium\n7\n\n\n5\nDocumentation\n\n20\n\n\n5.1\nFinal Report\nMedium\n10\n\n\n5.2\nFinal Product\nMedium\n10\n\n\n#\nTotal\n\n155\n\n\n\n\n\n2.1.2 Project Objectives\n\nTimeliness: 70%\nAllocated Effort (man-days): 90 days\nQuality Coverage:\n\nReviewing: 100%\nUnit Test: 95%\nIntegration Test: 95%\nSystem Test: 98%\nUser Acceptance Test: 80%\n\n\n\n\n2.1.3 Project Risks\n\n\n\n\n\n\n\n\n\nRisk\nImpact\nProbability\nMitigation\n\n\n\n\nThe team members are not familiar with the technologies used in the project\nHigh\nHigh\nThe team members will be trained before the project starts\n\n\nThe team members can not work together\nHigh\nMedium\nPrepare a team building activity before the project starts\n\n\nThere is not enough time to research the technologies used in the project\nHigh\nLow\nFind a mentor to help the team members / Find a workaround or similar technology that can be used in the project"
  },
  {
    "objectID": "Management.html#management-approach",
    "href": "Management.html#management-approach",
    "title": "2  Project Management Plan",
    "section": "2.2 Management Approach",
    "text": "2.2 Management Approach\n\n2.2.1 Project Process\n\n\n\n\n\n(a) Agile\n\n\n\n\n\n(b) Scrum\n\n\nFigure 2.1: Software Development Process Model\n\n\nSince parts of the requirements are not clear, we will use a process model of the Agile family called Scrum. Using this model, we can understand requirements, adapt changes quickly and deliver target products in a short time to test & review them for next iterations. The project will be divided into 4 iterations (sprints). Each sprint will be a month long and include 2 phases: planning and development. The planning phase will be used to estimate tasks from the product backlog, create a sprint backlog and assign tasks to the team members to develop in the development phase. At the end of the sprint, the team will review the sprint, discuss the problems and changes during the sprint and plan for the next sprint.\n\n\n2.2.2 Quality Management\n\nReviewing: There will be a meeting every week for the team and the supervisor to review the status of the tasks in the current sprint. The team will show the progress of the tasks and discuss the problems and changes during the sprint. The supervisor will take notes and give advices to the team.\nDefect Prevention: Each change of the code should be reviewed by the code master or the team leader before applying to the main project. They will check for bugs, code smells, anti-patterns and other problems.\nUnit Testing: Each module of the system should be tested before applying to the main project. The team can test the module by themselves or use a testing framework / software to test the module.\nIntegration Testing: The team will test the system after each sprint to make sure that the system is working properly. There will be an automatic testing software that includes test scenarios for the system.\nSystem Testing: The team will test the completed system based on the requirements and the test scenarios. The team can test the system by themselves or use a testing framework / software to test the system.\n\n\n\n2.2.3 Training Plan\n\n\n\n\n\n\n\n\n\nArea\nParticipants\nWhen, Duration\nWaiver Criteria\n\n\n\n\nBlockchain\nProject Team\n20/07/2022, 2 weeks\nMandatory\n\n\nHyperledger Fabric\nProject Team\n01/10/2022, 2 weeks\nMandatory for Backend Team\n\n\nJava, Javalin\nProject Team\n01/09/2022, 1 weeks\nMandatory"
  },
  {
    "objectID": "Management.html#master-schedule",
    "href": "Management.html#master-schedule",
    "title": "2  Project Management Plan",
    "section": "2.3 Master Schedule",
    "text": "2.3 Master Schedule\n\n\n\nDeliverable\nDue\nDeliverable Scope\n\n\n\n\nProject Plan\n05/09/2022\n\n\n\nSRS\n15/09/2022\n\n\n\nDesign 1\n15/09/2022\nArchitecture Design, Database\n\n\nDesign 2\n30/09/2022\nDetailed Design\n\n\nBackend\n30/09/2022\nCode, Test, Deployment\n\n\nFrontend\n30/11/2022\nCode, Test, Deployment\n\n\nExtra Services\n30/11/2022\nBlockchain, OCR\n\n\nFinal Report\n10/12/2022\n\n\n\nFinal Product\n15/12/2022"
  },
  {
    "objectID": "Management.html#project-organization",
    "href": "Management.html#project-organization",
    "title": "2  Project Management Plan",
    "section": "2.4 Project Organization",
    "text": "2.4 Project Organization\n\n2.4.1 Team Structure\n\n\n\nFigure 2.2: Team Structure\n\n\n\n\n2.4.2 Roles\n\n\n\n\n\n\n\nRole\nResponsibilities\n\n\n\n\nProject Manager\nSupervise the project, Manage the team, Manage the schedule, Manage deliverables\n\n\nAnalysis Leader\nAnalyze the requirements, Create SRS, Manage the analysis team\n\n\nAnalysis Member\nAnalyze the requirements, Create SRS\n\n\nDesign Leader\nDesign the system, Create system design document, Manage the design team\n\n\nDesign Member\nDesign the system, Create system design document\n\n\nBackend Leader\nDevelop the backend, Manage the backend team\n\n\nBackend Member\nDevelop the backend\n\n\nFrontend Leader\nDevelop the frontend, Manage the frontend team\n\n\nFrontend Member\nDevelop the frontend\n\n\nTest Leader\nTest the system, Create test report, Manage the test team\n\n\nTest Member\nTest the system, Create test report"
  },
  {
    "objectID": "Management.html#project-communication",
    "href": "Management.html#project-communication",
    "title": "2  Project Management Plan",
    "section": "2.5 Project Communication",
    "text": "2.5 Project Communication\n\n2.5.1 Communication Plan\n\n\n\n\n\n\n\n\n\n\nItem\nTarget\nPurpose\nWhen\nType\n\n\n\n\nDiscord\nProject Team\nReview meeting & Status report\nMonday, Friday\nVoice, Remote\n\n\nGoogle Meeting\nProject Team & Supervisor\nReview meeting, Sprint revision & Closeup\nWednesday\nVoice, Remote\n\n\nMessenger\nProject Team & Supervisor\nMeeting planning, Q&A & Status report\nEveryday\nText, Remote\n\n\nFU Library\nProject Team\nPair programming & Code review\nPlanned\nOffline\n\n\n\n\n\n2.5.2 External Interfaces\n\n\n\n\n\n\n\n\n\nFunction\nContact Person\nContact Address\nResponsibility\n\n\n\n\nSupervisor\nQuach Luyl Da\ndaql@fpt.edu.vn\nReview deliverables, Provide document template, Check project progress, Give advices to project team"
  },
  {
    "objectID": "Management.html#configuration-management",
    "href": "Management.html#configuration-management",
    "title": "2  Project Management Plan",
    "section": "2.6 Configuration Management",
    "text": "2.6 Configuration Management\n\n2.6.1 Tools & Infrastructures\n\n2.6.1.1 Common\n\n\n\nType\nTool\n\n\n\n\nVersion Control\nGit, GitHub\n\n\nUML\nPlantUML, Graphviz\n\n\nDeployment\nDocker\n\n\nProject Management\nQuarto, GitHub Projects\n\n\n\n\n\n\n2.6.2 Backend\n\n\n\n\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nJava\n\n\nLibrary\nJavalin, Fabric SDKs, HSCore, Guava, Genson, EvalEx, JWT\n\n\nCompiler\nJDK, Lombok\n\n\nUI\nTinyLog, JLine, Fabric CLI\n\n\nDBMS\nH2, Hibernate, Minifabric\n\n\nIDE / Editor\nIntelliJ IDEA, VSCode\n\n\n\n\n\n2.6.3 Frontend\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nTypeScript\n\n\nLibrary\nReact\n\n\nCompiler\nNode\n\n\nUI\nReact\n\n\nIDE / Editor\nVSCode\n\n\n\n\n\n2.6.4 Document Management\nWe use Quarto to build documents from Markdown files and use GitHub to manage the files and their changes. A participant will create a new branch to edit the files, create pull requests and wait for the project manager to review the changes and merge to the main branch. Then, it’ll be built in three outputs: a website using GitHub Pages for visualization, A PDF document & A MS-Word document.\n\n\n2.6.5 Source Code Management\nWe manage the source code by using GitHub. Endpoints of the project will be upload into separated repositories. Once the code is changed, the participant will create a new branch, create a relevant pull request, and wait for code owners to review and merge to the main branch."
  },
  {
    "objectID": "Requirement.html#overall-description",
    "href": "Requirement.html#overall-description",
    "title": "3  Software Requirement Specification",
    "section": "3.1 Overall Description",
    "text": "3.1 Overall Description\n\n3.1.1 Product Overview\nThis is the software requirement specification for the project “EduBlock”. EduBlock is an web-application that will help the school to manage their student’s records, more specifically, the students and teachers can reduce paper’s work to manage their records. Lately, the school has been using paper to manage their student’s record, which is not efficient and not environmentally. EduBlock will help the school to manage their student’s records in a more efficient way, although there are some other third-party apps that can help schools to manage student’s records nowadays, but it is not really efficient and safe. Our application uses blockchain technology to make sure the data is safe and secure. Every step of the process that needs to be worked with records will be tracked by EduBlock, so the school can easily track the data changes and make sure the data is not being tampered.\n\n\n3.1.2 Business Rules\n\n\n\n\n\n\n\nID\nRules Description\n\n\n\n\nBR-1\nThe application will be used by the students, teachers, staff and admin.\n\n\nBR-2\nOnly Staff have permission to manage classroom including create new class, edit class, assign or remove teacher from the class, assign student to class, remove student from class, edit student information.\n\n\nBR-3\nOnly Admin have permission to create new account(s).\n\n\nBR-4\nOnly Teacher who teach the subject can edit the grade of the student.\n\n\nBR-5\nStudent can only view their class, profile and academic record.\n\n\nBR-6\nIn Blockchain, the data is immutable, so the data cannot be changed once it is created. Because of this, the data can just be appended, can’t be edited or deleted, this will help ensure the student’s record is safe and secure.\n\n\nBR-7\nA node if wants to join the network, it must have other nodes permission or the node must be approved by the admin.\n\n\nBR-8\nIn a private blockchain, every node knows each other, which node own the data. Data is shared between nodes so the data can be recovered if one node is down.\n\n\nBR-9\nOther nodes can only read the data, they cannot change the data.\n\n\nBR-10\nThird-party’s member can only view the academic record and statistics of the students by using verified keys."
  },
  {
    "objectID": "Requirement.html#user-requirements",
    "href": "Requirement.html#user-requirements",
    "title": "3  Software Requirement Specification",
    "section": "3.2 User Requirements",
    "text": "3.2 User Requirements\n\nThe Academic record management web-app has five active actors: Student, Teacher, Staff, Administrator and Third-party’s member (i.e., parents, etc.).\nAdmin can create accounts for each role such as staff, student, teacher.\nStudents can view their academic record.\nTeachers can manage their class and their student’s academic record.\nStaff can manage the classroom and view academic records of students, assign or delete teachers from the class, assign students to class, create new classes and edit student information.\nThird-party’s member can view the academic record and statistic of the students by using verified key.\n\n\n3.2.1 System Actors\n\n\n\n\n\n\n\n\nID\nActor\nDescription\n\n\n\n\n1\nADMIN\nAdmin is the person who has the highest authority in the system. Admin can manage the account of the other actors.\n\n\n2\nSTAFF\nStaff is the person who has the authority to manage the classroom. Staff can assign or remove teachers from the class, assign students to class and remove students from class.\n\n\n3\nTEACHER\nTeacher is the person who has the authority to manage their class. Teachers can view their student’s academic record; subject teachers can send requests to edit student grade.\n\n\n4\nSTUDENT\nStudent is the person who has the authority to view their academic record.\n\n\n5\nTHIRD PARTY\nThird party is the person who has the authority to view the academic record and statistics of the students by using verified a key.\n\n\n\n\n\n3.2.2 Use cases\n\n3.2.2.1 Admin\n\n\n\nUse case diagram for Admin\n\n\n\n3.2.2.1.1 UC-1 Admin Login\n\nDescription: Admin can login with their username and password.\nActors: Admin.\nPreconditions: Admin has an account.\nPost Conditions: Admin can access the system.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin enters their username and password.\nSystem verifies the username and password.\nSystem displays the dashboard.\n\nExceptions:\n\nIf the username or password is incorrect, the system will display an error message.\n\n\n\n\n3.2.2.1.2 UC-2 Admin view list of accounts\n\nDescription: Admin can view list of all accounts.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System shows list of all accounts.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nSystem shows list of all accounts.\n\nAlternate Flow:\n\nSystem displays notification “No account found” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n3.2.2.1.3 UC-3 Admin view account details\n\nDescription: Admin can view account details.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System show account details.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nAdmin click on “Details” (human icon) on actions column.\nSystem shows account details.\n\nAlternate Flow:\n\nSystem displays notification “No account found” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n3.2.2.1.4 UC-4 Admin create (multiple) account\n\nDescription: Admin can create (multiple) accounts for each role such as staff, student, teacher.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System create (multiple) accounts.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nAdmin click on “Create” button.\nAdmin fill in the form.\nAdmin click on “Create” button.\nSystem create account.\n\nAlternate Flow:\n\nAdmin can create multiple accounts by clicking on “Add Account” button.\nAdmin fill in the form.\nAdmin click on “Create” button.\nSystem creates accounts.\n\nException:\n\nSystem displays notification if the form is not filled correctly.\n\n\n\n\n3.2.2.1.5 UC-5 Admin search account\n\nDescription: Admin can search accounts by text, username, email, id, first name and last name.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System shows list of accounts that match the search criteria.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nAdmin click on “Search” button.\nAdmin input text to search account.\nSystem shows list of accounts that match the search criteria.\n\nAlternate Flow:\n\nAdmin add search criteria by clicking on Search in” field.\nAdmin choose which criteria to search and combine with search by text.\nsystem show list of accounts that match the search criteria.\n\nException:\n\nSystem displays notification “No account found” if there is no account that matches the search criteria.\n\n\n\n\n3.2.2.1.6 UC-6 Admin update their profile\n\nDescription: Admin can update their profile’s information.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System update admin’s profile.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on their avatar above the logout button at bottom left.\nAdmin click on “Update” button at top right corner.\nA form will appear, admin then input their new information.\nAdmin click “Submit”.\nSystem update admin’s information and show success message.\n\nAlternate Flow:\n\nSystem displays notification if the form is not filled correctly.\n\nException:\n\nSystem displays notification if the form is not filled correctly.\n\n\n\n\n3.2.2.1.7 UC-7 Admin change password of other account\n\nDescription: Admin can change password of other account.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System change password of target account.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nSystem shows list of all account.\nAdmin click on “Change Password” (lock icon) on actions column.\nAdmin input new password.\nAdmin click “Submit”.\nSystem changes password of the target account and shows success message.\n\nAlternate Flow:\n\nSystem displays notification if the password is invalid.\n\nException:\n\nSystem displays notification if the password is invalid.\n\n\n\n\n3.2.2.1.8 UC-8 Admin get grade report and get classification report in a year\n\nDescription: Admin get grade report or classification report in a year.\nActors: Admin\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPost Conditions: System export report to admin’s computer.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAt dashboard Admin choose year and grade to get report.\nAdmin click “Get Report” button.\nSystem ready to export report to admin’s computer.\nAdmin choose where to save export and click “Save”.\n\nAlternate Flow:\n\nAdmin click “Get Classification Report” to get classification report.\nSystem ready to export classification report to Admin’s computer.\nAdmin choose where to save export and click “Save”.\n\nException:\n\nButton will be disabled if there is nothing to report.\n\n\n\n\n3.2.2.1.9 UC-9 Admin get report of a class\n\nDescription: Admin get report of a class.\nActors: Admin\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPost Conditions: System export report to admin’s computer.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin choose “Classroom” on sidebar.\nSystem shows list of all classes.\nAdmin click on “Details” button on actions column to view detail of a class.\nOn details page Admin click “Get classroom report” button.\nSystem ready to export report to admin’s computer.\nAdmin choose where to save export and click “Save”.\n\nException:\n\nIf class don’t exist Admin will not able to get report.\n\n\n\n\n3.2.2.1.10 UC-10 Admin view classrooms list\n\nDescription: Admin can view list of all classrooms.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System show list of all classrooms.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Classroom” on sidebar.\nSystem shows list of all classrooms.\n\nAlternate Flow:\n\nSystem displays notification “No classroom found” if there is no classroom.\n\nException:\n\nSystem displays notification “No classroom found” if there is no classroom.\n\n\n\n\n3.2.2.1.11 UC-11 Admin view classroom details\n\nDescription: Admin can view details of a classroom.\nActors: Admin\nPreconditions:\n\nAdmin is logged in.\nClassroom exists.\n\nPost Conditions: System show details of a classroom.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Classroom” on sidebar.\nSystem shows list of all classrooms.\nAdmin click on “Details” button on actions column to view detail of a classroom.\nSystem shows details of a classroom.\n\nAlternate Flow:\n\nSystem displays notification “Classroom not found” if classroom don’t exist.\n\nException:\n\nSystem displays notification “Classroom not found” if classroom don’t exist.\n\n\n\n\n3.2.2.1.12 UC-12 Admin Create statistic key\n\nDescription: Admin can create statistic key for third party’s member.\nActors: Admin\nPreconditions: Admin is logged in.\nPost Conditions: System create statistic key.\nFlow of Events:\n\nAdmin goes to EduBlock.\nAdmin login with username and password.\nAdmin click on “Manage stats key list” on sidebar.\nAdmin choose grade and year.\nAdmin then click on “Create new Statistic key” button.\nSystem creates statistic key and show it on the list.\n\nAlternate Flow:\n\nSystem displays notification if the key can’t be created.\n\nException:\n\nSystem displays notification if the key can’t be created.\n\n\n\n\n\n3.2.2.2 Staff\n\n\n\nUse case diagram for Staff\n\n\n\n3.2.2.2.1 UC-13 Staff Login\n\nDescription: Staff can login with their username and password.\nActors: Staff.\nPreconditions: Staff has an account.\nPost Conditions: Staff can access the system.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff enters their username and password.\nSystem verifies the username and password.\nSystem redirect Staff to dashboard.\n\nExceptions:\n\nIf the username or password is incorrect, the system will display an error message.\n\n\n\n\n3.2.2.2.2 UC-14 Staff view list of accounts\n\nDescription: Staff can view list of all accounts.\nActors: Staff\nPreconditions: Staff is logged in.\nPost Conditions: System show list of all accounts.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Account”.\nSystem shows list of all accounts.\n\nAlternate Flow:\n\nSystem displays notification There’s nothing to show” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n3.2.2.2.3 UC-15 Staff view account details\n\nDescription: Staff can view account details.\nActors: Staff\nPreconditions: Staff is logged in.\nPost Conditions: System show account details.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Account”.\nStaff click on “Details” (human icon) on actions column.\nSystem shows account details.\n\nAlternate Flow:\n\nSystem displays notification “No account found” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n3.2.2.2.4 UC-16 Staff search account\n\nDescription: Staff can search account by text, username, email, id, first name and last name.\nActors: Staff\nPreconditions: Staff is logged in.\nPost Conditions: System show list of accounts that match the search criteria.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Account”.\nStaff click on “Search” button.\nStaff input text to search account.\nSystem shows list of accounts that match the search criteria.\n\nAlternate Flow:\n\nAdmin add search criteria by clicking on Search in” field.\nAdmin choose which criteria to search and combine with search by text.\nsystem show list of accounts that match the search criteria.\n\nException:\n\nSystem displays notification “No account found” if there is no account that match the search criteria.\n\n\n\n\n3.2.2.2.5 UC-17 Staff view class list\n\nDescription: Staff can view list of all classes.\nActors: Staff\nPreconditions: Staff is logged in.\nPost Conditions: System show list of all classes.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nSystem shows list of all classes.\n\nAlternate Flow:\n\nSystem displays notification “No class found” if there is no class.\n\nException:\n\nSystem displays notification “No class found” if there is no class.\n\n\n\n\n3.2.2.2.6 UC-18 Staff create new class\n\nDescription: Staff create a new class.\nActors: Staff\nPreconditions: Staff is logged in.\nPost Conditions: System create a new class.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Create” button.\nA form will appear, staff then input class’s information and choose homeroom teacher.\nStaff click “Create classroom”.\nSystem creates a new class and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the form is not filled correctly.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n3.2.2.2.7 UC-19 Staff view class details\n\nDescription: Staff view details of a class.\nActors: Staff\nPreconditions: Staff is logged in.\nPost Conditions: System show class details.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (details icon) on actions column.\nSystem shows class details.\n\nAlternate Flow:\n\nSystem displays notification “No class found” if there is no class.\n\nException:\n\nSystem displays notification “No class found” if there is no class.\n\n\n\n\n3.2.2.2.8 UC-20 Staff edit class\n\nDescription: Staff edit class’s information.\nActors: Staff\nPreconditions: Staff is logged in.\nPost Conditions: System edit class’s information.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Update details”.\nA form will appear, staff then edit class’s information.\nSystem edits class’s information and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the form is not filled correctly.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n3.2.2.2.9 UC-21 Staff view student of a class\n\nDescription: Staff view list of students in a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPost Conditions: System show list of students in a class.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Students”.\nSystem shows list of students of the class.\n\nAlternate Flow:\n\nSystem displays notification “No student found” if there is no student in the class.\n\nException:\n\nSystem displays notification “No student found” if there is no student in the class.\n\n\n\n\n3.2.2.2.10 UC-22 Staff add students to a class\n\nDescription: Staff add students to a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPost Conditions: System add students to a class.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Students”.\nSystem shows list of students of the class.\nStaff click “Add students”.\nA form will appear, staff then choose students to add to the class.\nStaff click “Add student” to add more students.\nStaff click “Confirm”.\nSystem adds student to the class and show success message.\n\nAlternate Flow:\n\nIn add student form Staff click “Add student” to add more student.\nStaff choose students to add to the class.\nStaff click “Confirm”.\nSystem add students to the class and show success message.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\nSystem displays error notification if the student is already in the class.\nSystem displays error notification if no student is selected.\n\n\n\n\n3.2.2.2.11 UC-23 Staff view student details\n\nDescription: Staff view details of a student.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nStudent exists.\nStudent is in a class.\n\nPost Conditions: System show student details.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Students”.\nSystem shows list of students of the class.\nStaff click “Details” (icon) on actions column.\nSystem shows student details.\n\nAlternate Flow:\n\nSystem displays notification “No student found” if there is no student in the class.\n\nException:\n\nSystem displays notification “No student found” if there is no student in the class.\n\n\n\n\n3.2.2.2.12 UC-24 Staff edit student information\n\nDescription: Staff edit student’s information.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nStudent exists.\nStudent is in a class.\n\nPost Conditions: System edit student’s information.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Students”.\nSystem shows list of students of the class.\nStaff click “Details” (icon) on actions column.\nSystem shows student details.\nStaff click “Update” button.\nA form will appear, staff then edit student’s information.\nSystem edits student’s information and show success message.\n\nAlternate Flow:\n\nStaff click “Reset” button in case they want to reset the form.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n3.2.2.2.13 UC-25 Staff remove student from a class\n\nDescription: Staff remove student from a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\nStudent exists.\nStudent is in a class.\n\nPost Conditions: System remove student from the class.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Students”.\nSystem shows list of students of the class.\nStaff click “Remove” (icon) on actions column.\nSystem remove student from the class and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the student is not in the class.\n\nException:\n\nSystem displays error notification if the student is not in the class.\n\n\n\n\n3.2.2.2.14 UC-26 Staff view teacher of a class\n\nDescription: Staff view list of teachers in a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPost Conditions: System show list of teachers in a class.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Teachers”.\nSystem shows list of teachers of the class.\n\nAlternate Flow:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\nException:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\n\n\n\n3.2.2.2.15 UC-27 Staff assign teacher(s) to a class\n\nDescription: Staff assign teacher(s) to a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPost Conditions: System assign teacher(s) to a class.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Teachers”.\nSystem shows list of teachers of the class.\nStaff click “Add teachers”.\nA form will appear, staff then choose teacher and the subject they will teach.\nStaff click “Confirm”.\nSystem add teacher to the class and show success message.\n\nAlternate Flow:\n\nStaff click “Add teacher” to add more teachers.\nStaff choose teacher and subject.\nStaff click “Confirm”.\nSystem adds teachers to the class and show success message.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\nSystem displays error notification if the teacher is already in the class.\nSystem displays error notification if no teacher is selected.\nSystem displays error notification if no subject is selected.\n\n\n\n\n3.2.2.2.16 UC-28 Staff remove teacher from a class\n\nDescription: Staff remove teacher from a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\nTeacher exists.\nTeacher is in a class.\n\nPost Conditions: System remove teacher from the class.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem shows class details.\nStaff click “Teachers”.\nSystem shows list of teachers of the class.\nStaff click “Remove” (icon) on actions column.\nSystem remove teacher from the class and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the teacher is not in the class.\n\nException:\n\nSystem displays error notification if the teacher is not in the class.\n\n\n\n\n3.2.2.2.17 UC-29 Staff edit their profile\n\nDescription: Staff edit their profile.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\n\nPost Conditions: System edit staff’s profile.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on their avatar at bottom left of screen.\nSystem display staff’s profile.\nStaff click “Update” button.\nA form will appear, staff then edit their information.\nStaff click “Submit” button.\nSystem edits staff’s information and show success message.\n\nAlternate Flow:\n\nStaff click Change Password button to change their password.\nA form will appear, staff then edit their password.\nStaff click “Submit” button.\nSystem edits staff’s password and show success message.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n3.2.2.2.18 UC-30 Staff print student record\n\nDescription: Staff print student’s records.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nStudent exists.\n\nPost Conditions: System will save a file for staff to print student’s records.\nFlow of Events:\n\nStaff goes to EduBlock.\nTeacher login with username and password.\nOn classroom list Staff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Students”.\nSystem shows list of students of the class.\nStaff choose a student and click “Details” (icon) on actions column.\nSystem shows student details.\nStaff click “Print Record” button at Record session of student profile.\nSystem shows print preview of student’s records.\nStaff click “Save” button.\nSystem saves student’s records to teacher’s computer.\nStaff using printer to print student’s records.\n\nAlternate Flow:\n\nOn save, staff click “Cancel” button to cancel.\n\n\n\n\n3.2.2.2.19 UC-31 Staff get grade report and get classification report in a year\n\nDescription: Staff get grade report or classification report in a year.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPost Conditions: System export report to staff’s computer.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nAt dashboard Staff choose year and grade to get report.\nStaff click “Get Report” button.\nSystem ready to export report to staff’s computer.\nStaff choose where to save export and click “Save”.\n\nAlternate Flow:\n\nStaff click “Get Classification Report” to get classification report.\nSystem ready to export classification report to staff’s computer.\nStaff choose where to save export and click “Save”.\n\nException:\n\nButton will be disabled if there is nothing to report.\n\n\n\n\n3.2.2.2.20 UC-32 Staff create statistic key\n\nDescription: Staff create statistic key for third party’s member.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\n\nPost Conditions: System create a statistic key.\nFlow of Events:\n\nStaff goes to EduBlock.\nStaff login with username and password.\nStaff click on “Manage stats key list” on sidebar.\nStaff choose grade and year.\nStaff then click on “Create new Statistic key” button.\nSystem creates statistic key and show it on the list.\n\nAlternate Flow:\n\nSystem displays notification if the key can’t be created.\n\nException:\n\nSystem displays notification if the key can’t be created.\n\n\n\n\n\n3.2.2.3 Teacher\n\n\n\nUse case diagram for Teacher\n\n\n\n3.2.2.3.1 UC-33 Teacher Login\n\nDescription: Teacher login to EduBlock.\nActors: Teacher\nPreconditions:\n\nTeacher has an account.\n\nPost Conditions: System login teacher to EduBlock.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher goes to login page.\nTeacher enters username and password.\nTeacher clicks “Login” button.\nSystem authorizes and login teacher to EduBlock.\n\nAlternate Flow:\n\nSystem displays error notification if the username or password is incorrect.\n\nException:\n\nSystem displays error notification if the username or password is incorrect.\n\n\n\n\n3.2.2.3.2 UC-34 Teacher view their profile\n\nDescription: Teacher view their profile.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\n\nPost Conditions: System display teacher’s profile.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nTeacher clicks on their avatar at bottom left of screen.\nSystem display teacher’s profile.\n\n\n\n\n3.2.2.3.3 UC-35 Teacher change their password\n\nDescription: Teacher change their password.\nActors: Teacher\nPost Conditions: System successfully change their password.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nTeacher clicks on their avatar at bottom left of screen.\nSystem display teacher’s profile.\nTeacher clicks “Change Password” button.\nSystem display form to change password.\nTeacher enters old password, new password and confirm new password.\nTeacher clicks “Submit” button.\nSystem changes teacher’s password and show success message.\n\nAlternate Flow:\n\nTeacher clicks on “X” button to cancel.\n\nException:\n\nSystem displays error notification if the password is invalid.\n\n\n\n\n3.2.2.3.4 UC-36 Teacher view their classes\n\nDescription: Teacher view their classes.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\n\nPost Conditions: System display teacher’s classes.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn login success, system will redirect teach to dashboard where their classes will be display.\n\nAlternate Flow:\n\nSystem displays notification “No class found” if there is no class.\n\nException:\n\nSystem displays notification “No class found” if there is no class.\n\n\n\n\n3.2.2.3.5 UC-37 Teacher view class details\n\nDescription: Teacher view class details.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nClass exists.\nTeacher is assigned to the class.\nTeacher is in the class.\n\nPost Conditions: System display class details.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nAt dashboard Teacher choose a class and click on “Details” (icon) on actions column.\nSystem shows class details.\n\nAlternate Flow:\n\nSystem displays error notification if the class is not found.\n\nException:\n\nSystem displays error notification if the class is not found.\n\n\n\n\n3.2.2.3.6 UC-38 Teacher view students in a class\n\nDescription: Teacher view list of students in a class.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nClass exists.\nTeacher is assigned to the class.\nTeacher is in the class.\n\nPost Conditions: System show list of students in a class.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Students”.\nSystem shows list of students of the class.\n\nAlternate Flow:\n\nSystem displays notification “No student found” if there is no student in the class.\n\nException:\n\nSystem displays notification “No student found” if there is no student in the class.\n\n\n\n\n3.2.2.3.7 UC-39 Teacher view teachers in the class\n\nDescription: Teacher view list of teachers who teach in the class.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nClass exists.\nTeacher is assigned to the class.\nTeacher is in the class.\n\nPost Conditions: System show list of teachers in the class.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Teachers”.\nSystem shows list of teachers of the class.\n\nAlternate Flow:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\nException:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\n\n\n\n3.2.2.3.8 UC-40 Teacher view Student details\n\nDescription: Teacher view student details.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPost Conditions: System show student details.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Students”.\nSystem shows list of students of the class.\nTeacher clicks “Details” (icon) on actions column.\nSystem shows student details.\n\nAlternate Flow:\n\nSystem displays “Student not found” if no student in class.\n\nException:\n\nSystem displays “Student not found” if no student in class.\n\n\n\n\n3.2.2.3.9 UC-41 Teacher print student’s records\n\nDescription: Teacher export student’s records.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPost Conditions: System save student’s records to teacher’s computer.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Students”.\nSystem shows list of students of the class.\nTeacher clicks “Details” (icon) on actions column.\nSystem shows student details.\nTeacher scrolls down to “Record” section.\nTeacher chooses class to print.\nTeacher clicks “Print Record” button at Record session of student profile.\nSystem shows print preview of student’s records.\nTeacher clicks “Save” button.\nSystem saves student’s records to teacher’s computer.\nTeacher then uses printer to print saved file.\n\nAlternate Flow:\n\nOn save, teacher click “Cancel” to cancel save process.\n\n\n\n\n3.2.2.3.10 UC-42 Subject teacher change student’s score of their subject\n\nDescription: Subject teacher change student’s score.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPost Conditions: Subject teacher successfully change student’s score of their subject.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Students”.\nSystem shows list of students of the class.\nTeacher clicks “Details” (icon) on actions column.\nSystem shows student details.\nTeacher clicks “Request Update” (icon) on Action column at Record session of student profile.\nSystem show edit score form.\nTeacher fills the form and click “Request” button.\nSystem send request to edit student’s score.\n\nAlternate Flow:\n\nSystem displays error notification if the form is not filled correctly.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n3.2.2.3.11 UC-43 Teacher upload Record using image\n\nDescription: Teacher upload Record using image.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPost Conditions: System analyze and generate Record from the image.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Students”.\nSystem shows list of students of the class.\nTeacher clicks “Details” (icon) on actions column.\nSystem shows student details.\nTeacher clicks “Upload Record” button at Record session of student profile.\nSystem shows upload methods.\nTeacher chooses upload methods.\nTeacher upload image.\nSystem analyze and generate Record from the image.\nTeacher clicks “Upload” button.\nSystem saves the Record.\n\nAlternate Flow:\n\nIf system can’t recognize the image, it’s will show notification.\n\nException:\n\nIf system can’t recognize the image, it’s will show notification.\n\n\n\n\n3.2.2.3.12 UC-44 Teacher view list of pending Record’s Request and Approve or Reject\n\nDescription: Teacher view list of pending record’s request.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\nSubject teacher sent request to edit student’s grade.\n\nPost Conditions: System show list of pending record’s request.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nTeacher clicks on “Pending Verification” button at sidebar.\nSystem show list of pending record’s request.\nTeacher clicks “Approve” (check icon) on Action column to approve the request.\nSystem approves the request.\n\nAlternate Flow:\n\nTeacher clicks “Reject” (close icon) on Action column to reject the request.\nSystem rejects the request.\n\nException:\n\nSystem displays “No pending request” if there is no pending request.\n\n\n\n\n3.2.2.3.13 UC-45 Teacher view history of student’s records changes\n\nDescription: Teacher view history of student’s records changes.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPost Conditions: System show history of student’s records changes.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Students”.\nSystem shows list of students in the class.\nTeacher click “Details” (icon) on actions column.\nSystem shows student details.\nTeacher scrolls down to “Record” section.\nTeacher hover on “History” button(icon) at Action columns of Record session.\nSystem shows history of student’s records changes.\n\nAlternate Flow:\n\nSystem displays nothing if there is no changes.\n\nException:\n\nSystem displays nothing if there is no changes.\n\n\n\n\n3.2.2.3.14 UC-46 Teacher request to change student’s grade\n\nDescription: Teacher request to change student’s grade.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is in the class.\nStudent is in the class.\n\nPost Conditions: Teacher successfully requests to change student’s grade.\nFlow of Events:\n\nTeacher goes to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem shows class details.\nTeacher clicks “Students”.\nSystem shows list of students of the class.\nTeacher clicks “Details” (icon) on actions column.\nSystem shows student details.\nTeacher clicks “Request Update” (icon) on Action column at Record session of student profile.\nSystem show edit grade form.\nTeacher fills the form and click “Request” button.\nSystem send request to change student’s grade to subject teacher.\n\nAlternate Flow:\n\nSystem displays error notification if the form is not filled correctly.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n\n3.2.2.4 Student\n\n\n\nUse case diagram for Student\n\n\n\n3.2.2.4.1 UC-47 Student login\n\nDescription: Student can login to EduBlock.\nActors: Student\nPreconditions: Student has an account.\nPost Conditions: EduBlock bring student to dashboard.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent click “Login” at homepage.\nSystem redirect student to login page.\nStudent enter username and password.\nSystem checks the credentials.\nSystem bring student to dashboard.\n\nAlternate Flow:\n\nSystem displays error notification if the credentials is not correct.\n\nException:\n\nSystem displays error notification if the credentials is not correct.\n\n\n\n\n3.2.2.4.2 UC-48 Student view list of class they are in\n\nDescription: Student view list of class they are in.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPost Conditions: System show list of class they are in.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nClasses are listed on the dashboard.\n\nAlternate Flow:\n\nSystem displays “No class” if there is no class.\n\nException:\n\nSystem displays “No class” if there is no class.\n\n\n\n\n3.2.2.4.3 UC-49 Student view class details\n\nDescription: Student view class details.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPost Conditions: System show class details.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nClasses are listed on the dashboard.\nStudent click “Details” (icon) on actions column.\nSystem shows class details.\n\nAlternate Flow:\n\nSystem displays “No class” if there is no class.\n\nException:\n\nSystem displays “No class” if there is no class.\n\n\n\n\n3.2.2.4.4 UC-50 Student view teachers in the class\n\nDescription: Student view teachers in the class.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPost Conditions: System show list of teachers in the class.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nClasses are listed on the dashboard.\nStudent click “Details” (icon) on actions column.\nSystem shows class details.\nStudent click “Teachers”.\nSystem shows list of teachers in the class.\n\nAlternate Flow:\n\nSystem displays “No teacher” if there is no teacher.\n\nException:\n\nSystem displays “No teacher” if there is no teacher.\n\n\n\n\n3.2.2.4.5 UC-51 Student view their profile\n\nDescription: Student view their profile.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPost Conditions: Student is able to view their profile.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nStudent click on their avatar at bottom left corner.\nSystem shows student details.\n\n\n\n\n3.2.2.4.6 UC-52 Student view their academic records\n\nDescription: Student view their academic records.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPost Conditions: System show their academic records.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nStudent click on their avatar at bottom left corner.\nSystem shows student details.\nStudent scroll down to “Record” section.\nStudent view their academic records.\n\nAlternate Flow:\n\nAt dashboard, student click on “View My Record” (icon) on actions column.\nSystem shows their academic records.\nStudent view their academic records.\n\nException:\n\nSystem displays “No record” if there is no record.\n\n\n\n\n3.2.2.4.7 UC-53 Student send request to ask for re-check their academic records\n\nDescription: Student send request to ask for re-check their academic records.\nActors: Student\nPreconditions:\n\nStudent is logged in.\n\nPost Conditions: System send request of student.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nStudent click on their avatar at bottom left corner.\nSystem shows student details.\nStudent scroll down to “Record” section.\nStudent click “Request record change” icon on action column.\nSystem show form to send request.\nStudent fill the form and click “Submit”.\nSystem sends request of student.\n\nAlternate Flow:\n\nSystem display notification if the form is not filled correctly.\n\nException:\n\nSystem display notification if the form is not filled correctly.\n\n\n\n\n3.2.2.4.8 UC-54 Student create key for parent to view their academic profile and records\n\nDescription: Student create key for parent to view their academic profile and records.\nActors: Student\nPreconditions:\n\nStudent is logged in.\n\nPost Conditions: System create a key for student.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nStudent click on manage verified key.\nStudent click “Create key” button.\nSystem creates a key for student.\nThe key is displayed on the screen.\nStudent copy the key and send it to parent.\nParent use the key to view student’s academic profile and records.\n\nAlternate Flow:\n\nOn entering the key, system displays “Invalid key” if the key is invalid.\n\nException:\n\nOn entering the key, system displays “Invalid key” if the key is invalid.\n\n\n\n\n3.2.2.4.9 UC-55 Student print their academic records\n\nDescription: Student print their academic records.\nActors: Student\nPreconditions:\n\nStudent is logged in.\n\nPost Conditions: System save the academic records file to student’s computer.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard (classroom list).\nAt dashboard Student click on “View my record icon” on actions column corresponding to the class.\nSystem shows student details.\nStudent scroll down to “Record” section.\nStudent click “Print Record” button at bottom of the record table.\nSystem shows print preview.\nSystem saves the academic records file to student’s computer.\nStudent then use printer to print the file.\n\nAlternate Flow:\n\nSystem will cancel the save file process if the student click “Cancel” button.\n\nException:\n\nSystem will cancel the save file process if the student click “Cancel” button.\n\n\n\n\n3.2.2.4.10 UC-56 Student view history of their academic record’s changes\n\nDescription: Student view history of their academic record’s changes.\nActors: Student\nPreconditions:\n\nStudent is logged in.\n\nPost Conditions: System show history of their academic record’s changes.\nFlow of Events:\n\nStudent goes to EduBlock.\nStudent login with username and password.\nAt dashboard Student click on “View my record icon” on actions column corresponding to the class.\nSystem shows student details.\nStudent scroll down to “Record” section.\nStudent hover on “History” icon on action column.\nSystem show history of their academic record’s changes.\n\nAlternate Flow:\n\nSystem displays nothing if there are no changes.\n\nException:\n\nSystem displays nothing if there are no changes.\n\n\n\n\n\n3.2.2.5 Third Party\n\n\n\nUse case diagram for Third Party\n\n\n\n3.2.2.5.1 UC-57 Third party view student’s academic profile and records\n\nDescription: Third party view student’s academic profile and records by using verified key that student created without logging in.\nActors: Third party\nPreconditions:\n\nThird party has the key.\n\nPost Conditions: System show student’s academic profile and records for third party’s member.\nFlow of Events:\n\nThird party goes to EduBlock.\nThird party enter the key.\nSystem shows student’s academic profile and records for third party’s member.\n\nAlternate Flow:\n\nSystem displays “Invalid key” if the key is invalid.\n\nException:\n\nSystem displays “Invalid key” if the key is invalid.\n\n\n\n\n3.2.2.5.2 UC-58 Third party’s member view statistics of a grade in a year\n\nDescription: Third party’s member view statistics of a grade in a year by using verified statistic key given by admin or staff.\nActors: Third party’s member\nPreconditions:\n\nStaff or admin created the key.\nThird party’s member has the key.\n\nPost Conditions: System show statistics of a grade in a year for third party’s member.\nFlow of Events:\n\nThird party’s member goes to EduBlock.\nThird party’s member go to “Statistics key verification” page.\nThird party’s member enter the key.\nSystem shows statistics of a grade in a year for third party’s member.\n\nAlternate Flow:\n\nSystem displays “Invalid key” if the key is invalid.\n\nException:\n\nSystem displays “Invalid key” if the key is invalid."
  },
  {
    "objectID": "Requirement.html#functional-requirements",
    "href": "Requirement.html#functional-requirements",
    "title": "3  Software Requirement Specification",
    "section": "3.3 Functional Requirements",
    "text": "3.3 Functional Requirements\n\n3.3.1 System Functional Overview\nThe system is designed to provide a platform for school to manage their student’s record, information with high security, fast and private.\n\n\n3.3.2 Features\n\n3.3.2.1 Account Features\n\nUser Login\n\nUse cases: UC-1, UC-13, UC-32, UC-47\nDescription: The system shall allow user to login to EduBlock using their account.\n\nCreate Account\n\nUse cases: UC-4\nDescription: System shall allow admin to create account for staff, teacher, student, parent.\n\nView list of all accounts\n\nUse cases: UC-2, UC-14\nDescription: System shall allow admin and staff to view list of accounts.\n\nView account’s detail\n\nUse cases: UC-3, UC-15, UC-23, UC-34, UC-40, UC-51\nDescription: The system shall allow user to view account’s detail.\n\nUpdate profile\n\nUse cases: UC-6, UC-24, UC-29\nDescription: The system shall allow only admin and staff to update account’s profile.\n\nUpdate password\n\nUse cases: UC-7, UC-29, UC-34\nDescription: The system shall allow user to reset their password.\n\n\n\n\n3.3.2.2 Class Features\n\nView classroom list\n\nUse cases: UC-10, UC-17, UC-36, UC-48\nDescription: The system shall allow user to view list of classes filter by their role.\n\nView classroom detail\n\nUse cases: UC-11, UC-19, UC-37, UC-49\nDescription: The system shall allow user to view class detail.\n\nView student in class\n\nUse cases: UC-11, UC-21, UC-38\nDescription: The system shall allow user who have the right to view list of students in class.\n\nView teacher in class\n\nUse cases: UC-11, UC-26, UC-39, UC-50\nDescription: The system shall allow user who have the right to view list of teachers in class.\n\nCreate classroom\n\nUse cases: UC-18\nDescription: The system shall allow staff to create new class\n\nUpdate classroom detail\n\nUse cases: UC-20\nDescription: The system shall allow only staff to update class detail.\n\nAdd student to class\n\nUse cases: UC-22\nDescription: The system shall allow only staff to add student to class.\n\nAssign teacher to class\n\nUse cases: UC-27\nDescription: The system shall allow only staff to assign teacher to class.\n\nRemove student from class\n\nUse cases: UC-25\nDescription: The system shall allow only staff to remove student from class.\n\nRemove teacher from class\n\nUse cases: UC-28\nDescription: The system shall allow only staff to remove teacher from class. #### Record Features\n\nView student’s record (view, print)\n\nUse cases: UC-23, UC-30, UC-40, UC-41, UC-51, UC-52, UC-55\nDescription: The system shall allow user to view student’s record and print the record.\n\nSend request to change or re-check student’s record\n\nUse cases: UC-46, UC-53\nDescription: The system shall allow student and homeroom teacher to send request to re-check or change their record.\n\nView list of pending change requests (view, approve, reject)\n\nUse cases: UC-44\nDescription: The system shall allow homeroom teacher to view list of pending change requests and approve or reject the request.\n\nView history of record’s changes\n\nUse cases: UC-45, UC-56\nDescription: The system shall allow user to view history of record’s changes.\n\nSubject teacher changes their subject score\n\nUse cases: UC-42\nDescription: The system shall allow subject teacher to change their subject score on student’s record.\n\n\n\n\n3.3.2.3 Student Key Features\n\nStudent create verified key\n\nUse cases: UC-51\nDescription: The system shall allow student to create verified key for their parents to use it to view their academic profile and records.\n\nThird party’s member view student’s academic profile and records\n\nUse cases: UC-57\nDescription: The system shall allow third party’s member to view student’s academic profile and records by using verified key given by the student.\n\nThird party’s member view statistics of a grade in a year\n\nUse cases: UC-58\nDescription: The system shall allow third party’s member to view statistics of a grade in a year by using verified statistic key given by admin or staff."
  },
  {
    "objectID": "Requirement.html#non-functional-requirements",
    "href": "Requirement.html#non-functional-requirements",
    "title": "3  Software Requirement Specification",
    "section": "3.4 Non-Functional Requirements",
    "text": "3.4 Non-Functional Requirements\n\n3.4.1 External Interfaces\n\n3.4.1.1 User Interfaces\n\nUI-1: The system shall provide a user interface for admin manage all accounts.\nUI-2: The system shall provide a user interface for staff to manage classes.\nUI-3: The system shall provide a user interface for teacher to view classes and manage students, student’s records.\nUI-4: The system shall provide a user interface for teacher to view list of requests to change student’s records.\nUI-5: The system shall provide a user interface for student to view classes and view their records.\nUI-6: The system shall provide a user interface for parent to view their children’s records.\nUI-7: The system shall provide a user interface for student to generate private key for their parents to view their records.\nUI-8: The system shall permit complete access to the system via a web browser.\nUI-9: The web-application shall permit complete navigation.\nUI-10: The web-application shall permit complete all functions.\n\n\n\n3.4.1.2 Hardware Interfaces\n\nHI-1: The web-app shall be able to run on any device that can run a web browser.\nHI-2: Graphic card is required to upload student’s academic record using image file.\n\n\n\n3.4.1.3 Software Interfaces\n\nSI-1: Hyperledger Fabric network.\n\nSI-1.1: The system shall initialize decentralized network using Mini-fabric smoothly.\nSI-1.2: The network shall install chaincode in all peers smoothly.\n\nSI-2: EduBlock client\nThe request server shall communicate with user interface through API to perform following operations:\n\nSI-2.1: The system shall allow user to login.\nSI-2.2: The system shall allow user to view their profile.\nSI-2.3: The system shall allow user to reset their password.\nSI-2.4: The system shall allow Admin to perform CRUD operations on account.\nSI-2.5: The system shall allow Staff to perform CRU operations on classes.\nSI-2.6: Teacher to send request to change student’s academic record.\nSI-2.7: Teacher to approve or reject request to change student’s academic record.\nSI-2.8: Student to send request to re-check student’s academic record.\nSI-2.9: Student to upload student’s academic record.\n\n\n\n\n\n3.4.2 Quality Attributes\nOur application ensures the following quality attributes:\n\nUsability:\n\nThe application is easy to use and understand.\nThe application is designed to be intuitive.\nThe application is designed to be used by admin, staff, teacher, student, and third-party’s member.\n\nReliability:\n\nThe application is designed to be reliable.\nThe application is designed to be used with blockchain technology to ensure data integrity.\n\nPerformance: The application is designed to be fast and responsive.\nSecurity: The application is designed to be secure. The application is designed to be used with blockchain technology to ensure data integrity.\nMaintainability: The application is designed to be easy to maintain, update, and extend.\nPortability: The application is designed to be portable.\nScalability: The application is designed to be scalable and can be extended to support more users and more features.\nInteroperability: The application is designed to be interoperable with other applications.\nReusability: The application is designed to be reusable.\nTestability: The application is designed to be easy to test."
  },
  {
    "objectID": "Design.html#overall-description",
    "href": "Design.html#overall-description",
    "title": "4  Software Design Description",
    "section": "4.1 Overall Description",
    "text": "4.1 Overall Description\n\n4.1.1 Assumptions\n\nThe target platform is a Docker-compatible operating system (Preferably Linux).\nThe target web browser is Google Chrome.\nAll products are run and operated in the same machine (Monolithic architecture).\nOnly administrators can access the running system. Other users can only access the system through the frontend server.\nThe blockchain is a private blockchain.\nThe blockchain is an optional feature that can be turned on or off.\nThe database is a H2 database.\nThe mode of the database can be in-memory (for testing), file or remote (for production).\n\n\n\n4.1.2 Design Constraints\n\nThe backend system is a REST API server.\nThe backend system is a Java application.\nThe blockchain is a Hyperledger Fabric blockchain.\nThere should be an option to turn on or off the blockchain. If the blockchain is turned off, the backend system should still work as a normal REST API server with a local database.\n\n\n\n4.1.3 Technology Suggestion\n\nThe endpoints of the backend system can be exposed so that a node browser can be developed to search & access the endpoints and get the necessary information."
  },
  {
    "objectID": "Design.html#system-architecture-design",
    "href": "Design.html#system-architecture-design",
    "title": "4  Software Design Description",
    "section": "4.2 System Architecture Design",
    "text": "4.2 System Architecture Design\n\n4.2.1 Overall Architecture\n\n\n\nFigure 4.1: Overall architecture\n\n\n\n\n\n\n\n\n\nComponent\nDescription\n\n\n\n\nChain Node (CN)\nA node of the blockchain. This stores the records and handles the history and transaction requests from the Request Server (Change/View the score, information, etc.)\n\n\nRequest Server\nThe off-chain backend of a CN. This stores the pending requests from the user and is the only way to call a request to the CN. Each Request Server may have a different way to handle user requests (Voting, Direct Request, etc.)\n\n\nFrontend Server\nProvide the UX/UI for interacting with the Request Server\n\n\n\n\n\n4.2.2 System Architecture\n\n\n4.2.3 Package Diagram\n\n\n\nFigure 4.2: Package Diagram of Request Server\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\nroot\nMain classes\n\n\napi\nThe abstract classes & interfaces\n\n\nentity\nThe entities of the database\n\n\nhandler\nThe handlers of the endpoints of the REST API server\n\n\ninternal\nInternal classes used by other packages\n\n\ninternal/student\nThe instances of the Student Updater\n\n\nmodel\nThe input / output objects\n\n\nmodel/input\nThe input objects for the handlers\n\n\nmodel/output\nThe output objects returned from the handlers\n\n\nmodel/fabric\nThe models used internally by the student updater"
  },
  {
    "objectID": "Design.html#system-detailed-design",
    "href": "Design.html#system-detailed-design",
    "title": "4  Software Design Description",
    "section": "4.3 System Detailed Design",
    "text": "4.3 System Detailed Design\n\n4.3.1 Class Specification\n\n\n\nFigure 4.3: Class Diagram of the Request Server\n\n\n\n4.3.1.1 Account\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\nusername\nString\nThe username\n\n\nhashedPassword\nString\nThe hashed password\n\n\nsalt\nString\nThe salt of the password\n\n\nrole\nString\nThe role of the account\n\n\ncreatedAt\nDate\nThe date when the account was created\n\n\nclassrooms\nList ClassTeacher\nThe list of references to the classrooms that the account participates if its role is Teacher\n\n\nrecordEntries\nList RecordEntry\nThe list of record entries related to the subjects that the account is teaching if its role is Teacher\n\n\nrequestedRecordEntries\nList RecordEntry\nThe list of verified record entries that the account requested to changes\n\n\napprovedRecordEntries\nList RecordEntry\nThe list of verified record entries that the account accepted\n\n\npendingRecordEntries\nList PendingRecordEntry\nThe list of pending record entries related to the subjects that the account is teaching if its role is Teacher\n\n\nrequestedPendingRecordEntries\nList PendingRecordEntry\nThe list of pending record entries that the account requested to changes\n\n\nhomeClassrooms\nList Classroom\nThe list of classrooms the the account is a homeroom teacher at\n\n\n\n\n\n4.3.1.2 Profile\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\naccount\nAccount\nThe reference to the Account object\n\n\nfirstName\nString\nThe first name\n\n\nlastName\nString\nThe last name\n\n\nmale\nboolean\nIs the person male? false if she is a female\n\n\navatar\nString\nThe link to the avatar image\n\n\nbirthDate\nDate\nThe date of the birthday\n\n\naddress\nString\nThe address\n\n\nphone\nString\nThe phone number\n\n\nemail\nString\nThe email\n\n\nupdated\nboolean\nThe flag indicates that the profile requires synchronization with the Chain Node\n\n\n\n\n\n4.3.1.3 Student\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\naccount\nAccount\nThe reference to the Account object\n\n\nethnic\nString\nThe ethnic of the student\n\n\nfatherName\nString\nThe name of the father of the student\n\n\nfatherJob\nString\nThe job of the father of the student\n\n\nmotherName\nString\nThe name of the mother of the student\n\n\nmotherJob\nString\nThe job of the mother of the student\n\n\nguardianName\nString\nThe name of the guardian of the student\n\n\nguardianJob\nString\nThe job of the guardian of the student\n\n\nhomeTown\nString\nThe home town of the student\n\n\nclassrooms\nList ClassStudent\nThe list of references to the classrooms that the student participates\n\n\nrecords\nList Record\nThe list of records related to the classrooms that the student participates\n\n\nupdaterKey\nList UpdaterKey\nThe list of updater keys of the student. Used to allow outsiders to get information of the student.\n\n\n\n\n\n4.3.1.4 Classroom\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe classroom id\n\n\nname\nString\nThe name of the classroom\n\n\ngrade\nint\nThe grade of the classroom\n\n\nyear\nint\nThe year of the classroom\n\n\nhomeroomTeacher\nAccount\nThe reference to the homeroom teacher of the classroom\n\n\nstudents\nList ClassStudent\nThe list of references to the students that participate in the classroom\n\n\nteachers\nList ClassTeacher\nThe list of references to the teachers that participate in the classroom\n\n\nrecords\nList Record\nThe list of records related to the classroom\n\n\n\n\n\n4.3.1.5 ClassStudent\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe id of the reference\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nstudent\nStudent\nThe reference to the student\n\n\n\n\n\n4.3.1.6 ClassTeacher\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe id of the reference\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nteacher\nAccount\nThe reference to the teacher\n\n\nsubjectId\nlong\nThe id of the subject that the teacher teaches\n\n\n\n\n\n4.3.1.7 Record\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe record id\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nstudent\nStudent\nThe reference to the student\n\n\nrecordEntry\nList RecordEntry\nThe list of verified record entries related to the record\n\n\npendingRecordEntry\nList PendingRecordEntry\nThe list of pending record entries related to the record\n\n\n\n\n\n4.3.1.8 RecordEntry\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe record entry id\n\n\nsubjectId\nlong\nThe id of the subject that the record entry is related to\n\n\nfirstHalfScore\nint\nThe score of the first semester of the subject\n\n\nsecondHalfScore\nint\nThe score of the second semester of the subject\n\n\nfinalScore\nint\nThe final score of the subject\n\n\nrequestDate\nDate\nThe date when the record entry was requested\n\n\napprovalDate\nDate\nThe date when the record entry was approved\n\n\nupdateComplete\nboolean\nThe flag indicates that the record entry was updated to the Chain Node\n\n\nteacher\nAccount\nThe reference to the teacher that teaches the subject\n\n\nrequester\nAccount\nThe reference to the account that requested the record entry\n\n\napprover\nAccount\nThe reference to the account that approved the record entry\n\n\nrecord\nRecord\nThe reference to the record that the record entry is related to\n\n\n\n\n\n4.3.1.9 PendingRecordEntry\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe pending record entry id\n\n\nsubjectId\nlong\nThe id of the subject that the pending record entry is related to\n\n\nfirstHalfScore\nint\nThe score of the first semester of the subject\n\n\nsecondHalfScore\nint\nThe score of the second semester of the subject\n\n\nfinalScore\nint\nThe final score of the subject\n\n\nrequestDate\nDate\nThe date when the pending record entry was requested\n\n\nteacher\nAccount\nThe reference to the teacher that teaches the subject\n\n\nrequester\nAccount\nThe reference to the account that requested the pending record entry\n\n\nrecord\nRecord\nThe reference to the record that the pending record entry is related to\n\n\n\n\n\n4.3.1.10 UpdaterKey\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nString\nThe unique key\n\n\nstudent\nStudent\nThe reference to the student that the key is related to\n\n\n\n\n\n4.3.1.11 StatisticKey\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nString\nThe unique key\n\n\nyear\nint\nThe year that the key is referred to\n\n\ngrade\nint\nThe grade that the key is referred to\n\n\n\n\n\n\n4.3.2 Sequence Diagram\n\n4.3.2.1 Create Account\n\n\n\n4.3.2.2 Get Account\n\n\n\n4.3.2.3 Get Account List\n\n\n\n4.3.2.4 Login\n\n\n\n4.3.2.5 Update Account Password\n\n\n\n4.3.2.6 Update Account Profile\n\n\n\n4.3.2.7 Create Classroom\n\n\n\n4.3.2.8 Add Students To Classroom\n\n\n\n4.3.2.9 Remove Students From Classroom\n\n\n\n4.3.2.10 Add Teachers To Classroom\n\n\n\n4.3.2.11 Remove Teachers From Classroom\n\n\n\n4.3.2.12 Update Classroom\n\n\n\n4.3.2.13 Get Classroom\n\n\n\n4.3.2.14 Get Classroom List\n\n\n\n4.3.2.15 Get Students In Classroom\n\n\n\n4.3.2.16 Get Teachers In Classroom\n\n\n\n4.3.2.17 Get Student Record\n\n\n\n4.3.2.18 Get Student Record List\n\n\n\n4.3.2.19 Update Student Record\n\n\n\n4.3.2.20 Create Request To Update Student Record\n\n\n\n4.3.2.21 Get Pending Record Requests\n\n\n\n4.3.2.22 Approve Pending Record Request\n\n\n\n4.3.2.23 Upload Record To Chain Node\n\n\n\n4.3.2.24 Create Statistic Key\n\n\n\n4.3.2.25 Get Statistic Key List\n\n\n\n4.3.2.26 Delete Statistic Key\n\n\n\n4.3.2.27 Get Statistic Data\n\n\n\n4.3.2.28 Create Student Key\n\n\n\n4.3.2.29 Get Student Key List\n\n\n\n4.3.2.30 Delete Student Key\n\n\n\n4.3.2.31 Get Student Data From Key\n\n\n\n4.3.2.32 Upload Legacy Student Record"
  },
  {
    "objectID": "Design.html#data-database-design",
    "href": "Design.html#data-database-design",
    "title": "4  Software Design Description",
    "section": "4.4 Data & Database Design",
    "text": "4.4 Data & Database Design\n\n4.4.1 Database Design\n\n\n\nFigure 4.4: Database Design of the Request Server\n\n\n\n4.4.1.1 Account\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nUSERNAME\ncharacter varying\n255\nx\nx\n\n\n\n\nHASHEDPASSWORD\ncharacter varying\n255\n\nx\n\n\n\n\nSALT\ncharacter varying\n255\n\nx\n\n\n\n\nROLE\ncharacter varying\n255\n\nx\n\n\n\n\nCREATEDAT\ntimestamp\n\n\nx\n\n\n\n\n\n\n\n4.4.1.2 Profile\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nADDRESS\ncharacter varying\n255\n\nx\n\n\n\n\nAVATAR\ncharacter varying\n255\n\nx\n\n\n\n\nBIRTHDATE\ntimestamp\n\n\nx\n\n\n\n\nEMAIL\ncharacter varying\n255\n\nx\n\n\n\n\nFIRSTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nLASTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nMALE\nboolean\n\n\nx\n\n\n\n\nPHONE\ncharacter varying\n255\n\nx\n\n\n\n\nUPDATED\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n4.4.1.3 Student\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nETHNIC\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANJOB\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANNAME\ncharacter varying\n255\n\nx\n\n\n\n\nHOMETOWN\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\n\n\n\n4.4.1.4 Classroom\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGRADE\ncharacter varying\n255\n\nx\n\n\n\n\nHOMEROOMTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSTART_YEAR\ninteger\n\n\nx\n\n\n\n\n\n\n\n4.4.1.5 Class Student\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n4.4.1.6 Class Teacher\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n4.4.1.7 Record\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ACCOUNT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n4.4.1.8 Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\n\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVALDATE\ntimestamp\n\n\nx\n\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\nUPDATECOMPLETE\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n4.4.1.9 Pending Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n4.4.1.10 Updater Key\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\ncharacter varying\n255\nx\nx\nPK\n\n\n\nSTUDENT_ACCOUNT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n4.4.1.11 Statistic Key\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\ncharacter varying\n255\nx\nx\nPK\n\n\n\nGRADE\ninteger\n\n\nx\n\n\n\n\nSTART_YEAR\ninteger\n\n\nx\n\n\n\n\n\n\n\n\n4.4.2 Data File Design\n\n\n\n\n\n\n\n\nFile Name\nType\nNotes\n\n\n\n\ndb\nFolder\nThe folder of The H2 Database files\n\n\nupdater\nFolder\nContains the data files of the local student updater"
  },
  {
    "objectID": "Testing.html#overall-description",
    "href": "Testing.html#overall-description",
    "title": "5  Software Testing Documentation",
    "section": "5.1 Overall Description",
    "text": "5.1 Overall Description\n\n5.1.1 Test Model\nWe apply the V-model in our project, which is a development of the waterfall model. Testing is carried out concurrently with the software development cycle in the V-model, where a testing phase corresponds to a phase of software development.\n\n\n5.1.2 Testing Levels\nAbout the Testing levels in our project, we apply all those levels including Unit testing, Integration testing, System testing and Acceptance testing.\nWith Unit testing, we test each small module in the system, each class and function.\nWith Integration testing is a type of testing in which individual software modules or functions are logically integrated and tested in groups together. For instance, we can test the interoperability of two functions, add 1 item and search for the item to see if they interact well with each other, after successfully creating an item, we can proceed to search for the newly created item. or not.\nSystem testing is the last test phase to determine whether the system is about to deliver satisfying the requirements and goals. It tests the whole functionality and interface of the system. For instance, a database test for a system test is used to see if the data displayed on the system matches the data in the database.\nFinally, with Acceptance Test, similar to System Test but usually tested by customers, the purpose is to see if the software meets the customer’s requirements or not.\n\n\n5.1.3 Testing Types\nFunctional testing is checking if the system is working according to the business requirements and is performed in every level of testing. Non-Functional testing is similar to Functional testing in that both occur in all levels of testing. Non-functional testing is primarily concerned with the software’s other features, such as its security and if data is exposed by straightforward queries in any input field. Structural testing is often considered a type of white box testing. Instead than focusing on the software’s functionality, this method examines what is happening inside the program. Structural testing is also applicable at all testing levels. Changes Testing is done to determine whether or not the program is functioning correctly after bugs have been fixed."
  },
  {
    "objectID": "Testing.html#test-plan",
    "href": "Testing.html#test-plan",
    "title": "5  Software Testing Documentation",
    "section": "5.2 Test Plan",
    "text": "5.2 Test Plan\n\n5.2.1 Test Stages\nReport_Test-Stages.xlsx\n\n\n5.2.2 Resources\n\n5.2.2.1 Human Resources\n\n\n\n\n\n\n\n\nWorker/ Doer\nRole\nSpecifice Responsibilities/Comments\n\n\n\n\nTienHQ\nBE-Tester\nTest if the Request Server is working properly or not\n\n\nTuLX\nFE-Tester\nTest if the ChainCode is working properly or not\n\n\nKhoaND\nReporter\nHandling reports related work\n\n\nUyCHA\nBE-Tester\nTest if the UI is working properly or not\n\n\nKhoiNM\nFE-Tester\nTest if the UI is working properly or not\n\n\n\n\n\n5.2.2.2 Environment\nNone\n\n\n\n5.2.3 Test Milestones\n\n\n\nMilestone Task\nEffort (md)\nStart Date\nEnd Date\n\n\n\n\nChainCode\n6\nNov 9, 2022\nNov 14, 2022\n\n\nRequest Server\n20\nNov 15, 2022\nDec 04, 2022\n\n\n\n\n\n5.2.4 Deliverables\n\n\n\nNo\nDeliverables\nDue Date\n\n\n\n\n1\nTest Design\nNov 11, 2022\n\n\n2\nChainCode Test script\nNov 14, 2022\n\n\n3\nRequest Server Test script\nDec 15, 2022\n\n\n4\nTest results\nDec 16, 2022"
  },
  {
    "objectID": "Testing.html#test-cases",
    "href": "Testing.html#test-cases",
    "title": "5  Software Testing Documentation",
    "section": "5.3 Test Cases",
    "text": "5.3 Test Cases\n• Unit Test Cases: Report_Unit-Test-Case.xlsx\n• Other Test Cases: Report_Test-Case-Document.xlsx"
  },
  {
    "objectID": "Testing.html#test-reports",
    "href": "Testing.html#test-reports",
    "title": "5  Software Testing Documentation",
    "section": "5.4 Test Reports",
    "text": "5.4 Test Reports\nTest Report has been fully integrated in Unit_Test-Case and Test-Case-Document."
  },
  {
    "objectID": "Release.html#deliverable-package",
    "href": "Release.html#deliverable-package",
    "title": "6  Release Package & User Guides",
    "section": "6.1 Deliverable Package",
    "text": "6.1 Deliverable Package\n\n6.1.1 Source Codes & Documents\n\n\n\nItems\nSub-Items\nType\nVersion\n\n\n\n\nEduBlock\nEduBlock Client\nCode\n1.0\n\n\nRequest Server\nEduBlock Backend\nCode\n3.0\n\n\nBlockchain Network\nBlockchain Chaincode\nCode\n1.0\n\n\nOCR\nRecord Table Processor\nCode\n1.0\n\n\nRequirement\nSRS.docx\nDocument\n1.0\n\n\nDeployment\nUserGuide.docx\nDocument\n1.0\n\n\nFinal Report\nFinalReport.docx\nDocument\n1.0\n\n\n\n\n\n6.1.2 Known Issues, Limitations & Restrictions\n\n6.1.2.1 Limitations\n\nVerified records coundn’t be synchronized between nodes.\nVerified keys for third-party can only be used in the node it was created.\nCurrently network have ability to provide verified data with blockchain technology, and a node can be used as restore point if database of other nodes missing."
  },
  {
    "objectID": "Release.html#installation-guides",
    "href": "Release.html#installation-guides",
    "title": "6  Release Package & User Guides",
    "section": "6.2 Installation Guides",
    "text": "6.2 Installation Guides\n\n6.2.1 System Requirements\nOS: any\nCPU: at least 4 cores\nRAM: at least 4Gb\nNETWORK: required\nSOFTWARE: Docker\n\n\n6.2.2 Setup Files\n\ndocker-compose.yml\n.env\n\n\n\n6.2.3 Installation Instruction\n\nUpdate value in the .env as required\nRun command docker-compose up to deploy program\nThere are many solution to deploy a network. In this scenario, we deploy using virtual network. Other solution can be found here"
  },
  {
    "objectID": "Release.html#user-manual",
    "href": "Release.html#user-manual",
    "title": "6  Release Package & User Guides",
    "section": "6.3 User Manual",
    "text": "6.3 User Manual\n\n6.3.1 Terms & Definitions\n\n\n\nNo.\nTerm\nDefinition\n\n\n\n\n01\nFT\nFeature\n\n\n02\nR.GUEST\nGuest, Third-party\n\n\n03\nR.ADM\nAdmin\n\n\n04\nR.STF\nStaff\n\n\n05\nR.TCH\nTeacher\n\n\n06\nR.STD\nStudent\n\n\n07\nR.AUTH\nAny authenticated role\n\n\n08\nR.MAN\nAdmin or Staff\n\n\n09\nR.USR\nTeacher or Student\n\n\n10\nR.PRV\nPersonal\n\n\n\n\n\n6.3.2 System Requirements\nOS: any\nCPU: any\nRAM: at least 1Gb\nNETWORK: required\n\n\n6.3.3 Application Usage\n\n6.3.3.1 Overview\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo.\nFeature\nR.ADM\nR.STF\nR.TCH\nR.STD\nR.GUEST\nNote\n\n\n\n\n01\nLogin\nx\nx\nx\nx\n\n\n\n\n02\nView list of all accounts\nx\nx\n\n\n\n\n\n\n03\nView details of an account\nx\nx\n\n\n\n\n\n\n04\nCreate new accounts\nx\n\n\n\n\n\n\n\n05\nSearch account\nx\nx\n\n\n\n\n\n\n06\nUpdate own profile\nx\nx\nx\nx\n\n\n\n\n07\nChange others account password\nx\n\n\n\n\n\n\n\n08\nGet classification report of year and grade\nx\nx\n\n\n\n\n\n\n09\nGet report of a classroom\nx\nx\nx\n\n\n\n\n\n10\nView list of all classrooms\nx\nx\n\n\n\n\n\n\n11\nView details of a classroom\nx\nx\nx\nx\n\n\n\n\n12\nCreate new classroom\n\nx\n\n\n\n\n\n\n13\nUpdate details of a classroom\n\nx\n\n\n\n\n\n\n14\nView list of students of a classroom\nx\nx\nx\n\n\n\n\n\n15\nAssign multiple students to a classroom\n\nx\n\n\n\n\n\n\n16\nView details of a student\nx\nx\nx\n\n\n\n\n\n17\nUpdate details of a student\n\nx\n\n\n\n\n\n\n18\nRemove a student from classroom\n\nx\n\n\n\n\n\n\n19\nView list of teachers of a classroom\nx\nx\nx\nx\n\n\n\n\n20\nAssign multiple teachers to a classroom\n\nx\n\n\n\n\n\n\n21\nRemove a teacher from classroom\n\nx\n\n\n\n\n\n\n22\nPrint record table of a student\nx\nx\nx\nx\n\n\n\n\n23\nView own profile\nx\nx\nx\nx\n\n\n\n\n24\nUpdate own password\nx\nx\nx\nx\n\n\n\n\n25\nView teaching classrooms\n\n\nx\n\n\n\n\n\n26\nRequest update record of student\n\n\nx\nx\n\n\n\n\n27\nRequest update record of student by image\n\n\nx\nx\n\n\n\n\n28\nUpdate a record of student\n\n\nx\n\n\n\n\n\n29\nView list of pending record’s update requests\n\n\nx\n\n\n\n\n\n30\nApprove or reject record update request\n\n\nx\n\n\n\n\n\n31\nView update history of a record of student\nx\nx\nx\nx\n\n\n\n\n32\nView list of classroom taking part in\n\n\n\nx\n\n\n\n\n33\nView own records\n\n\n\nx\n\n\n\n\n34\nCreate key to view records of a student\n\n\n\nx\n\n\n\n\n35\nView list of keys to view records of a student\n\n\n\nx\n\n\n\n\n36\nRemove a key to view records of a student\n\n\n\nx\n\n\n\n\n37\nCreate key to view records of students\nx\nx\n\n\n\n\n\n\n38\nView list of keys to view records of students\nx\nx\n\n\n\n\n\n\n39\nRemove a key to view records of students\nx\nx\n\n\n\n\n\n\n40\nView verified records of a student\nx\nx\nx\nx\nx\n\n\n\n41\nView verified records of students\nx\nx\nx\nx\nx\n\n\n\n\n\n\n6.3.3.2 Login\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick Login in the homepage\nNavigate to login page\nFigure 6.1\n\n\n02\nFill the form with provided credential\n\nFigure 6.2\n\n\n03\nClick Login to submit the credential\nNavigate to dashboard if credential is valid\nFigure 6.3\n\n\n\n\n\n\nFigure 6.1: Step 1\n\n\n\n\n\nFigure 6.2: Step 2\n\n\n\n\n\nFigure 6.3: Step 3\n\n\n\n\n\nFigure 6.4: Result\n\n\n\n\n6.3.3.3 View list of all accounts\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account in the left sidebar\nNavigate to the account list page\nFigure 6.5\n\n\n\n\n\n\nFigure 6.5: Step 1\n\n\n\n\n\nFigure 6.6: Result\n\n\n\n\n6.3.3.4 View details of an account\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account in the left sidebar\nNavigate to the account list page\nFigure 6.7\n\n\n02\nFind the target account\n\nFigure 6.8\n\n\n03\nClick on Details in the Actions column of the table\nNavigate to the account’s profile page\nFigure 6.9\n\n\n\n\n\n\nFigure 6.7: Step 1\n\n\n\n\n\nFigure 6.8: Step 2\n\n\n\n\n\nFigure 6.9: Step 3\n\n\n\n\n\nFigure 6.10: Result\n\n\n\n\n6.3.3.5 Create new accounts\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to the account list page\n\n\n\n\n01\nClick on Create to open the accounts creation form\nA modal with form show up\nFigure 6.11\n\n\n02\nFill the form with desired values\n\nFigure 6.12\n\n\n03\nClick on Create Accounts\nNew accounts added at the end of list\nFigure 6.13\n\n\n\n\n\n\nFigure 6.11: Step 1\n\n\n\n\n\nFigure 6.12: Step 2\n\n\n\n\n\nFigure 6.13: Step 3\n\n\n\n\n\nFigure 6.14: Result\n\n\n\n\n6.3.3.6 Search an account\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to the account list page\n\n\n\n\n01\nClick on Search to show search input\nSearch input visible\nFigure 6.15\n\n\n02\nFill the input with desired values\nList of accounts auto refreshed with search value\nFigure 6.16\n\n\n\n\n\n\nFigure 6.15: Step 1\n\n\n\n\n\nFigure 6.16: Step 2\n\n\n\n\n\nFigure 6.17: Result\n\n\n\n\n6.3.3.7 Update own profile\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account name in the left sidebar\nNavigate to the profile page\nFigure 6.18\n\n\n02\nClick on Update profile to open profile update form\nA modal with form show up\nFigure 6.19\n\n\n03\nFill the form with desired values\n\nFigure 6.20\n\n\n04\nClick on Submit\nUpdate if form values is valid\nFigure 6.21\n\n\n\n\n\n\nFigure 6.18: Step 1\n\n\n\n\n\nFigure 6.19: Step 2\n\n\n\n\n\nFigure 6.20: Step 3\n\n\n\n\n\nFigure 6.21: Step 4\n\n\n\n\n\nFigure 6.22: Result\n\n\n\n\n6.3.3.8 Change other’s password\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to the account list page\n\n\n\n\n01\nFind the target account\n\nFigure 6.23\n\n\n02\nClick on Update password in the Actions column\nA modal with form show up\nFigure 6.24\n\n\n03\nFill the form with desired values\n\nFigure 6.25\n\n\n04\nClick on Update\nPassword for target account updated\nFigure 6.26\n\n\n\n\n\n\nFigure 6.23: Step 1\n\n\n\n\n\nFigure 6.24: Step 2\n\n\n\n\n\nFigure 6.25: Step 3\n\n\n\n\n\nFigure 6.26: Step 4\n\n\n\n\n6.3.3.9 Get classification report of grade and year\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard in the left sidebar\nNavigate to the dashboard page\nFigure 6.27\n\n\n02\nSelect grade and year\n\nFigure 6.28\n\n\n03\nClick on Get grade report or Get classification report\nReport file can be download if exist\nFigure 6.29\n\n\n\n\n\n\nFigure 6.27: Step 1\n\n\n\n\n\nFigure 6.28: Step 2\n\n\n\n\n\nFigure 6.29: Step 3\n\n\n\n\n\nFigure 6.30: Result\n\n\n\n\n6.3.3.10 Get report of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Classroom in the left sidebar\nNavigate to the classroom list page\nFigure 6.31\n\n\n02\nFind the target classroom\n\nFigure 6.32\n\n\n03\nClick on Details in the Actions column\nNavigate to the classroom details page\nFigure 6.33\n\n\n04\nClick on Get semester report or Get subject report\nReport file can be download\nFigure 6.34\n\n\n\n\n\n\nFigure 6.31: Step 1\n\n\n\n\n\nFigure 6.32: Step 2\n\n\n\n\n\nFigure 6.33: Step 3\n\n\n\n\n\nFigure 6.34: Step 4\n\n\n\n\n\nFigure 6.35: Result\n\n\n\n\n6.3.3.11 View list of all classrooms\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Classroom in the left sidebar\nNavigate to the classroom list page\nFigure 6.36\n\n\n\n\n\n\nFigure 6.36: Step 1\n\n\n\n\n\nFigure 6.37: Result\n\n\n\n\n6.3.3.12 View details of a classroom\n\n6.3.3.12.1 R.MAN\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 10 to navigate to the classroom list page\n\n\n\n\n01\nFind the target classroom\n\nFigure 6.38\n\n\n02\nClick on Details in the Actions column\nNavigate to the classroom details page\nFigure 6.39\n\n\n\n\n\n\nFigure 6.38: Step 1\n\n\n\n\n\nFigure 6.39: Step 2\n\n\n\n\n\nFigure 6.40: Result\n\n\n\n\n6.3.3.12.2 R.USR\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard in the left sidebar\nNavigate to the dashboard page\nFigure 6.41\n\n\n02\nFind the target classroom\n\nFigure 6.42\n\n\n03\nClick on Details in the Actions column\nNavigate to the classroom details page\nFigure 6.43\n\n\n\n\n\n\nFigure 6.41: Step 1\n\n\n\n\n\nFigure 6.42: Step 2\n\n\n\n\n\nFigure 6.43: Step 3\n\n\n\n\n\nFigure 6.44: Result\n\n\n\n\n\n6.3.3.13 Create new classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 10 to navigate to classroom list page\n\n\n\n\n01\nClick on Create\nA modal with form show up\nFigure 6.45\n\n\n02\nFill the form with desired value\n\nFigure 6.46\n\n\n03\nClick on Create classroom\nNew classroom created\nFigure 6.47\n\n\n\n\n\n\nFigure 6.45: Step 1\n\n\n\n\n\nFigure 6.46: Step 2\n\n\n\n\n\nFigure 6.47: Step 3\n\n\n\n\n\n6.3.3.14 Update details of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 11 to navigate to target classroom details\n\n\n\n\n01\nClick on Update details\nA modal with form show up\nFigure 6.48\n\n\n02\nFill the form with desired value\n\nFigure 6.49\n\n\n03\nClick on Update\nClassroom details updated\nFigure 6.50\n\n\n\n\n\n\nFigure 6.48: Step 1\n\n\n\n\n\nFigure 6.49: Step 2\n\n\n\n\n\nFigure 6.50: Step 3\n\n\n\n\n\n6.3.3.15 View list of students of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 11 to navigate to target classroom details\n\n\n\n\n01\nClick on Students\n\nFigure 6.51\n\n\n\n\n\n\nFigure 6.51: Step 1\n\n\n\n\n\nFigure 6.52: Result\n\n\n\n\n6.3.3.16 Assign multiple students to classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 14 to navigate to student list of target classroom\n\n\n\n\n01\nClick on Add students\nA modal with form show up\nFigure 6.53\n\n\n02\nFill the form with desired value\n\nFigure 6.54\n\n\n03\nClick on Confirm\nNew student appear in target classroom\nFigure 6.55\n\n\n\n\n\n\nFigure 6.53: Step 1\n\n\n\n\n\nFigure 6.54: Step 2\n\n\n\n\n\nFigure 6.55: Step 3\n\n\n\n\n\n6.3.3.17 View details of a student\n\n6.3.3.17.1 R.MAN\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 02 to navigate to list of accounts\n\n\n\n\n01\nFind the target student\n\nFigure 6.56\n\n\n02\nClick on Details on the Actions column\nNavigate to the target student profile\nFigure 6.57\n\n\n\n\n\n\nFigure 6.56: Step 1\n\n\n\n\n\nFigure 6.57: Step 2\n\n\n\n\n\nFigure 6.58: Result\n\n\n\n\n6.3.3.17.2 R.TCH\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 14 to navigate to student list of a classroom\n\n\n\n\n01\nFind the target student\n\nFigure 6.59\n\n\n02\nClick on Details on the Actions column\nNavigate to the target student profile\nFigure 6.60\n\n\n\n\n\n\nFigure 6.59: Step 1\n\n\n\n\n\nFigure 6.60: Step 2\n\n\n\n\n\nFigure 6.61: Result\n\n\n\n\n\n6.3.3.18 Update details of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 16 to navigate to student profile\n\n\n\n\n01\nClick on Update\nA modal with form show up\nFigure 6.62\n\n\n02\nFill the form with desired values\n\nFigure 6.63\n\n\n03\nClick on Confirm\nStudent information updated if provided form valid\nFigure 6.64\n\n\n\n\n\n\nFigure 6.62: Step 1\n\n\n\n\n\nFigure 6.63: Step 2\n\n\n\n\n\nFigure 6.64: Step 3\n\n\n\n\n\n6.3.3.19 Remove a student from classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 14 to navigate to student list of a classroom\n\n\n\n\n01\nFind the target student\n\nFigure 6.65\n\n\n02\nClick on Remove on the Actions column\nTarget student removed from classroom\nFigure 6.66\n\n\n\n\n\n\nFigure 6.65: Step 1\n\n\n\n\n\nFigure 6.66: Step 2\n\n\n\n\n\n6.3.3.20 View list of teachers of a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 11 to navigate to classroom details\n\n\n\n\n01\nClick on Teachers\n\nFigure 6.67\n\n\n\n\n\n\nFigure 6.67: Step 1\n\n\n\n\n\nFigure 6.68: Result\n\n\n\n\n6.3.3.21 Assign multiple teachers to a classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 19 to navigate to teacher list of a classroom\n\n\n\n\n01\nClick on Add teachers\nA modal with form show up\nFigure 6.69\n\n\n02\nFill the form with desired values\n\nFigure 6.70\n\n\n03\nClick on Confirm\nNew teachers added to target classroom\nFigure 6.71\n\n\n\n\n\n\nFigure 6.69: Step 1\n\n\n\n\n\nFigure 6.70: Step 2\n\n\n\n\n\nFigure 6.71: Step 3\n\n\n\n\n\n6.3.3.22 Remove a teacher from classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 19 to navigate to teacher list of a classroom\n\n\n\n\n01\nFind the target teacher\n\nFigure 6.72\n\n\n02\nClick on Remove\nTarget teacher removed from classroom\nFigure 6.73\n\n\n\n\n\n\nFigure 6.72: Step 1\n\n\n\n\n\nFigure 6.73: Step 2\n\n\n\n\n\n6.3.3.23 Print record table of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 16 to navigate to student profile\n\n\n\n\n01\nSelect a classroom of the target student\n\nFigure 6.74\n\n\n02\nClick on Print record\nPrint dialog show up\nFigure 6.75\n\n\n\n\n\n\nFigure 6.74: Step 1\n\n\n\n\n\nFigure 6.75: Step 2\n\n\n\n\n\nFigure 6.76: Result\n\n\n\n\n6.3.3.24 View own profile\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Account name in the left sidebar\nNavigate to the profile page\nFigure 6.77\n\n\n\n\n\n\nFigure 6.77: Step 1\n\n\n\n\n\nFigure 6.78: Result\n\n\n\n\n6.3.3.25 Update own password\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to profile page\n\n\n\n\n01\nClick on Change password\nA modal with form appear\nFigure 6.79\n\n\n02\nFill the form with desired values\n\nFigure 6.80\n\n\n03\nClick on Submit\nPassword updated\nFigure 6.81\n\n\n\n\n\n\nFigure 6.79: Step 1\n\n\n\n\n\nFigure 6.80: Step 2\n\n\n\n\n\nFigure 6.81: Step 3\n\n\n\n\n6.3.3.26 View teaching classroom\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard\nShow list of teaching classroom\nFigure 6.82\n\n\n\n\n\n\nFigure 6.82: Step 1\n\n\n\n\n6.3.3.27 Request record update\n\n6.3.3.27.1 R.TCH\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 25 to navigate to teaching classroom list\n\n\n\n\n01\nClick Details in the Actions column\nNavigate to classroom details\nFigure 6.83\n\n\n02\nClick Students\nNavigate to classroom student list\nFigure 6.84\n\n\n03\nFind the target student\n\nFigure 6.85\n\n\n04\nClick on Details in the Actions column\nNavigate to student record of current classroom\nFigure 6.86\n\n\n05\nFind the target record\n\nFigure 6.87\n\n\n06\nClick on Request in the Actions column\nA modal with form show up\nFigure 6.88\n\n\n07\nFill the form with desired values\n\nFigure 6.89\n\n\n08\nClick on Request\nRequest sent\nFigure 6.90\n\n\n\n\n\n\nFigure 6.83: Step 1\n\n\n\n\n\nFigure 6.84: Step 2\n\n\n\n\n\nFigure 6.85: Step 3\n\n\n\n\n\nFigure 6.86: Step 4\n\n\n\n\n\nFigure 6.87: Step 5\n\n\n\n\n\nFigure 6.88: Step 6\n\n\n\n\n\nFigure 6.89: Step 7\n\n\n\n\n\nFigure 6.90: Step 8\n\n\n\n\n\n6.3.3.27.2 R.STD\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to profile page\n\n\n\n\n01\nFind the target classroom\nRecord data switch to target classroom\nFigure 6.91\n\n\n02\nFind the target record\n\nFigure 6.92\n\n\n03\nClick on Request in the Actions column\nA modal with form show up\nFigure 6.93\n\n\n04\nFill the form with desired values\n\nFigure 6.94\n\n\n05\nClick on Request\nRequest sent\nFigure 6.95\n\n\n\n\n\n\nFigure 6.91: Step 1\n\n\n\n\n\nFigure 6.92: Step 2\n\n\n\n\n\nFigure 6.93: Step 3\n\n\n\n\n\nFigure 6.94: Step 4\n\n\n\n\n\nFigure 6.95: Step 5\n\n\n\n\n\n\n6.3.3.28 Request record update by legacy record image\n\n6.3.3.28.1 R.TCH\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 25 to navigate to teaching classroom list\n\n\n\n\n01\nClick Details in the Actions column\nNavigate to classroom details\nFigure 6.96\n\n\n02\nClick Students\nNavigate to classroom student list\nFigure 6.97\n\n\n03\nFind the target student\n\nFigure 6.98\n\n\n04\nClick on Details in the Actions column\nNavigate to student record of current classroom\nFigure 6.99\n\n\n05\nClick on Upload next to Record Heading\nA modal with form show up\nFigure 6.100\n\n\n06\nFill the form with desired values\n\nFigure 6.101\n\n\n07\nClick on Submit\nRequest sent\nFigure 6.102\n\n\n\n\n\n\nFigure 6.96: Step 1\n\n\n\n\n\nFigure 6.97: Step 2\n\n\n\n\n\nFigure 6.98: Step 3\n\n\n\n\n\nFigure 6.99: Step 4\n\n\n\n\n\nFigure 6.100: Step 5\n\n\n\n\n\nFigure 6.101: Step 6\n\n\n\n\n\nFigure 6.102: Step 7\n\n\n\n\n\n6.3.3.28.2 R.STD\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to profile page\n\n\n\n\n01\nFind the target classroom\nRecord data switch to target classroom\nFigure 6.103\n\n\n02\nClick on Upload next to Record Heading\nA modal with form show up\nFigure 6.104\n\n\n03\nFill the form with desired values\n\nFigure 6.105\n\n\n04\nClick on Submit\nRequest sent\nFigure 6.106\n\n\n\n\n\n\nFigure 6.103: Step 1\n\n\n\n\n\nFigure 6.104: Step 2\n\n\n\n\n\nFigure 6.105: Step 3\n\n\n\n\n\nFigure 6.106: Step 4\n\n\n\n\n\n\n6.3.3.29 Update a record of student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 25 to navigate to teaching classroom list\n\n\n\n\n01\nClick Details in the Actions column\nNavigate to classroom details\nFigure 6.107\n\n\n02\nClick Students\nNavigate to classroom student list\nFigure 6.108\n\n\n03\nFind the target student\n\nFigure 6.109\n\n\n04\nClick on Details in the Actions column\nNavigate to student record of current classroom\nFigure 6.110\n\n\n05\nFind the target record\n\nFigure 6.111\n\n\n06\nClick on Request in the Actions column\nA modal with form show up\nFigure 6.112\n\n\n07\nFill the form with desired values\n\nFigure 6.113\n\n\n08\nClick on Request\nRecord updated\nFigure 6.114\n\n\n\n\n\n\nFigure 6.107: Step 1\n\n\n\n\n\nFigure 6.108: Step 2\n\n\n\n\n\nFigure 6.109: Step 3\n\n\n\n\n\nFigure 6.110: Step 4\n\n\n\n\n\nFigure 6.111: Step 5\n\n\n\n\n\nFigure 6.112: Step 6\n\n\n\n\n\nFigure 6.113: Step 7\n\n\n\n\n\nFigure 6.114: Step 8\n\n\n\n\n\n6.3.3.30 View list of pending record update requests\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Pending request in the Actions column\nNavigate to request list\nFigure 6.115\n\n\n\n\n\n\nFigure 6.115: Step 1\n\n\n\n\n\n6.3.3.31 Approve or reject record update request\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 29 to navigate to request list page\n\n\n\n\n01\nFind the target request\n\nFigure 6.116\n\n\n02\nClick Approve or Reject the request\nRequest status changed\nFigure 6.117\n\n\n\n\n\n\nFigure 6.116: Step 1\n\n\n\n\n\nFigure 6.117: Step 2\n\n\n\n\n\n6.3.3.32 View update history of a record of student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 16 to navigate to student profile\n\n\n\n\n01\nFind the target classroom\nRecord data switch to target classroom\nFigure 6.118\n\n\n02\nFind the target record\n\nFigure 6.119\n\n\n03\nHover History in the Actions column\nA temporary card show update history\nFigure 6.120\n\n\n\n\n\n\nFigure 6.118: Step 1\n\n\n\n\n\nFigure 6.119: Step 2\n\n\n\n\n\nFigure 6.120: Step 3\n\n\n\n\n6.3.3.33 View list of classroom taking part in\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Dashboard\nNavigate to classroom list\nFigure 6.121\n\n\n\n\n\n\nFigure 6.121: Step 1\n\n\n\n\n\n6.3.3.34 View own records\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 23 to navigate to own record page\n\n\n\n\n\n\n\n\n\n6.3.3.35 Create key to view records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage verified keys\nNavigate to verified key list page\nFigure 6.122\n\n\n02\nClick on Create new key\nnew key created\nFigure 6.123\n\n\n\n\n\n\nFigure 6.122: Step 1\n\n\n\n\n\nFigure 6.123: Step 2\n\n\n\n\n\n6.3.3.36 View list of keys to view records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage verified keys\nNavigate to verified key list page\nFigure 6.124\n\n\n\n\n\n\nFigure 6.124: Step 1\n\n\n\n\n\n6.3.3.37 Remove a key to view records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 35 to navigate to the list of verified key page\n\n\n\n\n01\nFind the target key\n\nFigure 6.125\n\n\n01\nClick on Remove\nTarget key removed\nFigure 6.126\n\n\n\n\n\n\nFigure 6.125: Step 1\n\n\n\n\n\nFigure 6.126: Step 2\n\n\n\n\n\n6.3.3.38 Create key to view records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage stats key list\nNavigate to verified key list page\nFigure 6.127\n\n\n02\nSelect year and grade for the key\n\nFigure 6.128\n\n\n02\nClick on Create new key\nnew key created\nFigure 6.129\n\n\n\n\n\n\nFigure 6.127: Step 1\n\n\n\n\n\nFigure 6.128: Step 2\n\n\n\n\n\nFigure 6.129: Step 3\n\n\n\n\n\n6.3.3.39 View list of keys to view records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nClick on Manage stats key list\nNavigate to verified key list page\nFigure 6.130\n\n\n\n\n\n\nFigure 6.130: Step 1\n\n\n\n\n\n6.3.3.40 Remove a key to view records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n00\nFollow Feature 38 to navigate to the list of verified key page\n\n\n\n\n01\nFind the target key\n\nFigure 6.131\n\n\n01\nClick on Remove\nTarget key removed\nFigure 6.132\n\n\n\n\n\n\nFigure 6.131: Step 1\n\n\n\n\n\nFigure 6.132: Step 2\n\n\n\n\n\n6.3.3.41 View verified records of a student\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nPress Ctrl + K\nA command pallette show up\nFigure 6.133\n\n\n02\nSelect View verified data\nNavigate to verified data page\nFigure 6.134\n\n\n02\nInput key\nShow verified data of the provided key\nFigure 6.135\n\n\n\n\n\n\nFigure 6.133: Step 1\n\n\n\n\n\nFigure 6.134: Step 2\n\n\n\n\n\nFigure 6.135: Step 3\n\n\n\n\n\nFigure 6.136: Result\n\n\n\n\n6.3.3.42 View verified records of students\n\n\n\n\n\n\n\n\n\nStep\nDescription\nEffect\nFigure\n\n\n\n\n01\nPress Ctrl + K\nA command pallette show up\nFigure 6.137\n\n\n02\nSelect View verified data list\nNavigate to verified data page\nFigure 6.138\n\n\n02\nInput key\nShow verified data of the provided key\nFigure 6.139\n\n\n\n\n\n\nFigure 6.137: Step 1\n\n\n\n\n\nFigure 6.138: Step 2\n\n\n\n\n\nFigure 6.139: Step 3\n\n\n\n\n\nFigure 6.140: Result\n\n\n\n\n\n6.3.4 Troubleshooting"
  },
  {
    "objectID": "Appendix.html#references",
    "href": "Appendix.html#references",
    "title": "Appendix",
    "section": "References",
    "text": "References\n\n\nAndolfatto, David. 2018. “Blockchain: What It Is, What It Does,\nand Why You Probably Don’t Need One.” Blockchain 100\n(2): 87–95. https://doi.org/10.20955/r.2018.87-95.\n\n\n“Front Matter.” 2019. In Smart Contracts, I–IV.\nMohr Siebeck GmbH; Co. KG. http://www.jstor.org/stable/j.ctvn96h9r.1.\n\n\nLamb, Kirsten. 2018. “Blockchain and Smart Contracts: What the AEC\nSector Needs to Know.” Blockchain&SmartContracts,\nno. CDBB_REP_003 (July). https://doi.org/10.17863/CAM.26272.\n\n\nVihar Kurama, Prithiv S &. 2022. “What Is OCR and What Is It\nUsed For?” OCR, November. https://nanonets.com/blog/what-is-ocr."
  }
]