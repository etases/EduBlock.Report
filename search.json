[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EduBlock",
    "section": "",
    "text": "Preface\nThis is the final report of EduBlock"
  },
  {
    "objectID": "Introduction.html#overview",
    "href": "Introduction.html#overview",
    "title": "3  Project Introduction",
    "section": "3.1 Overview",
    "text": "3.1 Overview\n\n3.1.1 Project Information\n• Project name: BlockChain application in academy record management to support online University/College admissions\n• Project code: EduBlock\n• Group name: ETASES\n• Software type: Web app\n\n\n3.1.2 Project Team\n\n3.1.2.1 Supervisor\n\n\n\nFull Name\nEmail\nPhone Number\nTitle\n\n\n\n\nQuach Luyl Da\ndaql@fpt.edu.vn\n##########\nLecture\n\n\n\n\n\n3.1.2.2 Team Members\n\n\n\nFull Name\nEmail\nPhone Number\nTitle\n\n\n\n\nHuynh Quang Tien\nTienHQCE150130@fpt.edu.vn\n##########\nLeader\n\n\nLe Xuan Tu\nTuLXCE150344@fpt.edu.vn\n##########\nMember\n\n\nNguyen Dang Khoa\nKhoaNDCE140165@fpt.edu.vn\n0382554293\nMember\n\n\nCao Hoang Anh Uy\nUyCHACE150661@fpt.edu.vn\n##########\nMember\n\n\nNguyen Minh Khoi\nKhoiNMCE150103@fpt.edu.vn\n##########\nMember"
  },
  {
    "objectID": "Introduction.html#background",
    "href": "Introduction.html#background",
    "title": "3  Project Introduction",
    "section": "3.2 Background",
    "text": "3.2 Background\nKeeping track of and managing student records is typically time-consuming and challenging, needing approval from the school and certain permissible circumstances. When transferring transcripts from high school to university, this causes difficulties. When applying to universities based only on their transcripts, students must request permission from the institution in order to be given a temporary transcript, which is both time-consuming and inconvenient. My group then developed the concept for a web application that enables students to monitor their academic progress over the course of their education. In order to make the academic records stand out and add additional features to the web app that improve user experience, we used the Blockchain platform."
  },
  {
    "objectID": "Introduction.html#existing-systems",
    "href": "Introduction.html#existing-systems",
    "title": "3  Project Introduction",
    "section": "3.3 Existing Systems",
    "text": "3.3 Existing Systems\nIn the project, we use 4 main systems 1. Blockchain and Node system 2. Smart contract 3. Request server and client server 4. OCR\n\n3.3.1 Blockchain and Node system\nBlockchain, at its heart, is a distributed digital ledger that houses all types of data. The ownership of NFTs, bitcoin transactions, and smart contract definitions can all be recorded on a blockchain.\nThis type of data may be stored in any conventional database, but blockchain is distinct since it is totally decentralized. The blockchain database is held on numerous computers dispersed throughout the network, as opposed to being kept in one place by a centralized administrator. These solitary machines are referred as nodes.\nBlockchains can be public or private. Anyone can participate in a public blockchain, which allows them to access, write, or verify data on the blockchain. Because there is no single organization in charge of all the blockchain’s nodes, it is challenging to alter transactions that have been recorded on a public blockchain.\nA private blockchain, however, is managed by a company or group. Only that company or group has the authority to select users for the system, after which it has the right to modify the blockchain. Similar to an internal data storage system, this private blockchain procedure is spread over numerous nodes for added protection.\nThe following are some benefits of blockchain should be mentioned:\n• Transactions are more accurate since a blockchain transaction requires numerous nodes to verify it. This can reduce mistakes.\n• Absence of Middlemen Using blockchain, two parties to a transaction can confirm and finish it directly amongst themselves.\n• Additional Protection: Theoretically, it is nearly impossible to conduct fraudulent transactions on a decentralized network like blockchain. They would have to hack each node and alter each piece of data in the ledger in order to carry out fraudulent transactions.\nDespite its many benefits, blockchain still has the following drawbacks:\n• Limit on Transactions Per Second: Because Blockchain relies on a broader network to authorize transactions, its speed is constrained.\n• Risk of Asset Loss: Some digital assets, like cryptocurrencies in a blockchain wallet, are safeguarded using a cryptographic key. This key needs to be properly guarded. There is presently no means to recover a private cryptographic key that grants access to a digital asset, thus the asset will be lost forever if the owner misplaces it.\n\n\n3.3.2 Smart contract\nSmart Contract is a computer program, or a transaction protocol designed to automatically carry out, manage, and record legally significant events and activities in accordance with the conditions of a contract or agreement.\nSimply said, a stored program is run on the blockchain under predetermined conditions, ensuring that users receive immediate results free from the influence of middlemen.\nSmart Contracts are written as code on the blockchain and work with a straightforward “if/when… then…” statement. A network of computers that will act when a verification condition is satisfied.\nOnly parties who have been given permission may access the results; the transaction cannot be changed at will. If so, they must develop guidelines for dealing, trade standards, planning for all potential deviations, and dispute resolution. The signing of the contract will be more successful as a result of the participants’ satisfaction.\nPros:\n• When compared to using conventional contracts, smart contracts sometimes help save time and money.\n• High security means that data is virtually completely safe.\n• Because a smart contract is a collection of programmable code, developers can quickly alter and construct it into numerous contracts to accommodate various kinds of services and goods.\n• Furthermore, because Smart Contracts are decentralized systems, they cannot be hampered by outside parties. This contributes to greater operational efficiency, reduced operating expenses, and increased transparency.\nCons:\n• The information in the contract is essentially unchangeable because it is kept on a ledger. If the parties decide to alter some of the terms of the contract, this is advantageous but also disadvantageous.\n• It is difficult for hackers to attack since the system is very secure, unaffected by intermediaries, and data protection is guaranteed, but this also implies that it will be challenging to fix.\n\n\n3.3.3 Request server and client server\nA computer network paradigm with a client and a server as its two major parts. The server serves as the location for storing resources, setting up service applications, and handling client requests in this approach. The client is responsible for submitting the server’s request.\nProvides the network with the ability to concentrate applications and operations into one or more specific file services. Additionally enables simultaneous usage of the same resource by users, independent of their location.\nPros:\n• Ensure data integrity in case of errors.\n• Expanding your network is simple.\n• Possesses the capacity to withstand network overload.\n\n\n3.3.4 OCR\nOptical Character Recognition is referred to as OCR. This specialized software program reads text from picture files. This technology is used to transfer and enter data. It is referred to as a digital scanning instrument that specializes in identifying characters, handwriting, or written letters.\nA printed or handwritten page that is scanned using OCR is saved in the TIF file format. This graphic underneath the display is clear and easy to read. However, a sequence of images with either white or black dots will be present, depending on the computer. To check whether the markers match, the technology now examines each line of the image.\nPros:\n• OCR can scan and interpret words on a screen, which will be helpful to the blind and visually impaired. People with eyesight impairments can readily understand things from here.\n• Fast data entry: OCR ensures functionality to increase productivity and office job efficiency. The demand to scan papers is growing because the majority of people work in offices. By doing this, users will benefit from time savings and accurate, timely data updates.\nCons:\n• On the basis of clear photos, the majority of OCR software and applications can only reliably recognize roughly 80–90% of documents.\n• OCR is challenging to identify because the accessible images include backgrounds and text that are similar in colour."
  },
  {
    "objectID": "Introduction.html#business-opportunity",
    "href": "Introduction.html#business-opportunity",
    "title": "3  Project Introduction",
    "section": "3.4 Business Opportunity",
    "text": "3.4 Business Opportunity\nAlthough many high schools in Vietnam still keep paper records for post-graduation and enrolment in college or university, many now employ an online system to track students’ academic progress and inform parents of any latest outcomes. Because they must do it for both the paper records and the internet system, teachers find it challenging to update the information on their students. There is also a minimum level of transparency for students who wish to verify their information at any time because the internet system is centralized and only administrators and teachers have access to it. As a result, a system is required to help teachers and students manage student records in an easier, quicker, and more effective manner."
  },
  {
    "objectID": "Introduction.html#software-product-vision",
    "href": "Introduction.html#software-product-vision",
    "title": "3  Project Introduction",
    "section": "3.5 Software Product Vision",
    "text": "3.5 Software Product Vision\nWith the use of this system, students may simply keep track of changes to their grades in their academic records, reducing teacher grade entry errors. In order to gain rapid admission to graduate programs and colleges, students can also more conveniently retrieve their transcripts. High security and restrictions on data editing also assist in limiting the issue of phony points that are inaccurate representations of reality. Additionally, it eliminates challenges with entering grades into instructors’ school records because doing so will be quicker and easier with the aid of the system."
  },
  {
    "objectID": "Introduction.html#project-scope-limitations",
    "href": "Introduction.html#project-scope-limitations",
    "title": "3  Project Introduction",
    "section": "3.6 Project Scope & Limitations",
    "text": "3.6 Project Scope & Limitations\nA record management system will always be the best in terms of security and purity because it must, of course, assure data security. When interacting with and storing the data, always keep it intact and unaltered. Additionally, it must be user-friendly, with an interface that is clear and unambiguous and avoids misinterpretations of the translation or the information on the screen. Without the responsible user’s consent, data editing procedures cannot be carried out at will.\n\n3.6.1 Major Features\nFE-01: Using the blockchain platform, store data.\nFE-02: Transcripts can be updated by converting photos to alphanumeric data.\nFE-03: May replace paper school records entirely (electronic school records but have the nature of paper school records).\nFE-04: Enhancing the effort teachers put into entering grades.\nFE-05: Utilization dependability for admissions parties.\n\n\n3.6.2 Limitations & Exclusions\nLI-1: It is impossible to synchronize student counts between institutions due to the dispersed nature of the data.\nLI-2: The only time to use the system is at the end of the year because it only saves the semester’s overall grade (can be expanded later)\nLI-3: There is no option to switch schools (due to not processing student codes synchronously)"
  },
  {
    "objectID": "Management.html#overview",
    "href": "Management.html#overview",
    "title": "4  Project Management Plan",
    "section": "4.1 Overview",
    "text": "4.1 Overview\n\n4.1.1 WBS & Estimation\n\n\n4.1.2 Project Objectives\n\n\n4.1.3 Project Risks"
  },
  {
    "objectID": "Management.html#management-approach",
    "href": "Management.html#management-approach",
    "title": "4  Project Management Plan",
    "section": "4.2 Management Approach",
    "text": "4.2 Management Approach\n\n4.2.1 Project Process\n\n\n4.2.2 Quality Management\n\n\n4.2.3 Training Plan\n\n\n\n\n\n\n\n\n\nArea\nParticipants\nWhen, Duration\nWaiver Criteria\n\n\n\n\nBlockchain\nProject Team\n20/07/2022, 2 weeks\nMandatory\n\n\nHyperledger Fabric\nProject Team\n01/10/2022, 2 weeks\nMandatory for Backend Team\n\n\nJava, Javalin\nProject Team\n01/09/2022, 1 weeks\nMandatory"
  },
  {
    "objectID": "Management.html#master-schedule",
    "href": "Management.html#master-schedule",
    "title": "4  Project Management Plan",
    "section": "4.3 Master Schedule",
    "text": "4.3 Master Schedule"
  },
  {
    "objectID": "Management.html#project-organization",
    "href": "Management.html#project-organization",
    "title": "4  Project Management Plan",
    "section": "4.4 Project Organization",
    "text": "4.4 Project Organization"
  },
  {
    "objectID": "Management.html#project-communication",
    "href": "Management.html#project-communication",
    "title": "4  Project Management Plan",
    "section": "4.5 Project Communication",
    "text": "4.5 Project Communication\n\n4.5.1 Communication Plan\n\n\n\n\n\n\n\n\n\n\nItem\nTarget\nPurpose\nWhen\nType\n\n\n\n\nDiscord\nProject Team\nReview meeting & Status report\nMonday, Friday\nVoice, Remote\n\n\nGoogle Meeting\nProject Team & Supervisor\nReview meeting, Sprint revision & Closeup\nWednesday\nVoice, Remote\n\n\nMessenger\nProject Team & Supervisor\nMeeting planning, Q&A & Status report\nEveryday\nText, Remote\n\n\nFU Library\nProject Team\nPair programming & Code review\nPlanned\nOffline\n\n\n\n\n\n4.5.2 External Interfaces"
  },
  {
    "objectID": "Management.html#configuration-management",
    "href": "Management.html#configuration-management",
    "title": "4  Project Management Plan",
    "section": "4.6 Configuration Management",
    "text": "4.6 Configuration Management\n\n4.6.1 Tools & Infrastructures\n\n4.6.1.1 Common\n\n\n\nType\nTool\n\n\n\n\nVersion Control\nGit, GitHub\n\n\nUML\nPlantUML, Graphviz\n\n\nDeployment\nDocker\n\n\nProject Management\nQuarto, GitHub Projects\n\n\n\n\n\n\n4.6.2 Backend\n\n\n\n\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nJava\n\n\nLibrary\nJavalin, Fabric SDKs, HSCore, Guava, Genson, EvalEx, JWT\n\n\nCompiler\nJDK, Lombok\n\n\nUI\nTinyLog, JLine, Fabric CLI\n\n\nDBMS\nH2, Hibernate, Minifabric\n\n\nIDE / Editor\nIntelliJ IDEA, VSCode\n\n\n\n\n\n4.6.3 Frontend\n\n\n\nType\nTool\n\n\n\n\nProgramming Language\nTypeScript\n\n\nLibrary\nReact\n\n\nCompiler\nNode\n\n\nUI\nReact\n\n\nIDE / Editor\nVSCode\n\n\n\n\n\n4.6.4 Document Management\nWe use Quarto to build documents from Markdown files and use GitHub to manage the files and their changes. A participant will create a new branch to edit the files, create pull requests and wait for the project manager to review the changes and merge to the main branch. Then, it’ll be built in three outputs: a website using GitHub Pages for visualization, A PDF document & A MS-Word document.\n\n\n4.6.5 Source Code Management\nWe manage the source code by using GitHub. Endpoints of the project will be upload into separated repositories. Once the code is changed, the participant will create a new branch, create a relevant pull request, and wait for code owners to review and merge to the main branch."
  },
  {
    "objectID": "Requirement.html#overall-description",
    "href": "Requirement.html#overall-description",
    "title": "5  Software Requirement Specification",
    "section": "5.1 Overall Description",
    "text": "5.1 Overall Description\n\n5.1.1 Product Overview\nThis is the software requirement specification for the project “EduBlock”. EduBlock is an web-application that will help the school to manage their student’s records, more specifically, the students and teachers can reduce paper’s work to manage their records. Lately, the school has been using paper to manage their student’s record, which is not efficient and not environmental friendly. EduBlock will help the school to manage their student’s records in a more efficient way, although there are some other 3rd party applications that can help school to keep their student’s records nowdays, but it is not really efficient and safe, our application use blockchain technology to make sure the data is safe and secure. Every step of the process that need to be work with the records will be tracked by EduBlock, so the school can easily track the data changes and make sure the data is not being tampered.\n\n\n5.1.2 Business Rules\n\n\n\n\n\n\n\nID\nRules Description\n\n\n\n\nBR-1\nThe application will be used by the students, teachers, staff and admin.\n\n\nBR-2\nOnly Staff have permission to manage classroom including create new class, edit class, assign or remove teacher from the class, assign student to class, remove student from class.\n\n\nBR-3\n\n\n\nBR-4\nOnly Teacher who teach the subject can edit the grade of the student.\n\n\nBR-5\nStudent can only view their class, profile and academic record."
  },
  {
    "objectID": "Requirement.html#user-requirements",
    "href": "Requirement.html#user-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.2 User Requirements",
    "text": "5.2 User Requirements\n\nThe Academic record management web-app has four active actors: Student, Teacher, Staff and Administrator.\nStudents can view their academic record.\nTeachers can manage their class and view their students’ academic record.\nStaff can manage the classroom and view the academic record of the students, assign or delete teacher from the class, assign student to class, create new class.\n\n\n5.2.1 a. System Actors\n\n\n\n\n\n\n\n\nID\nActor\nDescription\n\n\n\n\n1\nADMIN\nAdmin is the person who has the highest authority in the system. Admin can manage the account of the other actors.\n\n\n2\nSTAFF\nStaff is the person who has the authority to manage the classroom. Staff can assign or remove teacher from the class, assign student to class, remove student from class.\n\n\n3\nTEACHER\nTeacher is the person who has the authority to manage their class. Teacher can view their students’ academic record, subject teacher can send request to edit student grade.\n\n\n4\nSTUDENT\nStudent is the person who has the authority to view their academic record.\n\n\n\n\n\n5.2.2 b. Use cases list\n\n\n5.2.3 Admin Features\n\n5.2.3.1 UC-1 Admin Login\n\nDescription: Admin can login with their username and password.\nActors: Admin.\nPreconditions: Admin has an account.\nPostconditions: Admin can access the system.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin enters their username and password.\nSystem verifies the username and password.\nSystem displays the dashboard.\n\nExceptions:\n\nIf the username or password is incorrect, the system will display an error message.\n\n\n\n\n5.2.3.2 UC-2 Admin view list of accounts\n\nDescription: Admin can view list of all accounts.\nActors: Admin\nPreconditions: Admin is logged in.\nPostconditions: System show list of all accounts.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nSystem show list of all accounts.\n\nAlternate Flow:\n\nSystem displays notification “No account found” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n5.2.3.3 UC-3 Admin view account details\n\nDescription: Admin can view account details.\nActors: Admin\nPreconditions: Admin is logged in.\nPostconditions: System show account details.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nAdmin click on “Details” (human icon) on actions column.\nSystem show account details.\n\nAlternate Flow:\n\nSystem displays notification “No account found” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n5.2.3.4 UC-4 Admin create (multiple) account\n\nDescription: Admin can create (multiple) account for each role such as staff, student, teacher.\nActors: Admin\nPreconditions: Admin is logged in.\nPostconditions: System create (multiple) account.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nAdmin click on “Create” button.\nAdmin fill in the form.\nAdmin click on “Create” button.\nSystem create account.\n\nAlternate Flow:\n\nAdmin can create multiple accounts by clicking on “Add Account” button.\nAdmin fill in the form.\nAdmin click on “Create” button.\nSystem create accounts.\n\nException:\n\nSystem displays notification if the form is not filled correctly.\n\n\n\n\n5.2.3.5 UC-5 Admin search account\n\nDescription: Admin can search account by text, username, email, id, first name and last name.\nActors: Admin\nPreconditions: Admin is logged in.\nPostconditions: System show list of accounts that match the search criteria.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nAdmin click on “Search” button.\nAdmin input text to search account.\nSystem show list of accounts that match the search criteria.\n\nAlternate Flow:\n\nAdmin add search criteria by clicking on Search in” field.\nAdmin choose which criteria to search and combine with search by text.\nsystem show list of accounts that match the search criteria.\n\nException:\n\nSystem displays notification “No account found” if there is no account that match the search criteria.\n\n\n\n\n5.2.3.6 UC-6 Admin update their profile\n\nDescription: Admin can update their profile’s information.\nActors: Admin\nPreconditions: Admin is logged in.\nPostconditions: System update admin’s profile.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmmin click on their avatar above logout button at bottom left.\nAdmin click on “Update” button at top right corner.\nA form will appear, admin then input their new information.\nAdmin click “Submit”.\nSystem update admin’s information and show success message.\n\nAlternate Flow:\n\nSystem displays notification if the form is not filled correctly.\n\nException:\n\nSystem displays notification if the form is not filled correctly.\n\n\n\n\n5.2.3.7 UC-7 Admin change password of other account\n\nDescription: Admin can change password of other account.\nActors: Admin\nPreconditions: Admin is logged in.\nPostconditions: System change password of target account.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin click on “Account”.\nSystem show list of all account.\nAdmin click on “Change Password” (lock icon) on actions column.\nAdmin input new password.\nAdmin click “Submit”.\nSystem change password of target account and show success message.\n\nAlternate Flow:\n\nSystem displays notification if passowrd is invalid.\n\nException:\n\nSystem displays notification if passowrd is invalid.\n\n\n\n\n5.2.3.8 UC-8 Admin get grade report and get classification report in a year\n\nDescription: Admin get grade report or classification report in a year.\nActors: Admin\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPostconditions: System export report to admin’s computer.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAt dashboard Admin choose year and grade to get report.\nAdmin click “Get Report” button.\nSystem ready to export report to admin’s computer.\nAdmin choose where to save export and click “Save”.\n\nAlternate Flow:\n\nAdmin click “Get Classification Report” to get classification report.\nSystem ready to export classification report to Admin’s computer.\nAdmin choose where to save export and click “Save”.\n\nException:\n\nButton will be disabled if there is nothing to report.\n\n\n\n\n5.2.3.9 UC-9 Admin get report of a class\n\nDescription: Admin get report of a class.\nActors: Admin\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPostconditions: System export report to admin’s computer.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin choose “Classroom” on sidebar.\nSystem show list of all clases.\nAdmin click on “Details” button on actions column to view detail of a class.\nOn details page Admin click “Get classroom report” button.\nSystem ready to export report to admin’s computer.\nAdmin choose where to save export and click “Save”.\n\nException:\n\nIf class don’t exist Admin will not able to get report.\n\n\n\n\n5.2.3.10 UC-10 Admin view classrooms list\n\nDescription: Admin can view list of all classrooms.\nActors: Admin\nPreconditions: Admin is logged in.\nPostconditions: System show list of all classrooms.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin click on “Classroom” on sidebar.\nSystem show list of all classrooms.\n\nAlternate Flow:\n\nSystem displays notification “No classroom found” if there is no classroom.\n\nException:\n\nSystem displays notification “No classroom found” if there is no classroom.\n\n\n\n\n5.2.3.11 UC-11 Admin view classroom details\n\nDescription: Admin can view details of a classroom.\nActors: Admin\nPreconditions:\n\nAdmin is logged in.\nClassroom exists.\n\nPostconditions: System show details of a classroom.\nFlow of Events:\n\nAdmin go to EduBlock.\nAdmin login with username and password.\nAdmin click on “Classroom” on sidebar.\nSystem show list of all classrooms.\nAdmin click on “Details” button on actions column to view detail of a classroom.\nSystem show details of a classroom.\n\nAlternate Flow:\n\nSystem displays notification “Classroom not found” if classroom don’t exist.\n\nException:\n\nSystem displays notification “Classroom not found” if classroom don’t exist.\n\n\n\n\n\n5.2.4 Staff Features\n\n5.2.4.1 UC-12 Staff Login\n\nDescription: Staff can login with their username and password.\nActors: Staff.\nPreconditions: Staff has an account.\nPostconditions: Staff can access the system.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff enters their username and password.\nSystem verifies the username and password.\nSystem redirect Staff to dashboard.\n\nExceptions:\n\nIf the username or password is incorrect, the system will display an error message.\n\n\n\n\n5.2.4.2 UC-13 Staff view list of accounts\n\nDescription: Staff can view list of all accounts.\nActors: Staff\nPreconditions: Staff is logged in.\nPostconditions: System show list of all accounts.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Account”.\nSystem show list of all accounts.\n\nAlternate Flow:\n\nSystem displays notification There’s nothing do show” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n5.2.4.3 UC-14 Staff view account details\n\nDescription: Staff can view account details.\nActors: Staff\nPreconditions: Staff is logged in.\nPostconditions: System show account details.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Account”.\nStaff click on “Details” (human icon) on actions column.\nSystem show account details.\n\nAlternate Flow:\n\nSystem displays notification “No account found” if there is no account.\n\nException:\n\nSystem displays notification “No account found” if there is no account.\n\n\n\n\n5.2.4.4 UC-15 Staff search account\n\nDescription: Staff can search account by text, username, email, id, first name and last name.\nActors: Staff\nPreconditions: Staff is logged in.\nPostconditions: System show list of accounts that match the search criteria.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Account”.\nStaff click on “Search” button.\nStaff input text to search account.\nSystem show list of accounts that match the search criteria.\n\nAlternate Flow:\n\nAdmin add search criteria by clicking on Search in” field.\nAdmin choose which criteria to search and combine with search by text.\nsystem show list of accounts that match the search criteria.\n\nException:\n\nSystem displays notification “No account found” if there is no account that match the search criteria.\n\n\n\n\n5.2.4.5 UC-16 Staff view class list\n\nDescription: Staff can view list of all classes.\nActors: Staff\nPreconditions: Staff is logged in.\nPostconditions: System show list of all classes.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nSystem show list of all classes.\n\nAlternate Flow:\n\nSystem displays notification “No class found” if there is no class.\n\nException:\n\nSystem displays notification “No class found” if there is no class.\n\n\n\n\n5.2.4.6 UC-17 Staff create new class\n\nDescription: Staff create a new class.\nActors: Staff\nPreconditions: Staff is logged in.\nPostconditions: System create a new class.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Create” button.\nA form will appear, staff then input class’s information and choose homeroom teacher.\nStaff click “Create classroom”.\nSystem create a new class and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the form is not filled correctly.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n5.2.4.7 UC-18 Staff view class details\n\nDescription: Staff view details of a class.\nActors: Staff\nPreconditions: Staff is logged in.\nPostconditions: System show class details.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (details icon) on actions column.\nSystem show class details.\n\nAlternate Flow:\n\nSystem displays notification “No class found” if there is no class.\n\nException:\n\nSystem displays notification “No class found” if there is no class.\n\n\n\n\n5.2.4.8 UC-19 Staff edit class\n\nDescription: Staff edit class’s information.\nActors: Staff\nPreconditions: Staff is logged in.\nPostconditions: System edit class’s information.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Update details”.\nA form will appear, staff then edit class’s information.\nSystem edit class’s information and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the form is not filled correctly.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n5.2.4.9 UC-20 Staff view student of a class\n\nDescription: Staff view list of students in a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPostconditions: System show list of students in a class.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Students”.\nSystem show list of students of the class.\n\nAlternate Flow:\n\nSystem displays notification “No student found” if there is no student in the class.\n\nException:\n\nSystem displays notification “No student found” if there is no student in the class.\n\n\n\n\n5.2.4.10 UC-21 Staff add students to a class\n\nDescription: Staff add students to a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPostconditions: System add students to a class.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Students”.\nSystem show list of students of the class.\nStaff click “Add students”.\nA form will appear, staff then choose students to add to the class.\nStaff click “Add student” to add more students.\nStaff click “Confirm”.\nSystem add student to the class and show success message.\n\nAlternate Flow:\n\nIn add student form Staff click “Add student” to add more student.\nStaff choose students to add to the class.\nStaff click “Confirm”.\nSystem add students to the class and show success message.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\nSystem displays error notification if the student is already in the class.\nSystem displays error notification if no student is selected.\n\n\n\n\n5.2.4.11 UC-22 Staff view student details\n\nDescription: Staff view details of a student.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nStudent exists.\nStudent is in a class.\n\nPostconditions: System show student details.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Students”.\nSystem show list of students of the class.\nStaff click “Details” (icon) on actions column.\nSystem show student details.\n\nAlternate Flow:\n\nSystem displays notification “No student found” if there is no student in the class.\n\nException:\n\nSystem displays notification “No student found” if there is no student in the class.\n\n\n\n\n5.2.4.12 UC-23 Staff edit student information\n\nDescription: Staff edit student’s information.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nStudent exists.\nStudent is in a class.\n\nPostconditions: System edit student’s information.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Students”.\nSystem show list of students of the class.\nStaff click “Details” (icon) on actions column.\nSystem show student details.\nStaff click “Update” button.\nA form will appear, staff then edit student’s information.\nSystem edit student’s information and show success message.\n\nAlternate Flow:\n\nStaff click “Reset” button in case they want to reset the form.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n5.2.4.13 UC-24 Staff remove student from a class\n\nDescription: Staff remove student from a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\nStudent exists.\nStudent is in a class.\n\nPostconditions: System remove student from the class.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Students”.\nSystem show list of students of the class.\nStaff click “Remove” (icon) on actions column.\nSystem remove student from the class and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the student is not in the class.\n\nException:\n\nSystem displays error notification if the student is not in the class.\n\n\n\n\n5.2.4.14 UC-25 Staff view teacher of a class\n\nDescription: Staff view list of teachers in a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPostconditions: System show list of teachers in a class.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Teachers”.\nSystem show list of teachers of the class.\n\nAlternate Flow:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\nException:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\n\n\n\n5.2.4.15 UC-26 Staff assign teacher(s) to a class\n\nDescription: Staff assign teacher(s) to a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPostconditions: System assign teacher(s) to a class.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Teachers”.\nSystem show list of teachers of the class.\nStaff click “Add teachers”.\nA form will appear, staff then choose teacher and the subject they will teach.\nStaff click “Confirm”.\nSystem add teacher to the class and show success message.\n\nAlternate Flow:\n\nStaff click “Add teacher” to add more teachers.\nStaff choose teacher and subject.\nStaff click “Confirm”.\nSystem add teachers to the class and show success message.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\nSystem displays error notification if the teacher is already in the class.\nSystem displays error notification if no teacher is selected.\nSystem displays error notification if no subject is selected.\n\n\n\n\n5.2.4.16 UC-27 Staff remove teacher from a class\n\nDescription: Staff remove teacher from a class.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\nTeacher exists.\nTeacher is in a class.\n\nPostconditions: System remove teacher from the class.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on “Classroom”.\nStaff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Teachers”.\nSystem show list of teachers of the class.\nStaff click “Remove” (icon) on actions column.\nSystem remove teacher from the class and show success message.\n\nAlternate Flow:\n\nSystem displays error notification if the teacher is not in the class.\n\nException:\n\nSystem displays error notification if the teacher is not in the class.\n\n\n\n\n5.2.4.17 UC-28 Staff edit their profile\n\nDescription: Staff edit their profile.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\n\nPostconditions: System edit staff’s profile.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nStaff click on their avatar at bottom left of screen.\nSystem display staff’s profile.\nStaff click “Update” button.\nA form will appear, staff then edit their information.\nStaff click “Submit” button.\nSystem edit staff’s information and show success message.\n\nAlternate Flow:\n\nStaff click Change Password button to change their password.\nA form will appear, staff then edit their password.\nStaff click “Submit” button.\nSystem edit staff’s password and show success message.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n5.2.4.18 UC-29 Staff print student record\n\nDescription: Staff print student’s records.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nStudent exists.\n\nPostconditions: System will save a file for staff to print student’s records.\nFlow of Events:\n\nStaff go to EduBlock.\nTeacher login with username and password.\nOn classroom list Staff click on “Details” (icon) on actions column.\nSystem show class details.\nStaff click “Students”.\nSystem show list of students of the class.\nStaff choose a student and click “Details” (icon) on actions column.\nSystem show student details.\nStaff click “Print Record” button at Record session of student profile.\nSystem show print preview of student’s records.\nStaff click “Save” button.\nSystem save student’s records to teacher’s computer.\nStaff using printer to print student’s records.\n\nAlternate Flow:\n\nOn save, staff click “Cancel” button to cancel.\n\n\n\n\n5.2.4.19 UC-30 Staff get grade report and get classification report in a year\n\nDescription: Staff get grade report or classification report in a year.\nActors: Staff\nPreconditions:\n\nStaff is logged in.\nClass exists.\n\nPostconditions: System export report to staff’s computer.\nFlow of Events:\n\nStaff go to EduBlock.\nStaff login with username and password.\nAt dashboard Staff choose year and grade to get report.\nStaff click “Get Report” button.\nSystem ready to export report to staff’s computer.\nStaff choose where to save export and click “Save”.\n\nAlternate Flow:\n\nStaff click “Get Classification Report” to get classification report.\nSystem ready to export classification report to staff’s computer.\nStaff choose where to save export and click “Save”.\n\nException:\n\nButton will be disabled if there is nothing to report.\n\n\n\n\n\n5.2.5 Teacher Features\n\n5.2.5.1 UC-31 Teacher Login\n\nDescription: Teacher login to EduBlock.\nActors: Teacher\nPreconditions:\n\nTeacher has an account.\n\nPostconditions: System login teacher to EduBlock.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher go to login page.\nTeacher enter username and password.\nTeacher click “Login” button.\nSystem authorize and login teacher to EduBlock.\n\nAlternate Flow:\n\nSystem displays error notification if the username or password is incorrect.\n\nException:\n\nSystem displays error notification if the username or password is incorrect.\n\n\n\n\n5.2.5.2 UC-32 Teacher view their profile\n\nDescription: Teacher view their profile.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\n\nPostconditions: System display teacher’s profile.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nTeacher click on their avatar at bottom left of screen.\nSystem display teacher’s profile.\n\n\n\n\n5.2.5.3 UC-33 Teacher change their password\n\nDescription: Teacher change their password.\nActors: Teacher\nPostconditions: System successfully change their password.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nTeacher click on their avatar at bottom left of screen.\nSystem display teacher’s profile.\nTeacher click “Change Password” button.\nSystem display form to change password.\nTeacher enter old password, new password and confirm new password.\nTeacher click “Submit” button.\nSystem change teacher’s password and show success message.\n\nAlternate Flow:\n\nTeacher click con “X” button to cancel.\n\nException:\n\nSystem displays error notification if the password is invalid.\n\n\n\n\n5.2.5.4 UC-34 Teacher view their classes\n\nDescription: Teacher view their classes.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\n\nPostconditions: System display teacher’s classes.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn login succes, system will redirect teach to dashboard where their classes will be display.\n\nAlternate Flow:\n\nSystem displays notification “No class found” if there is no class.\n\nException:\n\nSystem displays notification “No class found” if there is no class.\n\n\n\n\n5.2.5.5 UC-35 Teacher class details\n\nDescription: Teacher view class details.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nClass exists.\nTeacher is assigned to the class.\nTeacher is in the class.\n\nPostconditions: System display class details.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nAt dashboard Teacher choose a class and click on “Details” (icon) on actions column.\nSystem show class details.\n\nAlternate Flow:\n\nSystem displays error notification if the class is not found.\n\nException:\n\nSystem displays error notification if the class is not found.\n\n\n\n\n5.2.5.6 UC-36 Teacher view students in a class\n\nDescription: Teacher view list of students in a class.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nClass exists.\nTeacher is assigned to the class.\nTeacher is in the class.\n\nPostconditions: System show list of students in a class.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn dashboard Teacher click on “Details” (icon) on actions column.\nSystem show class details.\nTeacher click “Students”.\nSystem show list of students of the class.\n\nAlternate Flow:\n\nSystem displays notification “No student found” if there is no student in the class.\n\nException:\n\nSystem displays notification “No student found” if there is no student in the class.\n\n\n\n\n5.2.5.7 UC-37 Teacher view teachers in the class\n\nDescription: Teacher view list of teachers who teach in the class.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nClass exists.\nTeacher is assigned to the class.\nTeacher is in the class.\n\nPostconditions: System show list of teachers in the class.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn dashboard Teacher click on “Details” (icon) on actions column.\nSystem show class details.\nTeacher click “Teachers”.\nSystem show list of teachers of the class.\n\nAlternate Flow:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\nException:\n\nSystem displays notification “No teacher found” if there is no teacher in the class.\n\n\n\n\n5.2.5.8 UC-38 Teacher view Student details\n\nDescription: Teacher view student details.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPostconditions: System show student details.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn dashboard Teacher click on “Details” (icon) on actions column.\nSystem show class details.\nTeacher click “Students”.\nSystem show list of students of the class.\nTeacher click “Details” (icon) on actions column.\nSystem show student details.\n\nAlternate Flow:\n\nSystem displays “Student not found” if no student in class.\n\nException:\n\nSystem displays “Student not found” if no student in class.\n\n\n\n\n5.2.5.9 UC-39 Teacher print student’s records\n\nDescription: Teacher export student’s records.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPostconditions: System export student’s records.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem show class details.\nTeacher click “Students”.\nSystem show list of students of the class.\nTeacher click “Details” (icon) on actions column.\nSystem show student details.\nTeacher scroll down to “Record” section.\nTeacher choose class to print.\nTeacher click “Print Record” button at Record session of student profile.\nSystem show print preview of student’s records.\nTeacher click “Save” button.\nSystem save student’s records to teacher’s computer.\nTeacher then use printer to print saved file.\n\nAlternate Flow:\n\nOn save, teacher click “Cancel” to cancel the save.\n\n\n\n\n5.2.5.10 UC-40 Subject teacher send request to edit student’s grade\n\nDescription: Subject teacher send request to edit student’s grade.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPostconditions: System send request to edit student’s grade.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem show class details.\nTeacher click “Students”.\nSystem show list of students of the class.\nTeacher click “Details” (icon) on actions column.\nSystem show student details.\nTeacher click “Request Update” (icon) on Action column at Record session of student profile.\nSystem show edit grade form.\nTeacher fill the form and click “Request” button.\nSystem send request to edit student’s grade.\n\nAlternate Flow:\n\nSystem displays error notification if the form is not filled correctly.\n\nException:\n\nSystem displays error notification if the form is not filled correctly.\n\n\n\n\n5.2.5.11 UC-41 Teacher upload Record using image\n\nDescription: Teacher upload Record using image.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPostconditions: System analyze and generate Record from the image.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem show class details.\nTeacher click “Students”.\nSystem show list of students of the class.\nTeacher click “Details” (icon) on actions column.\nSystem show student details.\nTeacher click “Upload Record” button at Record session of student profile.\nSystem show upload methods.\nTeacher choose upload methods.\nTeacher upload image.\nSystem analyze and generate Record from the image.\nTeacher click “Upload” button.\nSystem save the Record.\n\nAlternate Flow:\n\nIf system can’t recognize the image it’s will show notification.\n\nException:\n\nIf system can’t recognize the image it’s will show notification.\n\n\n\n\n5.2.5.12 UC-42 Teacher view list of Pending Records’s Request and Approve or Reject\n\nDescription: Teacher view list of pending records’s request.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\nSubject teacher sent request to edit student’s grade.\n\nPostconditions: System show list of pending records’s request.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nTeacher click on “Pending Verification” button at sidebar.\nSystem show list of pending records’s request.\nTeacher click “Approve” (check icon) on Action column to approve the request.\nSystem approve the request.\n\nAlternate Flow:\n\nTeacher click “Reject” (close icon) on Action column to reject the request.\nSystem reject the request.\n\nException:\n\nSystem displays “No pending request” if there is no pending request.\n\n\n\n\n5.2.5.13 UC-43 Teacher view history of student’s records changes\n\nDescription: Teacher view history of student’s records changes.\nActors: Teacher\nPreconditions:\n\nTeacher is logged in.\nStudent exists.\nTeacher is assigned to the class.\nTeacher is in the class.\nStudent is in the class.\n\nPostconditions: System show history of student’s records changes.\nFlow of Events:\n\nTeacher go to EduBlock.\nTeacher login with username and password.\nOn dashboard (classroom list) Teacher click on “Details” (icon) on actions column.\nSystem show class details.\nTeacher click “Students”.\nSystem show list of students of the class.\nTeacher click “Details” (icon) on actions column.\nSystem show student details.\nTeacher scroll down to “Record” section.\nTeacher hover on “History” button(icon) at Action columns of Record session.\nSystem show history of student’s records changes.\n\nAlternate Flow:\n\nSystem displays nothing if there is no changes.\n\nException:\n\nSystem displays nothing if there is no changes.\n\n\n\n\n\n5.2.6 Student Features\n\n5.2.6.1 UC-44 Student login\n\nDescription: Student can login to EduBlock.\nActors: Student\nPreconditions: Student has an account.\nPostconditions: EduBlock bring student to dashboard.\nFlow of Events:\n\nStudent go to EduBlock.\nStudent click “Login” at homepage.\nSystem redirect student to login page.\nStudent enter username and password.\nSystem check the credentials.\nSystem bring student to dashboard.\n\nAlternate Flow:\n\nSystem displays error notification if the credentials is not correct.\n\nException:\n\nSystem displays error notification if the credentials is not correct.\n\n\n\n\n5.2.6.2 UC-45 Student view list of class they are in\n\nDescription: Student view list of class they are in.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPostconditions: System show list of class they are in.\nFlow of Events:\n\nStudent go to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nClasses are listed on the dashboard.\n\nAlternate Flow:\n\nSystem displays “No class” if there is no class.\n\nException:\n\nSystem displays “No class” if there is no class.\n\n\n\n\n5.2.6.3 UC-46 Student view class details\n\nDescription: Student view class details.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPostconditions: System show class details.\nFlow of Events:\n\nStudent go to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nClasses are listed on the dashboard.\nStudent click “Details” (icon) on actions column.\nSystem show class details.\n\nAlternate Flow:\n\nSystem displays “No class” if there is no class.\n\nException:\n\nSystem displays “No class” if there is no class.\n\n\n\n\n5.2.6.4 UC-47 Student view teachers in the class\n\nDescription: Student view teachers in the class.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPostconditions: System show list of teachers in the class.\nFlow of Events:\n\nStudent go to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nClasses are listed on the dashboard.\nStudent click “Details” (icon) on actions column.\nSystem show class details.\nStudent click “Teachers”.\nSystem show list of teachers in the class.\n\nAlternate Flow:\n\nSystem displays “No teacher” if there is no teacher.\n\nException:\n\nSystem displays “No teacher” if there is no teacher.\n\n\n\n\n5.2.6.5 UC-48 Student view their profile\n\nDescription: Student view their profile.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPostconditions: Student is able to view their profile.\nFlow of Events:\n\nStudent go to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nStudent click on their avatar at bottom left corner.\nSystem show student details.\n\n\n\n\n5.2.6.6 UC-49 Student view their academic records\n\nDescription: Student view their academic records.\nActors: Student\nPreconditions:\n\nStudent is logged in.\nStudent is in the class.\n\nPostconditions: System show their academic records.\nFlow of Events:\n\nStudent go to EduBlock.\nStudent login with username and password.\nSystem bring student to dashboard.\nStudent click on their avatar at bottom left corner.\nSystem show student details.\nStudent scroll down to “Record” section.\nStudent view their academic records.\n\nAlternate Flow:\n\nAt dashboard, student click on “View My Record” (icon) on actions column.\nSystem show their academic records.\nStudent view their academic records.\n\nException:\n\nSystem displays “No record” if there is no record."
  },
  {
    "objectID": "Requirement.html#functional-requirements",
    "href": "Requirement.html#functional-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.3 Functional Requirements",
    "text": "5.3 Functional Requirements\n\n5.3.1 System Functional Overview\nThe system is designed to provide a platform for school to manage their student’s record, information with high security and pivate."
  },
  {
    "objectID": "Requirement.html#non-functional-requirements",
    "href": "Requirement.html#non-functional-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.4 Non-Functional Requirements",
    "text": "5.4 Non-Functional Requirements\n\n5.4.1 External Interfaces\n\nEduBlock will be integrated with blockchain technology.\nThe application interact with user through web browser.\n\n\n\n5.4.2 Quality Attributes\nOur application ensures the following quality attributes:\n\nUsability: The application is easy to use and understand. The application is designed to be intuitive and easy to use. The application is designed to be used by both teachers and students.\nReliability: The application is designed to be reliable. The application is designed to be used with blockchain technology to ensure data integrity.\nPerformance: The application is designed to be fast and responsive.\nSecurity: The application is designed to be secure. The application is designed to be used with blockchain technology to ensure data integrity.\nMaintainability: The application is designed to be easy to maintain, update, and extend.\nPortability: The application is designed to be portable.\nScalability: The application is designed to be scalable and can be extended to support more users and more features.\nInteroperability: The application is designed to be interoperable with other applications.\nReusability: The application is designed to be reusable.\nTestability: The application is designed to be easy to test."
  },
  {
    "objectID": "Requirement.html#other-requirements",
    "href": "Requirement.html#other-requirements",
    "title": "5  Software Requirement Specification",
    "section": "5.5 Other Requirements",
    "text": "5.5 Other Requirements"
  },
  {
    "objectID": "Design.html#overall-description",
    "href": "Design.html#overall-description",
    "title": "6  Software Design Description",
    "section": "6.1 Overall Description",
    "text": "6.1 Overall Description\n\n6.1.1 Assumptions\n\n\n6.1.2 Design Constraints\n\n\n6.1.3 Technology Suggestion"
  },
  {
    "objectID": "Design.html#system-architecture-design",
    "href": "Design.html#system-architecture-design",
    "title": "6  Software Design Description",
    "section": "6.2 System Architecture Design",
    "text": "6.2 System Architecture Design\n\n6.2.1 Overall Architecture\n\n\n\nFigure 6.1: Overall architecture\n\n\n\n\n\n\n\n\n\nComponent\nDescription\n\n\n\n\nChain Node (CN)\nA node of the blockchain. This stores the records and handles the history and transaction requests from the Request Server (Change/View the score, information, etc.)\n\n\nRequest Server\nThe off-chain backend of a CN. This stores the pending requests from the user and is the only way to call a request to the CN. Each Request Server may have a different way to handle user requests (Voting, Direct Request, etc.)\n\n\nFrontend Server\nProvide the UX/UI for interacting with the Request Server\n\n\n\n\n\n6.2.2 System Architecture\n\n\n6.2.3 Package Diagram\n\n\n\nFigure 6.2: Package Diagram of Request Server\n\n\n\n\n\n\n\n\n\nPackage Name\nDescription\n\n\n\n\nroot\nMain classes\n\n\napi\nThe abstract classes & interfaces\n\n\nentity\nThe entities of the database\n\n\nhandler\nThe handlers of the endpoints of the REST API server\n\n\ninternal\nInternal classes used by other packages\n\n\ninternal/student\nThe instances of the Student Updater\n\n\nmodel\nThe input / output objects\n\n\nmodel/input\nThe input objects for the handlers\n\n\nmodel/output\nThe output objects returned from the handlers\n\n\nmodel/fabric\nThe models used internally by the student updater"
  },
  {
    "objectID": "Design.html#system-detailed-design",
    "href": "Design.html#system-detailed-design",
    "title": "6  Software Design Description",
    "section": "6.3 System Detailed Design",
    "text": "6.3 System Detailed Design\n\n6.3.1 Class Specification\n\n\n\nFigure 6.3: Class Diagram of the Request Server\n\n\n\n\n6.3.2 Account\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\nusername\nString\nThe username\n\n\nhashedPassword\nString\nThe hashed password\n\n\nsalt\nString\nThe salt of the password\n\n\nrole\nString\nThe role of the account\n\n\ncreatedAt\nDate\nThe date when the account was created\n\n\nclassrooms\nList ClassTeacher\nThe list of references to the classrooms that the account participates if its role is Teacher\n\n\nrecordEntries\nList RecordEntry\nThe list of record entries related to the subjects the the account is teaching if its role is Teacher\n\n\nrequestedRecordEntries\nList RecordEntry\nThe list of verified record entries that the account requested to changes\n\n\napprovedRecordEntries\nList RecordEntry\nThe list of verified record entries that the account accepted\n\n\npendingRecordEntries\nList PendingRecordEntry\nThe list of pending record entries related to the subjects the the account is teaching if its role is Teacher\n\n\nrequestedPendingRecordEntries\nList PendingRecordEntry\nThe list of pending record entries that the account requested to changes\n\n\nhomeClassrooms\nList Classroom\nThe list of classrooms the the account is a homeroom teacher at\n\n\n\n\n\n6.3.3 Profile\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\naccount\nAccount\nThe reference to the Account object\n\n\nfirstName\nString\nThe first name\n\n\nlastName\nString\nThe last name\n\n\nmale\nboolean\nIs the person male? false if she is a female\n\n\navatar\nString\nThe link to the avatar image\n\n\nbirthDate\nDate\nThe date of the birthday\n\n\naddress\nString\nThe address\n\n\nphone\nString\nThe phone number\n\n\nemail\nString\nThe email\n\n\nupdated\nboolean\nThe flag indicates that the profile requires sychronization with the Chain Node\n\n\n\n\n\n6.3.4 Student\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe account id\n\n\naccount\nAccount\nThe reference to the Account object\n\n\nethnic\nString\nThe ethnic of the student\n\n\nfatherName\nString\nThe name of the father of the student\n\n\nfatherJob\nString\nThe job of the father of the student\n\n\nmotherName\nString\nThe name of the mother of the student\n\n\nmotherJob\nString\nThe job of the mother of the student\n\n\nguardianName\nString\nThe name of the guardian of the student\n\n\nguardianJob\nString\nThe job of the guardian of the student\n\n\nhomeTown\nString\nThe home town of the student\n\n\nclassrooms\nList ClassStudent\nThe list of references to the classrooms that the student participates\n\n\nrecords\nList Record\nThe list of records related to the classrooms that the student participates\n\n\nupdaterKey\nList UpdaterKey\nThe list of updater keys of the student. Used to allow outsiders to get infomation of the student.\n\n\n\n\n\n6.3.5 Classroom\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe classroom id\n\n\nname\nString\nThe name of the classroom\n\n\ngrade\nint\nThe grade of the classroom\n\n\nyear\nint\nThe year of the classroom\n\n\nhomeroomTeacher\nAccount\nThe reference to the homeroom teacher of the classroom\n\n\nstudents\nList ClassStudent\nThe list of references to the students that participate in the classroom\n\n\nteachers\nList ClassTeacher\nThe list of references to the teachers that participate in the classroom\n\n\nrecords\nList Record\nThe list of records related to the classroom\n\n\n\n\n\n6.3.6 ClassStudent\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe id of the reference\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nstudent\nStudent\nThe reference to the student\n\n\n\n\n\n6.3.7 ClassTeacher\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe id of the reference\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nteacher\nAccount\nThe reference to the teacher\n\n\nsubjectId\nlong\nThe id of the subject that the teacher teaches\n\n\n\n\n\n6.3.8 Record\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe record id\n\n\nclassroom\nClassroom\nThe reference to the classroom\n\n\nstudent\nStudent\nThe reference to the student\n\n\nrecordEntry\nList RecordEntry\nThe list of verified record entries related to the record\n\n\npendingRecordEntry\nList PendingRecordEntry\nThe list of pending record entries related to the record\n\n\n\n\n\n6.3.9 RecordEntry\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe record entry id\n\n\nsubjectId\nlong\nThe id of the subject that the record entry is related to\n\n\nfirstHalfScore\nint\nThe score of the first semester of the subject\n\n\nsecondHalfScore\nint\nThe score of the second semester of the subject\n\n\nfinalScore\nint\nThe final score of the subject\n\n\nrequestDate\nDate\nThe date when the record entry was requested\n\n\napprovalDate\nDate\nThe date when the record entry was approved\n\n\nupdateComplete\nboolean\nThe flag indicates that the record entry was updated to the Chain Node\n\n\nteacher\nAccount\nThe reference to the teacher that teaches the subject\n\n\nrequester\nAccount\nThe reference to the account that requested the record entry\n\n\napprover\nAccount\nThe reference to the account that approved the record entry\n\n\nrecord\nRecord\nThe reference to the record that the record entry is related to\n\n\n\n\n\n6.3.10 PendingRecordEntry\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nlong\nThe pending record entry id\n\n\nsubjectId\nlong\nThe id of the subject that the pending record entry is related to\n\n\nfirstHalfScore\nint\nThe score of the first semester of the subject\n\n\nsecondHalfScore\nint\nThe score of the second semester of the subject\n\n\nfinalScore\nint\nThe final score of the subject\n\n\nrequestDate\nDate\nThe date when the pending record entry was requested\n\n\nteacher\nAccount\nThe reference to the teacher that teaches the subject\n\n\nrequester\nAccount\nThe reference to the account that requested the pending record entry\n\n\nrecord\nRecord\nThe reference to the record that the pending record entry is related to\n\n\n\n\n\n6.3.11 UpdaterKey\n\n\n\n\n\n\n\n\nField Name\nType\nDescription\n\n\n\n\nid\nString\nThe unique key\n\n\nstudent\nStudent\nThe reference to the student that the key is related to\n\n\n\n\n\n6.3.12 Sequence Diagram"
  },
  {
    "objectID": "Design.html#data-database-design",
    "href": "Design.html#data-database-design",
    "title": "6  Software Design Description",
    "section": "6.4 Data & Database Design",
    "text": "6.4 Data & Database Design\n\n6.4.1 Database Design\n\n\n\nFigure 6.4: Database Design of the Request Server\n\n\n\n6.4.1.1 Account\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nUSERNAME\ncharacter varying\n255\nx\nx\n\n\n\n\nHASHEDPASSWORD\ncharacter varying\n255\n\nx\n\n\n\n\nSALT\ncharacter varying\n255\n\nx\n\n\n\n\nROLE\ncharacter varying\n255\n\nx\n\n\n\n\nCREATEDAT\ntimestamp\n\n\nx\n\n\n\n\n\n\n\n6.4.1.2 Profile\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nADDRESS\ncharacter varying\n255\n\nx\n\n\n\n\nAVATAR\ncharacter varying\n255\n\nx\n\n\n\n\nBIRTHDATE\ntimestamp\n\n\nx\n\n\n\n\nEMAIL\ncharacter varying\n255\n\nx\n\n\n\n\nFIRSTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nLASTNAME\ncharacter varying\n255\n\nx\n\n\n\n\nMALE\nboolean\n\n\nx\n\n\n\n\nPHONE\ncharacter varying\n255\n\nx\n\n\n\n\nUPDATED\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n6.4.1.3 Student\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nACCOUNT_ID\nbigint\n\nx\nx\nPK, FK\n\n\n\nETHNIC\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nFATHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANJOB\ncharacter varying\n255\n\nx\n\n\n\n\nGUARDIANNAME\ncharacter varying\n255\n\nx\n\n\n\n\nHOMETOWN\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERJOB\ncharacter varying\n255\n\nx\n\n\n\n\nMOTHERNAME\ncharacter varying\n255\n\nx\n\n\n\n\n\n\n\n6.4.1.4 Classroom\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nNAME\ncharacter varying\n255\n\nx\n\n\n\n\nGRADE\ncharacter varying\n255\n\nx\n\n\n\n\nHOMEROOMTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSTART_YEAR\ninteger\n\n\nx\n\n\n\n\n\n\n\n6.4.1.5 Class Student\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n6.4.1.6 Class Teacher\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n6.4.1.7 Record\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nCLASSROOM_ID\nbigint\n\n\nx\nFK\n\n\n\nSTUDENT_ACCOUNT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n6.4.1.8 Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\n\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVER_ID\nbigint\n\n\n\nFK\n\n\n\nAPPROVALDATE\ntimestamp\n\n\nx\n\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\nUPDATECOMPLETE\nboolean\n\n\nx\n\nUsed internally by student updater\n\n\n\n\n\n6.4.1.9 Pending Record Entry\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\nbigint\n\nx\nx\nPK\n\n\n\nRECORD_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTER_ID\nbigint\n\n\nx\nFK\n\n\n\nTEACHER_ID\nbigint\n\n\nx\nFK\n\n\n\nREQUESTDATE\ntimestamp\n\n\nx\n\n\n\n\nFIRSTHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nSECONDHALFSCORE\ndouble precision\n\n\nx\n\n\n\n\nFINALSCORE\ndouble precision\n\n\nx\n\n\n\n\nSUBJECTID\nbigint\n\n\nx\n\nDefined in the system’s config\n\n\n\n\n\n6.4.1.10 Updater Key\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\nType\nSize\nUnique\nNot Null\nFlag\nNotes\n\n\n\n\nID\ncharacter varying\n255\nx\nx\nPK\n\n\n\nSTUDENT_ACCOUNT_ID\nbigint\n\n\nx\nFK\n\n\n\n\n\n\n\n6.4.2 Data File Design\n\n\n\n\n\n\n\n\nFile Name\nType\nNotes\n\n\n\n\ndb\nFolder\nThe folder of The H2 Database files\n\n\nupdater\nFolder\nContains the data files of the local student updater"
  },
  {
    "objectID": "Testing.html#overall-description",
    "href": "Testing.html#overall-description",
    "title": "7  Software Testing Documentation",
    "section": "7.1 Overall Description",
    "text": "7.1 Overall Description\n\n7.1.1 Test Model\nWe apply the V-model in our project, which is a development of the waterfall model. Testing is carried out concurrently with the software development cycle in the V-model, where a testing phase corresponds to a phase of software development.\n\n\n7.1.2 Testing Levels\nAbout the Testing levels in our project, we apply all those levels including Unit testing, Integration testing, System testing and Acceptance testing.\nWith Unit testing, we test each small module in the system, each class and function. Eg (………)\nWith Integration testing is a type of testing in which individual software modules or functions are logically integrated and tested in groups together. For instance, we can test the interoperability of two functions, add 1 item and search for the item to see if they interact well with each other, after successfully creating an item, we can proceed to search for the newly created item. or not.\nSystem testing is the last test phase to determine whether the system is about to deliver satisfying the requirements and goals. It tests the whole functionality and interface of the system. For instance, a database test for a system test is used to see if the data displayed on the system matches the data in the database.\nFinally, with Acceptance Test, similar to System Test but usually tested by customers, the purpose is to see if the software meets the customer’s requirements or not.\n\n\n7.1.3 Testing Types\nFunctional testing is checking if the system is working according to the business requirements and is performed in every level of testing. Non-Functional testing is similar to Functional testing in that both occur in all levels of testing. Non-functional testing is primarily concerned with the software’s other features, such as its security and if data is exposed by straightforward queries in any input field. Structural testing is often considered a type of white box testing. Instead than focusing on the software’s functionality, this method examines what is happening inside the program. Structural testing is also applicable at all testing levels. Changes Testing is done to determine whether or not the program is functioning correctly after bugs have been fixed."
  },
  {
    "objectID": "Testing.html#test-plan",
    "href": "Testing.html#test-plan",
    "title": "7  Software Testing Documentation",
    "section": "7.2 Test Plan",
    "text": "7.2 Test Plan\n\n7.2.1 Test Stages\n\n\n\n\n\n\n\n\n\n\nType of Test\nStage of Test\n\n\n\n\n\n\n\n\nUnit\nIntegration\nSystem\nAcceptance\n\n\nFunction Test\nX\nX\nX\nX\n\n\nUser Interface Test\n\n\n\n\n\n\nPerformance Test\nX\nX\nX\nX\n\n\nLoad, Stress, Volume test\nX\nX\nX\nX\n\n\nSecurity test\nX\nX\nX\nX\n\n\nData integrity test\nX\nX\nX\nX\n\n\n\n\n\n7.2.2 Resources\n\n7.2.2.1 Human Resources\n\n\n\nWorker/ Doer\nRole\nSpecifice Responsibilities/Comments\n\n\n\n\nTienHQ\n\n\n\n\nTuLX\n\n\n\n\nKhoaND\n\n\n\n\nUyCHA\n\n\n\n\nKhoiNM\n\n\n\n\n\n\n\n7.2.2.2 Environment\n\n\n\nPurpose\nTool\nProvider\nVersion\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.2.3 Test Milestones\n\n\n\nMilestone Task\nEfford (md)\nStart Date\nEnd Date\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.2.4 Deliverables\n\n\n\nNo\nDeliverables\nDue Data"
  },
  {
    "objectID": "Testing.html#test-cases",
    "href": "Testing.html#test-cases",
    "title": "7  Software Testing Documentation",
    "section": "7.3 Test Cases",
    "text": "7.3 Test Cases\n• Unit Test Cases: Report_Unit-Test-Case.xls\n• Other Test Cases: Report_Test-Case-Document.xls"
  },
  {
    "objectID": "Testing.html#test-reports",
    "href": "Testing.html#test-reports",
    "title": "7  Software Testing Documentation",
    "section": "7.4 Test Reports",
    "text": "7.4 Test Reports\nTest Report has been fully integrated in Unit_Test-Case and Test-Case-Document."
  },
  {
    "objectID": "Release.html#deliverable-package",
    "href": "Release.html#deliverable-package",
    "title": "8  Release Package & User Guides",
    "section": "8.1 Deliverable Package",
    "text": "8.1 Deliverable Package\n\n8.1.1 Source Codes & Documents\n\n\n\n\n\n\n\n\n\n\nNo.\nItems\nSub-Items\nType\nVersion\n\n\n\n\nCode package\n\n\n\n\n\n\n1\nEduBlock\nEduBlock Client\nNew\n1.0\n\n\n2\nBlockchain Network\nBlockchain Chaincode\nNew\n1.0\n\n\n3\nOCR\nRecord Table Processor\nNew\n1.0\n\n\nDatabase\n\n\n\n\n\n\n1\nTables\naccounts.sql\nNew\n1.0\n\n\n\n\nclassrooms.sql\nNew\n1.0\n\n\n\n\nsubjects.sql\nNew\n1.0\n\n\nDocuments\n\n\n\n\n\n\n1\nRequirement\nSRS_v1.0.docx\nNew\n1.0\n\n\n2\nDeployment\nUserGuide_v1.0.docx\nNew\n1.0\n\n\n\n\n\n8.1.2 Known Issues, Limitations & Restrictions"
  },
  {
    "objectID": "Release.html#installation-guides",
    "href": "Release.html#installation-guides",
    "title": "8  Release Package & User Guides",
    "section": "8.2 Installation Guides",
    "text": "8.2 Installation Guides\n\n8.2.1 System Requirements\nOS: any\nCPU: at least 4 cores\nRAM: at least 4Gb\nNETWORK: required\nSOFTWARE: Docker\n\n\n8.2.2 Setup Files\n\nDockerfile.backend\nDockerfile.frontend\nDockerfile.ocr\n\n\n\n8.2.3 Installation Instruction"
  },
  {
    "objectID": "Release.html#user-manual",
    "href": "Release.html#user-manual",
    "title": "8  Release Package & User Guides",
    "section": "8.3 User Manual",
    "text": "8.3 User Manual\n\n8.3.1 Terms & Definitions\n\n\n\nNo.\nTerm\nDefinition\n\n\n\n\n01\nF.FT\nFeature\n\n\n02\nR.ADM\nAdmin\n\n\n03\nR.STF\nStaff\n\n\n04\nR.TCH\nTeacher\n\n\n05\nR.STD\nStudent\n\n\n06\nR.ANY\nAny role\n\n\n\n\n\n8.3.2 System Requirements\nOS: any\nCPU: any\nRAM: at least 1Gb\nNETWORK: required\n\n\n8.3.3 Application Usage\n\n8.3.3.1 Overview\n\n\n\n\n\n\n\n\n\nNo.\nFeature\nRole\nNote\n\n\n\n\n01\nCreate new account\nR.ADM\n\n\n\n02\nView account list\nR.ADM, R.STF\n\n\n\n03\nView profile\nR.ANY\nEach role have different behavior\n\n\n04\nUpdate profile\nR.ADM, R.STF\nEach role have different behavior\n\n\n05\nUpdate password\nR.ANY\nEach role have different behavior\n\n\n06\nCreate new classroom\nR.STF\n\n\n\n07\nView classroom list\nR.STF, R.TCH, R.STD\nEach role have different behavior\n\n\n08\nView classroom information\nR.STF, R.TCH, R.STD\n\n\n\n09\nView students of classroom\nR.STF, R.TCH, R.STD\n\n\n\n10\nView teachers of classroom\nR.STF, R.TCH, R.STD\n\n\n\n11\nUpdate classroom information\nR.STF\n\n\n\n12\nUpdate student in classroom\nR.STF\n\n\n\n13\nUpdate teacher in classroom\nR.STF\n\n\n\n14\nView update request list\nR.TCH\n\n\n\n15\nVerify update request\nR.TCH\n\n\n\n16\nRequest update record\nR.TCH, R.STD\n\n\n\n\n\n\n8.3.3.2 Feature 01: Create new account\nDescription:\n\nAdmin create account for other user usage\n\nDetails:\n\nR.ADM\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Click Create at the top left of the page to open a modal with form\nStep 3: Input user First name, Last name and select a role for user\nStep 4: (Optional) Click Add at the bottom left of the form to add more account and repeat from Step 1\nStep 5: Click Create at the bottom right of the form to confirm the account creation\n\n\n\n\n8.3.3.3 Feature 02: View account list\nDescription:\n\nAdmin, Staff view the account list to manage account information and find reference for other operations\n\nDetails:\n\nR.ADM\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: (Optional) Click Search to reveal filter options below\nStep 2.1: Select search field on the left\nStep 2.2: Input search text on the right\nStep 2.3: Click Search button at the right most to apply list filter\nStep 3: View list of account\nStep 4: (Optional) Click page number at the top right to view other accounts\n\n\n\n\n8.3.3.4 Feature 03: View profile\nDescription:\n\nAdmin, Staff view user profile\nUser view personal profile\n\nDetails:\n\nR.ANY (Personal)\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\n\nR.ADM, R.STF\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Look for the specific account row in table\nStep 3: Click Details in the Actions column to navigate to the profile page of that account\n\n\n\n\n8.3.3.5 Feature 04: Update profile\nDescription:\n\nAdmin, Staff update personal profile\nStaff update Teacher, Student profile\n\nDetails\n\nR.ADM, R.STF (Personal)\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\nStep 2: Click Update in the profile section to open a modal with form\nStep 3: Change the form data to desired value\nStep 4: Click Confirm to save the changes.\n\nR.STF\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Look for the specific account row in table\nStep 3: Click Update in the Actions column to open an update modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm to save the changes\n\n\n\n\n8.3.3.6 Feature 05: Update password\nDescription:\n\nAdmin update other user password\nUser self update password\n\nDetails\n\nR.ANY (Personal)\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\nStep 2: Click Update password at the top right of the page to open a modal with form\nStep 3: Input the new password\nStep 4: Click Confirm to save the new password\n\nR.ADM\n\nStep 1: Click Account on the left navigation bar to navigate to account list page\nStep 2: Look for the specific account row in table\nStep 3: Click Update password in the Actions column to open an update modal with form\nStep 4: Input the new password\nStep 5: Click Confirm to save the new password\n\n\n\n\n8.3.3.7 Feature 06: Create new classroom\nDescription:\n\nStaff Create new classroom in the system\n\nDetails\n\nR.STF\n\nStep 1: Click Classroom on the left navigation bar to navigate to classroom list page\nStep 2: Click Create at the top left of the page to open a modal with form\nStep 3: Change the form data to desired value\nStep 4: Click Confirm at the bottom right of the modal to save the created classroom\n\n\n\n\n8.3.3.8 Feature 07: View classroom list\nDescription:\n\nStaff view the list of all the classroom in the system\nTeacher view the list of all the classroom being taught by that teacher\nStudent view the list of all the classroom that student taking part in\n\nDetails\n\nR.STF\n\nStep 1: Click Classroom on the left navigation bar to navigate to classroom list page\n\nR.TCH, R.STD\n\nStep 1: The list of classroom is in the dashboard page\n\n\n\n\n8.3.3.9 Feature 08: View classroom information\nDescription:\n\nStaff view classroom information\nTeacher view information of the classroom being taught by that teacher\nStudent view information of the classroom that student taking part in\n\nDetails\n\nR.STF\n\nStep 1: Click Classroom on the left navigation bar to navigate to classroom list page\nStep 2: Look for the specific classroom row in table\nStep 3: Click Details in the Actions column to navigate to the classroom details page\n\nR.TCH, R.STD\n\nStep 1: Click Dashboard on the left navigation bar to navigate to classroom list page\nStep 2: Look for the specific classroom row in table\nStep 3: Click Details in the Actions column to navigate to the classroom information page\n\n\n\n\n8.3.3.10 Feature 09: View students of classroom\nDescription:\n\nStaff view all the student in a specific classroom\nTeacher view all the student in the classroom being taught by that teacher\nStudent view all the student in the classroom that student taking part in\n\nDetails\n\nR.STF, R.TCH, R.STD\n\nStep 1: Follow Feature 08 to navigate to the classroom information page\nStep 2: Click Student which is the center tab at the top of the page to navigate to student list of that classroom\n\n\n\n\n8.3.3.11 Feature 10: View teachers of classroom\nDescription:\n\nStaff view all the teacher in a specific classroom\nTeacher view all the teacher in the classroom being taught by that teacher\nStudent view all the teacher in the classroom that student taking part in\n\nDetails\n\nR.STF, R.TCH, R.STD\n\nStep 1: Follow Feature 08 to navigate to the classroom information page\nStep 2: Click Teacher which is right most tab at the top of the page to navigate to teacher list of that classroom\n\n\n\n\n8.3.3.12 Feature 11: Update classroom information\nDescription:\n\nStaff update a specific classroom information\n\nDetails\n\nR.STF\n\nStep 1: Follow Feature 08 to navigate to the classroom information page\nStep 2: Click Details which is right most tab at the top of the page to navigate to details page of that classroom\nStep 3: Click Update at the bottom of the page to open a modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm at the bottom of the modal to save changes\n\n\n\n\n8.3.3.13 Feature 12: Update student in classroom\nDescription:\n\nStaff change the student of a specific classroom\n\nDetails\n\nR.STF\n\nStep 1: Follow Feature 09 to navigate to the classroom student page\nStep 2: Look for a specific account row in the table (May skip to Step 4)\nStep 3: Click Remove in the Actions column to remove student from classroom\nStep 4: Click Add at the top left of the page to open a modal with form\nStep 5: Change the form data to desired value\nStep 6: Click Confirm at the bottom right of the modal to save changes\n\n\n\n\n8.3.3.14 Feature 13: Update teacher in classroom\nDescription:\n\nStaff change the teacher of a specific classroom\n\nDetails\n\nR.STF\n\nStep 1: Follow Feature 10 to navigate to the classroom teacher page\nStep 2: Look for a specific account row in the table (May skip to Step 4)\nStep 3: Click Remove in the Actions column to remove teacher from classroom\nStep 4: Click Add at the top left of the page to open a modal with form\nStep 5: Change the form data to desired value\nStep 6: Click Confirm at the bottom right of the modal to save changes\n\n\n\n\n8.3.3.15 Feature 14: View update request list\nDescription:\n\nTeacher view list of request for updating record value\n\nDetails\n\nR.TCH\n\nStep 1: Click Request on the left navigation bar to navigate to request list page\n\n\n\n\n8.3.3.16 Feature 15: Verify update request\nDescription:\n\nTeacher verify request waiting for verification\n\nDetails\n\nR.TCH\n\nStep 1: Follow Feature 14 to navigate to the request list page\nStep 2: Look for the specific request row in table\nStep 3: Click Approve or Reject to approve or reject the request\n\n\n\n\n8.3.3.17 Feature 16: Request update record\nDescription:\n\nTeacher or student of same classroom request updating record for that student\n\nDetails\n\nR.TCH\n\nStep 1: Follow Feature 09 to navigate to student profile page\nStep 2: Look for the record need update in the record table at the bottom of the page\nStep 3: Click Update in the Actions column to open a modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm to send the request\n\nR.STD\n\nStep 1: Click personal card at the bottom of the Vertical Navigation bar to navigate to the profile page\nStep 2: Look for the record need update in the record table at the bottom of the page\nStep 3: Click Update in the Actions column to open a modal with form\nStep 4: Change the form data to desired value\nStep 5: Click Confirm to send the request\n\n\n\n\n\n8.3.4 Troubleshooting"
  }
]